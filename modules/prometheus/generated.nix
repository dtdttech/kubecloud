# This file was generated with nixidy CRD generator, do not edit.
{
  lib,
  options,
  config,
  ...
}:
with lib;
let
  hasAttrNotNull = attr: set: hasAttr attr set && set.${attr} != null;

  attrsToList =
    values:
    if values != null then
      sort (
        a: b:
        if (hasAttrNotNull "_priority" a && hasAttrNotNull "_priority" b) then
          a._priority < b._priority
        else
          false
      ) (mapAttrsToList (n: v: v) values)
    else
      values;

  getDefaults =
    resource: group: version: kind:
    catAttrs "default" (
      filter (
        default:
        (default.resource == null || default.resource == resource)
        && (default.group == null || default.group == group)
        && (default.version == null || default.version == version)
        && (default.kind == null || default.kind == kind)
      ) config.defaults
    );

  types = lib.types // rec {
    str = mkOptionType {
      name = "str";
      description = "string";
      check = isString;
      merge = mergeEqualOption;
    };

    # Either value of type `finalType` or `coercedType`, the latter is
    # converted to `finalType` using `coerceFunc`.
    coercedTo =
      coercedType: coerceFunc: finalType:
      mkOptionType rec {
        inherit (finalType) getSubOptions getSubModules;

        name = "coercedTo";
        description = "${finalType.description} or ${coercedType.description}";
        check = x: finalType.check x || coercedType.check x;
        merge =
          loc: defs:
          let
            coerceVal =
              val:
              if finalType.check val then
                val
              else
                let
                  coerced = coerceFunc val;
                in
                assert finalType.check coerced;
                coerced;
          in
          finalType.merge loc (map (def: def // { value = coerceVal def.value; }) defs);
        substSubModules = m: coercedTo coercedType coerceFunc (finalType.substSubModules m);
        typeMerge = t1: t2: null;
        functor = (defaultFunctor name) // {
          wrapped = finalType;
        };
      };
  };

  mkOptionDefault = mkOverride 1001;

  mergeValuesByKey =
    attrMergeKey: listMergeKeys: values:
    listToAttrs (
      imap0 (
        i: value:
        nameValuePair (
          if hasAttr attrMergeKey value then
            if isAttrs value.${attrMergeKey} then
              toString value.${attrMergeKey}.content
            else
              (toString value.${attrMergeKey})
          else
            # generate merge key for list elements if it's not present
            "__kubenix_list_merge_key_"
            + (concatStringsSep "" (
              map (
                key: if isAttrs value.${key} then toString value.${key}.content else (toString value.${key})
              ) listMergeKeys
            ))
        ) (value // { _priority = i; })
      ) values
    );

  submoduleOf =
    ref:
    types.submodule (
      { name, ... }:
      {
        options = definitions."${ref}".options or { };
        config = definitions."${ref}".config or { };
      }
    );

  globalSubmoduleOf =
    ref:
    types.submodule (
      { name, ... }:
      {
        options = config.definitions."${ref}".options or { };
        config = config.definitions."${ref}".config or { };
      }
    );

  submoduleWithMergeOf =
    ref: mergeKey:
    types.submodule (
      { name, ... }:
      let
        convertName =
          name: if definitions."${ref}".options.${mergeKey}.type == types.int then toInt name else name;
      in
      {
        options = definitions."${ref}".options // {
          # position in original array
          _priority = mkOption {
            type = types.nullOr types.int;
            default = null;
          };
        };
        config = definitions."${ref}".config // {
          ${mergeKey} = mkOverride 1002 (
            # use name as mergeKey only if it is not coming from mergeValuesByKey
            if (!hasPrefix "__kubenix_list_merge_key_" name) then convertName name else null
          );
        };
      }
    );

  submoduleForDefinition =
    ref: resource: kind: group: version:
    let
      apiVersion = if group == "core" then version else "${group}/${version}";
    in
    types.submodule (
      { name, ... }:
      {
        inherit (definitions."${ref}") options;

        imports = getDefaults resource group version kind;
        config = mkMerge [
          definitions."${ref}".config
          {
            kind = mkOptionDefault kind;
            apiVersion = mkOptionDefault apiVersion;

            # metdata.name cannot use option default, due deep config
            metadata.name = mkOptionDefault name;
          }
        ];
      }
    );

  coerceAttrsOfSubmodulesToListByKey =
    ref: attrMergeKey: listMergeKeys:
    (types.coercedTo (types.listOf (submoduleOf ref)) (mergeValuesByKey attrMergeKey listMergeKeys) (
      types.attrsOf (submoduleWithMergeOf ref attrMergeKey)
    ));

  definitions = {
    "monitoring.coreos.com.v1.Alertmanager" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of the desired behavior of the Alertmanager cluster. More info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpec";
        };
        "status" = mkOption {
          description = "Most recent observed status of the Alertmanager cluster. Read-only.\nMore info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerStatus");
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpec" = {
      options = {
        "additionalArgs" = mkOption {
          description = "AdditionalArgs allows setting additional arguments for the 'Alertmanager' container.\nIt is intended for e.g. activating hidden flags which are not supported by\nthe dedicated configuration options yet. The arguments are passed as-is to the\nAlertmanager container which may cause issues if they are invalid or not supported\nby the given Alertmanager version.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecAdditionalArgs" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "additionalPeers" = mkOption {
          description = "AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.";
          type = types.nullOr (types.listOf types.str);
        };
        "affinity" = mkOption {
          description = "If specified, the pod's scheduling constraints.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinity");
        };
        "alertmanagerConfigMatcherStrategy" = mkOption {
          description = "AlertmanagerConfigMatcherStrategy defines how AlertmanagerConfig objects\nprocess incoming alerts.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigMatcherStrategy"
          );
        };
        "alertmanagerConfigNamespaceSelector" = mkOption {
          description = "Namespaces to be selected for AlertmanagerConfig discovery. If nil, only\ncheck own namespace.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigNamespaceSelector"
          );
        };
        "alertmanagerConfigSelector" = mkOption {
          description = "AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigSelector"
          );
        };
        "alertmanagerConfiguration" = mkOption {
          description = "alertmanagerConfiguration specifies the configuration of Alertmanager.\n\nIf defined, it takes precedence over the `configSecret` field.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfiguration"
          );
        };
        "automountServiceAccountToken" = mkOption {
          description = "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in the pod.\nIf the service account has `automountServiceAccountToken: true`, set the field to `false` to opt out of automounting API credentials.";
          type = types.nullOr types.bool;
        };
        "baseImage" = mkOption {
          description = "Base image that is used to deploy pods, without tag.\nDeprecated: use 'image' instead.";
          type = types.nullOr types.str;
        };
        "clusterAdvertiseAddress" = mkOption {
          description = "ClusterAdvertiseAddress is the explicit address to advertise in cluster.\nNeeds to be provided for non RFC1918 [1] (public) addresses.\n[1] RFC1918: https://tools.ietf.org/html/rfc1918";
          type = types.nullOr types.str;
        };
        "clusterGossipInterval" = mkOption {
          description = "Interval between gossip attempts.";
          type = types.nullOr types.str;
        };
        "clusterLabel" = mkOption {
          description = "Defines the identifier that uniquely identifies the Alertmanager cluster.\nYou should only set it when the Alertmanager cluster includes Alertmanager instances which are external to this Alertmanager resource. In practice, the addresses of the external instances are provided via the `.spec.additionalPeers` field.";
          type = types.nullOr types.str;
        };
        "clusterPeerTimeout" = mkOption {
          description = "Timeout for cluster peering.";
          type = types.nullOr types.str;
        };
        "clusterPushpullInterval" = mkOption {
          description = "Interval between pushpull attempts.";
          type = types.nullOr types.str;
        };
        "clusterTLS" = mkOption {
          description = "Configures the mutual TLS configuration for the Alertmanager cluster's gossip protocol.\n\nIt requires Alertmanager >= 0.24.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLS");
        };
        "configMaps" = mkOption {
          description = "ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager\nobject, which shall be mounted into the Alertmanager Pods.\nEach ConfigMap is added to the StatefulSet definition as a volume named `configmap-<configmap-name>`.\nThe ConfigMaps are mounted into `/etc/alertmanager/configmaps/<configmap-name>` in the 'alertmanager' container.";
          type = types.nullOr (types.listOf types.str);
        };
        "configSecret" = mkOption {
          description = "ConfigSecret is the name of a Kubernetes Secret in the same namespace as the\nAlertmanager object, which contains the configuration for this Alertmanager\ninstance. If empty, it defaults to `alertmanager-<alertmanager-name>`.\n\nThe Alertmanager configuration should be available under the\n`alertmanager.yaml` key. Additional keys from the original secret are\ncopied to the generated secret and mounted into the\n`/etc/alertmanager/config` directory in the `alertmanager` container.\n\nIf either the secret or the `alertmanager.yaml` key is missing, the\noperator provisions a minimal Alertmanager configuration with one empty\nreceiver (effectively dropping alert notifications).";
          type = types.nullOr types.str;
        };
        "containers" = mkOption {
          description = "Containers allows injecting additional containers. This is meant to\nallow adding an authentication proxy to an Alertmanager pod.\nContainers described here modify an operator generated container if they\nshare the same name and modifications are done via a strategic merge\npatch. The current container names are: `alertmanager` and\n`config-reloader`. Overriding containers is entirely outside the scope\nof what the maintainers will support and by doing so, you accept that\nthis behaviour may break at any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecContainers" "name" [ ]
          );
          apply = attrsToList;
        };
        "dnsConfig" = mkOption {
          description = "Defines the DNS configuration for the pods.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecDnsConfig");
        };
        "dnsPolicy" = mkOption {
          description = "Defines the DNS policy for the pods.";
          type = types.nullOr types.str;
        };
        "enableFeatures" = mkOption {
          description = "Enable access to Alertmanager feature flags. By default, no features are enabled.\nEnabling features which are disabled by default is entirely outside the\nscope of what the maintainers will support and by doing so, you accept\nthat this behaviour may break at any time without notice.\n\nIt requires Alertmanager >= 0.27.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "enableServiceLinks" = mkOption {
          description = "Indicates whether information about services should be injected into pod's environment variables";
          type = types.nullOr types.bool;
        };
        "externalUrl" = mkOption {
          description = "The external URL the Alertmanager instances will be available under. This is\nnecessary to generate correct URLs. This is necessary if Alertmanager is not\nserved from root of a DNS name.";
          type = types.nullOr types.str;
        };
        "forceEnableClusterMode" = mkOption {
          description = "ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica.\nUse case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.";
          type = types.nullOr types.bool;
        };
        "hostAliases" = mkOption {
          description = "Pods' hostAliases configuration";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecHostAliases")
          );
        };
        "image" = mkOption {
          description = "Image if specified has precedence over baseImage, tag and sha\ncombinations. Specifying the version is still necessary to ensure the\nPrometheus Operator knows what version of Alertmanager is being\nconfigured.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy for the 'alertmanager', 'init-config-reloader' and 'config-reloader' containers.\nSee https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.";
          type = types.nullOr types.str;
        };
        "imagePullSecrets" = mkOption {
          description = "An optional list of references to secrets in the same namespace\nto use for pulling prometheus and alertmanager images from registries\nsee http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecImagePullSecrets"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "initContainers" = mkOption {
          description = "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.\nfetch secrets for injection into the Alertmanager configuration from external sources. Any\nerrors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\nInitContainers described here modify an operator\ngenerated init containers if they share the same name and modifications are\ndone via a strategic merge patch. The current init container name is:\n`init-config-reloader`. Overriding init containers is entirely outside the\nscope of what the maintainers will support and by doing so, you accept that\nthis behaviour may break at any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecInitContainers" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Defines the limits command line flags when starting Alertmanager.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecLimits");
        };
        "listenLocal" = mkOption {
          description = "ListenLocal makes the Alertmanager server listen on loopback, so that it\ndoes not bind against the Pod IP. Note this is only for the Alertmanager\nUI, not the gossip communication.";
          type = types.nullOr types.bool;
        };
        "logFormat" = mkOption {
          description = "Log format for Alertmanager to be configured with.";
          type = types.nullOr types.str;
        };
        "logLevel" = mkOption {
          description = "Log level for Alertmanager to be configured with.";
          type = types.nullOr types.str;
        };
        "minReadySeconds" = mkOption {
          description = "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\nThis is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.";
          type = types.nullOr types.int;
        };
        "nodeSelector" = mkOption {
          description = "Define which Nodes the Pods are scheduled on.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "paused" = mkOption {
          description = "If set to true all actions on the underlying managed objects are not\ngoint to be performed, except for delete actions.";
          type = types.nullOr types.bool;
        };
        "persistentVolumeClaimRetentionPolicy" = mkOption {
          description = "The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.\nThe default behavior is all PVCs are retained.\nThis is an alpha field from kubernetes 1.23 until 1.26 and a beta field from 1.26.\nIt requires enabling the StatefulSetAutoDeletePVC feature gate.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecPersistentVolumeClaimRetentionPolicy"
          );
        };
        "podMetadata" = mkOption {
          description = "PodMetadata configures labels and annotations which are propagated to the Alertmanager pods.\n\nThe following items are reserved and cannot be overridden:\n* \"alertmanager\" label, set to the name of the Alertmanager instance.\n* \"app.kubernetes.io/instance\" label, set to the name of the Alertmanager instance.\n* \"app.kubernetes.io/managed-by\" label, set to \"prometheus-operator\".\n* \"app.kubernetes.io/name\" label, set to \"alertmanager\".\n* \"app.kubernetes.io/version\" label, set to the Alertmanager version.\n* \"kubectl.kubernetes.io/default-container\" annotation, set to \"alertmanager\".";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecPodMetadata");
        };
        "portName" = mkOption {
          description = "Port name used for the pods and governing service.\nDefaults to `web`.";
          type = types.nullOr types.str;
        };
        "priorityClassName" = mkOption {
          description = "Priority class assigned to the Pods";
          type = types.nullOr types.str;
        };
        "replicas" = mkOption {
          description = "Size is the expected size of the alertmanager cluster. The controller will\neventually make the size of the running cluster equal to the expected\nsize.";
          type = types.nullOr types.int;
        };
        "resources" = mkOption {
          description = "Define resources requests and limits for single Pods.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecResources");
        };
        "retention" = mkOption {
          description = "Time duration Alertmanager shall retain data for. Default is '120h',\nand must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).";
          type = types.nullOr types.str;
        };
        "routePrefix" = mkOption {
          description = "The route prefix Alertmanager registers HTTP handlers for. This is useful,\nif using ExternalURL and a proxy is rewriting HTTP routes of a request,\nand the actual ExternalURL is still true, but the server serves requests\nunder a different route prefix. For example for use with `kubectl proxy`.";
          type = types.nullOr types.str;
        };
        "secrets" = mkOption {
          description = "Secrets is a list of Secrets in the same namespace as the Alertmanager\nobject, which shall be mounted into the Alertmanager Pods.\nEach Secret is added to the StatefulSet definition as a volume named `secret-<secret-name>`.\nThe Secrets are mounted into `/etc/alertmanager/secrets/<secret-name>` in the 'alertmanager' container.";
          type = types.nullOr (types.listOf types.str);
        };
        "securityContext" = mkOption {
          description = "SecurityContext holds pod-level security attributes and common container settings.\nThis defaults to the default PodSecurityContext.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContext");
        };
        "serviceAccountName" = mkOption {
          description = "ServiceAccountName is the name of the ServiceAccount to use to run the\nPrometheus Pods.";
          type = types.nullOr types.str;
        };
        "serviceName" = mkOption {
          description = "The name of the service name used by the underlying StatefulSet(s) as the governing service.\nIf defined, the Service  must be created before the Alertmanager resource in the same namespace and it must define a selector that matches the pod labels.\nIf empty, the operator will create and manage a headless service named `alertmanager-operated` for Alermanager resources.\nWhen deploying multiple Alertmanager resources in the same namespace, it is recommended to specify a different value for each.\nSee https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id for more details.";
          type = types.nullOr types.str;
        };
        "sha" = mkOption {
          description = "SHA of Alertmanager container image to be deployed. Defaults to the value of `version`.\nSimilar to a tag, but the SHA explicitly deploys an immutable container image.\nVersion and Tag are ignored if SHA is set.\nDeprecated: use 'image' instead. The image digest can be specified as part of the image URL.";
          type = types.nullOr types.str;
        };
        "storage" = mkOption {
          description = "Storage is the definition of how storage will be used by the Alertmanager\ninstances.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorage");
        };
        "tag" = mkOption {
          description = "Tag of Alertmanager container image to be deployed. Defaults to the value of `version`.\nVersion is ignored if Tag is set.\nDeprecated: use 'image' instead. The image tag can be specified as part of the image URL.";
          type = types.nullOr types.str;
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down) which may lead to data corruption.\n\nDefaults to 120 seconds.";
          type = types.nullOr types.int;
        };
        "tolerations" = mkOption {
          description = "If specified, the pod's tolerations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecTolerations")
          );
        };
        "topologySpreadConstraints" = mkOption {
          description = "If specified, the pod's topology spread constraints.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecTopologySpreadConstraints")
          );
        };
        "version" = mkOption {
          description = "Version the cluster should be on.";
          type = types.nullOr types.str;
        };
        "volumeMounts" = mkOption {
          description = "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.\nVolumeMounts specified will be appended to other VolumeMounts in the alertmanager container,\nthat are generated as a result of StorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecVolumeMounts" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "volumes" = mkOption {
          description = "Volumes allows configuration of additional volumes on the output StatefulSet definition.\nVolumes specified will be appended to other volumes that are generated as a result of\nStorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecVolumes" "name" [ ]
          );
          apply = attrsToList;
        };
        "web" = mkOption {
          description = "Defines the web command line flags when starting Alertmanager.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWeb");
        };
      };

      config = {
        "additionalArgs" = mkOverride 1002 null;
        "additionalPeers" = mkOverride 1002 null;
        "affinity" = mkOverride 1002 null;
        "alertmanagerConfigMatcherStrategy" = mkOverride 1002 null;
        "alertmanagerConfigNamespaceSelector" = mkOverride 1002 null;
        "alertmanagerConfigSelector" = mkOverride 1002 null;
        "alertmanagerConfiguration" = mkOverride 1002 null;
        "automountServiceAccountToken" = mkOverride 1002 null;
        "baseImage" = mkOverride 1002 null;
        "clusterAdvertiseAddress" = mkOverride 1002 null;
        "clusterGossipInterval" = mkOverride 1002 null;
        "clusterLabel" = mkOverride 1002 null;
        "clusterPeerTimeout" = mkOverride 1002 null;
        "clusterPushpullInterval" = mkOverride 1002 null;
        "clusterTLS" = mkOverride 1002 null;
        "configMaps" = mkOverride 1002 null;
        "configSecret" = mkOverride 1002 null;
        "containers" = mkOverride 1002 null;
        "dnsConfig" = mkOverride 1002 null;
        "dnsPolicy" = mkOverride 1002 null;
        "enableFeatures" = mkOverride 1002 null;
        "enableServiceLinks" = mkOverride 1002 null;
        "externalUrl" = mkOverride 1002 null;
        "forceEnableClusterMode" = mkOverride 1002 null;
        "hostAliases" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "imagePullSecrets" = mkOverride 1002 null;
        "initContainers" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "listenLocal" = mkOverride 1002 null;
        "logFormat" = mkOverride 1002 null;
        "logLevel" = mkOverride 1002 null;
        "minReadySeconds" = mkOverride 1002 null;
        "nodeSelector" = mkOverride 1002 null;
        "paused" = mkOverride 1002 null;
        "persistentVolumeClaimRetentionPolicy" = mkOverride 1002 null;
        "podMetadata" = mkOverride 1002 null;
        "portName" = mkOverride 1002 null;
        "priorityClassName" = mkOverride 1002 null;
        "replicas" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "retention" = mkOverride 1002 null;
        "routePrefix" = mkOverride 1002 null;
        "secrets" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "serviceAccountName" = mkOverride 1002 null;
        "serviceName" = mkOverride 1002 null;
        "sha" = mkOverride 1002 null;
        "storage" = mkOverride 1002 null;
        "tag" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "tolerations" = mkOverride 1002 null;
        "topologySpreadConstraints" = mkOverride 1002 null;
        "version" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "volumes" = mkOverride 1002 null;
        "web" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAdditionalArgs" = {
      options = {
        "name" = mkOption {
          description = "Name of the argument, e.g. \"scrape.discovery-reload-interval\".";
          type = types.str;
        };
        "value" = mkOption {
          description = "Argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinity" = {
      options = {
        "nodeAffinity" = mkOption {
          description = "Describes node affinity scheduling rules for the pod.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinity");
        };
        "podAffinity" = mkOption {
          description = "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinity");
        };
        "podAntiAffinity" = mkOption {
          description = "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinity"
          );
        };
      };

      config = {
        "nodeAffinity" = mkOverride 1002 null;
        "podAffinity" = mkOverride 1002 null;
        "podAntiAffinity" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "preference" = mkOption {
            description = "A node selector term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference";
          };
          "weight" = mkOption {
            description = "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "nodeSelectorTerms" = mkOption {
            description = "Required. A list of node selector terms. The terms are ORed.";
            type = types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
            );
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigMatcherStrategy" = {
      options = {
        "type" = mkOption {
          description = "AlertmanagerConfigMatcherStrategyType defines the strategy used by\nAlertmanagerConfig objects to match alerts in the routes and inhibition\nrules.\n\nThe default value is `OnNamespace`.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfiguration" = {
      options = {
        "global" = mkOption {
          description = "Defines the global parameters of the Alertmanager configuration.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobal"
          );
        };
        "name" = mkOption {
          description = "The name of the AlertmanagerConfig resource which is used to generate the Alertmanager configuration.\nIt must be defined in the same namespace as the Alertmanager object.\nThe operator will not enforce a `namespace` label for routes and inhibition rules.";
          type = types.nullOr types.str;
        };
        "templates" = mkOption {
          description = "Custom notification templates.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationTemplates"
            )
          );
        };
      };

      config = {
        "global" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "templates" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobal" = {
      options = {
        "httpConfig" = mkOption {
          description = "HTTP client configuration.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig"
          );
        };
        "opsGenieApiKey" = mkOption {
          description = "The default OpsGenie API Key.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey"
          );
        };
        "opsGenieApiUrl" = mkOption {
          description = "The default OpsGenie API URL.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl"
          );
        };
        "pagerdutyUrl" = mkOption {
          description = "The default Pagerduty URL.";
          type = types.nullOr types.str;
        };
        "resolveTimeout" = mkOption {
          description = "ResolveTimeout is the default value used by alertmanager if the alert does\nnot include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated.\nThis has no impact on alerts from Prometheus, as they always include EndsAt.";
          type = types.nullOr types.str;
        };
        "slackApiUrl" = mkOption {
          description = "The default Slack API URL.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl"
          );
        };
        "smtp" = mkOption {
          description = "Configures global SMTP parameters.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtp"
          );
        };
      };

      config = {
        "httpConfig" = mkOverride 1002 null;
        "opsGenieApiKey" = mkOverride 1002 null;
        "opsGenieApiUrl" = mkOverride 1002 null;
        "pagerdutyUrl" = mkOverride 1002 null;
        "resolveTimeout" = mkOverride 1002 null;
        "slackApiUrl" = mkOverride 1002 null;
        "smtp" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfig" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header configuration for the client.\nThis is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth for the client.\nThis is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth"
          );
        };
        "bearerTokenSecret" = mkOption {
          description = "The secret's key that contains the bearer token to be used by the client\nfor authentication.\nThe secret needs to be in the same namespace as the Alertmanager\nobject and accessible by the Prometheus Operator.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret"
          );
        };
        "followRedirects" = mkOption {
          description = "FollowRedirects specifies whether the client should follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "OAuth2 client credentials used to fetch a token for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2"
          );
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration for the client.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerTokenSecret" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorization" =
      {
        options = {
          "credentials" = mkOption {
            description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials"
            );
          };
          "type" = mkOption {
            description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
            type = types.nullOr types.str;
          };
        };

        config = {
          "credentials" = mkOverride 1002 null;
          "type" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigAuthorizationCredentials" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuthPassword" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBasicAuthUsername" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigBearerTokenSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientId" =
      {
        options = {
          "configMap" = mkOption {
            description = "ConfigMap containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientIdConfigMap"
            );
          };
          "secret" = mkOption {
            description = "Secret containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientIdSecret"
            );
          };
        };

        config = {
          "configMap" = mkOverride 1002 null;
          "secret" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientIdConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientIdSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2ClientSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfig" =
      {
        options = {
          "ca" = mkOption {
            description = "Certificate authority used when verifying server certificates.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCa"
            );
          };
          "cert" = mkOption {
            description = "Client certificate to present when doing client-authentication.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCert"
            );
          };
          "insecureSkipVerify" = mkOption {
            description = "Disable target certificate validation.";
            type = types.nullOr types.bool;
          };
          "keySecret" = mkOption {
            description = "Secret containing the client key file for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigKeySecret"
            );
          };
          "maxVersion" = mkOption {
            description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
            type = types.nullOr types.str;
          };
          "minVersion" = mkOption {
            description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
            type = types.nullOr types.str;
          };
          "serverName" = mkOption {
            description = "Used to verify the hostname for the targets.";
            type = types.nullOr types.str;
          };
        };

        config = {
          "ca" = mkOverride 1002 null;
          "cert" = mkOverride 1002 null;
          "insecureSkipVerify" = mkOverride 1002 null;
          "keySecret" = mkOverride 1002 null;
          "maxVersion" = mkOverride 1002 null;
          "minVersion" = mkOverride 1002 null;
          "serverName" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCa" =
      {
        options = {
          "configMap" = mkOption {
            description = "ConfigMap containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCaConfigMap"
            );
          };
          "secret" = mkOption {
            description = "Secret containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCaSecret"
            );
          };
        };

        config = {
          "configMap" = mkOverride 1002 null;
          "secret" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCaConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCaSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCert" =
      {
        options = {
          "configMap" = mkOption {
            description = "ConfigMap containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCertConfigMap"
            );
          };
          "secret" = mkOption {
            description = "Secret containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCertSecret"
            );
          };
        };

        config = {
          "configMap" = mkOverride 1002 null;
          "secret" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCertConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigCertSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigOauth2TlsConfigKeySecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCaConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCaSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCert" =
      {
        options = {
          "configMap" = mkOption {
            description = "ConfigMap containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCertConfigMap"
            );
          };
          "secret" = mkOption {
            description = "Secret containing data to use for the targets.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCertSecret"
            );
          };
        };

        config = {
          "configMap" = mkOverride 1002 null;
          "secret" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCertConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigCertSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalHttpConfigTlsConfigKeySecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalOpsGenieApiUrl" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSlackApiUrl" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtp" = {
      options = {
        "authIdentity" = mkOption {
          description = "SMTP Auth using PLAIN";
          type = types.nullOr types.str;
        };
        "authPassword" = mkOption {
          description = "SMTP Auth using LOGIN and PLAIN.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpAuthPassword"
          );
        };
        "authSecret" = mkOption {
          description = "SMTP Auth using CRAM-MD5.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpAuthSecret"
          );
        };
        "authUsername" = mkOption {
          description = "SMTP Auth using CRAM-MD5, LOGIN and PLAIN. If empty, Alertmanager doesn't authenticate to the SMTP server.";
          type = types.nullOr types.str;
        };
        "from" = mkOption {
          description = "The default SMTP From header field.";
          type = types.nullOr types.str;
        };
        "hello" = mkOption {
          description = "The default hostname to identify to the SMTP server.";
          type = types.nullOr types.str;
        };
        "requireTLS" = mkOption {
          description = "The default SMTP TLS requirement.\nNote that Go does not support unencrypted connections to remote SMTP endpoints.";
          type = types.nullOr types.bool;
        };
        "smartHost" = mkOption {
          description = "The default SMTP smarthost used for sending emails.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpSmartHost"
          );
        };
        "tlsConfig" = mkOption {
          description = "The default TLS configuration for SMTP receivers";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfig"
          );
        };
      };

      config = {
        "authIdentity" = mkOverride 1002 null;
        "authPassword" = mkOverride 1002 null;
        "authSecret" = mkOverride 1002 null;
        "authUsername" = mkOverride 1002 null;
        "from" = mkOverride 1002 null;
        "hello" = mkOverride 1002 null;
        "requireTLS" = mkOverride 1002 null;
        "smartHost" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpAuthSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpSmartHost" = {
      options = {
        "host" = mkOption {
          description = "Defines the host's address, it can be a DNS name or a literal IP address.";
          type = types.str;
        };
        "port" = mkOption {
          description = "Defines the host's port, it can be a literal port number or a port name.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCaConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCertConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigCertSecret" =
      {
        options = {
          "key" = mkOption {
            description = "The key of the secret to select from.  Must be a valid secret key.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the Secret or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationGlobalSmtpTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationTemplates" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationTemplatesConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationTemplatesSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationTemplatesConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecAlertmanagerConfigurationTemplatesSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLS" = {
      options = {
        "client" = mkOption {
          description = "Client-side configuration for mutual TLS.";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClient";
        };
        "server" = mkOption {
          description = "Server-side configuration for mutual TLS.";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServer";
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClient" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCa");
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCert");
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSClientKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServer" = {
      options = {
        "cert" = mkOption {
          description = "Secret or ConfigMap containing the TLS certificate for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `certFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerCert");
        };
        "certFile" = mkOption {
          description = "Path to the TLS certificate file in the container for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `cert`.";
          type = types.nullOr types.str;
        };
        "cipherSuites" = mkOption {
          description = "List of supported cipher suites for TLS versions up to TLS 1.2.\n\nIf not defined, the Go default cipher suites are used.\nAvailable cipher suites are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#pkg-constants";
          type = types.nullOr (types.listOf types.str);
        };
        "clientAuthType" = mkOption {
          description = "The server policy for client TLS authentication.\n\nFor more detail on clientAuth options:\nhttps://golang.org/pkg/crypto/tls/#ClientAuthType";
          type = types.nullOr types.str;
        };
        "clientCAFile" = mkOption {
          description = "Path to the CA certificate file for client certificate authentication to\nthe server.\n\nIt is mutually exclusive with `client_ca`.";
          type = types.nullOr types.str;
        };
        "client_ca" = mkOption {
          description = "Secret or ConfigMap containing the CA certificate for client certificate\nauthentication to the server.\n\nIt is mutually exclusive with `clientCAFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerClient_ca"
          );
        };
        "curvePreferences" = mkOption {
          description = "Elliptic curves that will be used in an ECDHE handshake, in preference\norder.\n\nAvailable curves are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#CurveID";
          type = types.nullOr (types.listOf types.str);
        };
        "keyFile" = mkOption {
          description = "Path to the TLS private key file in the container for the web server.\n\nIf defined, either `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keySecret`.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the TLS private key for the web server.\n\nEither `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keyFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "preferServerCipherSuites" = mkOption {
          description = "Controls whether the server selects the client's most preferred cipher\nsuite, or the server's most preferred cipher suite.\n\nIf true then the server's preference, as expressed in\nthe order of elements in cipherSuites, is used.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "cipherSuites" = mkOverride 1002 null;
        "clientAuthType" = mkOverride 1002 null;
        "clientCAFile" = mkOverride 1002 null;
        "client_ca" = mkOverride 1002 null;
        "curvePreferences" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "preferServerCipherSuites" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerClient_ca" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerClient_caConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerClient_caSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerClient_caConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerClient_caSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecClusterTLSServerKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnv" "name" [
              "name"
            ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecycle");
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbe"
          );
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecContainersPorts" "name"
              [
                "containerPort"
                "protocol"
              ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbe"
          );
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersResizePolicy")
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersResources");
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbe");
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFrom");
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecDnsConfig" = {
      options = {
        "nameservers" = mkOption {
          description = "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
        "options" = mkOption {
          description = "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nResolution options given in Options\nwill override those that appear in the base DNSPolicy.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecDnsConfigOptions"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "searches" = mkOption {
          description = "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "nameservers" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "searches" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecDnsConfigOptions" = {
      options = {
        "name" = mkOption {
          description = "Name is required and must be unique.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value is optional.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecHostAliases" = {
      options = {
        "hostnames" = mkOption {
          description = "Hostnames for the above IP address.";
          type = types.listOf types.str;
        };
        "ip" = mkOption {
          description = "IP address of the host file entry.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecImagePullSecrets" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnv"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecycle"
          );
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbe"
          );
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersPorts"
              "name"
              [
                "containerPort"
                "protocol"
              ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbe"
          );
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersResizePolicy")
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersResources"
          );
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbe"
          );
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFrom"
          );
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecInitContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecLimits" = {
      options = {
        "maxPerSilenceBytes" = mkOption {
          description = "The maximum size of an individual silence as stored on disk. This corresponds to the Alertmanager's\n`--silences.max-per-silence-bytes` flag.\nIt requires Alertmanager >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "maxSilences" = mkOption {
          description = "The maximum number active and pending silences. This corresponds to the\nAlertmanager's `--silences.max-silences` flag.\nIt requires Alertmanager >= v0.28.0.";
          type = types.nullOr types.int;
        };
      };

      config = {
        "maxPerSilenceBytes" = mkOverride 1002 null;
        "maxSilences" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecPersistentVolumeClaimRetentionPolicy" = {
      options = {
        "whenDeleted" = mkOption {
          description = "WhenDeleted specifies what happens to PVCs created from StatefulSet\nVolumeClaimTemplates when the StatefulSet is deleted. The default policy\nof `Retain` causes PVCs to not be affected by StatefulSet deletion. The\n`Delete` policy causes those PVCs to be deleted.";
          type = types.nullOr types.str;
        };
        "whenScaled" = mkOption {
          description = "WhenScaled specifies what happens to PVCs created from StatefulSet\nVolumeClaimTemplates when the StatefulSet is scaled down. The default\npolicy of `Retain` causes PVCs to not be affected by a scaledown. The\n`Delete` policy causes the associated PVCs for any excess pods above\nthe replica count to be deleted.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "whenDeleted" = mkOverride 1002 null;
        "whenScaled" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecPodMetadata" = {
      options = {
        "annotations" = mkOption {
          description = "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations";
          type = types.nullOr (types.attrsOf types.str);
        };
        "labels" = mkOption {
          description = "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels";
          type = types.nullOr (types.attrsOf types.str);
        };
        "name" = mkOption {
          description = "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "annotations" = mkOverride 1002 null;
        "labels" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecResourcesClaims" "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContext" = {
      options = {
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextAppArmorProfile"
          );
        };
        "fsGroup" = mkOption {
          description = "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "fsGroupChangePolicy" = mkOption {
          description = "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxChangePolicy" = mkOption {
          description = "seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.\nIt has no effect on nodes that do not support SELinux or to volumes does not support SELinux.\nValid values are \"MountOption\" and \"Recursive\".\n\n\"Recursive\" means relabeling of all files on all Pod volumes by the container runtime.\nThis may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.\n\n\"MountOption\" mounts all eligible Pod volumes with `-o context` mount option.\nThis requires all Pods that share the same volume to use the same SELinux label.\nIt is not possible to share the same volume among privileged and unprivileged Pods.\nEligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes\nwhose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their\nCSIDriver instance. Other volumes are always re-labelled recursively.\n\"MountOption\" value is allowed only when SELinuxMount feature gate is enabled.\n\nIf not specified and SELinuxMount feature gate is enabled, \"MountOption\" is used.\nIf not specified and SELinuxMount feature gate is disabled, \"MountOption\" is used for ReadWriteOncePod volumes\nand \"Recursive\" for all other volumes.\n\nThis field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.\n\nAll Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextSeccompProfile"
          );
        };
        "supplementalGroups" = mkOption {
          description = "A list of groups applied to the first process run in each container, in\naddition to the container's primary GID and fsGroup (if specified).  If\nthe SupplementalGroupsPolicy feature is enabled, the\nsupplementalGroupsPolicy field determines whether these are in addition\nto or instead of any group memberships defined in the container image.\nIf unspecified, no additional groups are added, though group memberships\ndefined in the container image may still be used, depending on the\nsupplementalGroupsPolicy field.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (types.listOf types.int);
        };
        "supplementalGroupsPolicy" = mkOption {
          description = "Defines how supplemental groups of the first container processes are calculated.\nValid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used.\n(Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled\nand the container runtime must implement support for this feature.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "sysctls" = mkOption {
          description = "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextSysctls"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "appArmorProfile" = mkOverride 1002 null;
        "fsGroup" = mkOverride 1002 null;
        "fsGroupChangePolicy" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxChangePolicy" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "supplementalGroups" = mkOverride 1002 null;
        "supplementalGroupsPolicy" = mkOverride 1002 null;
        "sysctls" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextSysctls" = {
      options = {
        "name" = mkOption {
          description = "Name of a property to set";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value of a property to set";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorage" = {
      options = {
        "disableMountSubPath" = mkOption {
          description = "Deprecated: subPath usage will be removed in a future release.";
          type = types.nullOr types.bool;
        };
        "emptyDir" = mkOption {
          description = "EmptyDirVolumeSource to be used by the StatefulSet.\nIf specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEmptyDir");
        };
        "ephemeral" = mkOption {
          description = "EphemeralVolumeSource to be used by the StatefulSet.\nThis is a beta field in k8s 1.21 and GA in 1.15.\nFor lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.\nMore info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeral");
        };
        "volumeClaimTemplate" = mkOption {
          description = "Defines the PVC spec to be used by the Prometheus StatefulSets.\nThe easiest way to use a volume that cannot be automatically provisioned\nis to use a label selector alongside manually created PersistentVolumes.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplate"
          );
        };
      };

      config = {
        "disableMountSubPath" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplate" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Defines the desired characteristics of a volume requested by a pod author.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpec"
          );
        };
        "status" = mkOption {
          description = "Deprecated: this field is never set.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateStatus"
          );
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "spec" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateStatus" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the actual access modes the volume backing the PVC has.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "allocatedResourceStatuses" = mkOption {
          description = "allocatedResourceStatuses stores status of resource being resized for the given PVC.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "allocatedResources" = mkOption {
          description = "allocatedResources tracks the resources allocated to a PVC including its capacity.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation\nis requested.\nFor storage quota, the larger value from allocatedResources and PVC.spec.resources is used.\nIf allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.\nIf a volume expansion capacity request is lowered, allocatedResources is only\nlowered if there are no expansion operations in progress and if the actual volume capacity\nis equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "capacity" = mkOption {
          description = "capacity represents the actual resources of the underlying volume.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "conditions" = mkOption {
          description = "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being\nresized then the Condition will be set to 'Resizing'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions"
            )
          );
        };
        "currentVolumeAttributesClassName" = mkOption {
          description = "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.\nWhen unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr types.str;
        };
        "modifyVolumeStatus" = mkOption {
          description = "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.\nWhen this is unset, there is no ModifyVolume operation being attempted.\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus"
          );
        };
        "phase" = mkOption {
          description = "phase represents the current phase of PersistentVolumeClaim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "allocatedResourceStatuses" = mkOverride 1002 null;
        "allocatedResources" = mkOverride 1002 null;
        "capacity" = mkOverride 1002 null;
        "conditions" = mkOverride 1002 null;
        "currentVolumeAttributesClassName" = mkOverride 1002 null;
        "modifyVolumeStatus" = mkOverride 1002 null;
        "phase" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateStatusConditions" = {
      options = {
        "lastProbeTime" = mkOption {
          description = "lastProbeTime is the time we probed the condition.";
          type = types.nullOr types.str;
        };
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time the condition transitioned from one status to another.";
          type = types.nullOr types.str;
        };
        "message" = mkOption {
          description = "message is the human-readable message indicating details about last transition.";
          type = types.nullOr types.str;
        };
        "reason" = mkOption {
          description = "reason is a unique, this should be a short, machine understandable string that gives the reason\nfor condition's last transition. If it reports \"Resizing\" that means the underlying\npersistent volume is being resized.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about";
          type = types.str;
        };
      };

      config = {
        "lastProbeTime" = mkOverride 1002 null;
        "lastTransitionTime" = mkOverride 1002 null;
        "message" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus" = {
      options = {
        "status" = mkOption {
          description = "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.";
          type = types.str;
        };
        "targetVolumeAttributesClassName" = mkOption {
          description = "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled";
          type = types.nullOr types.str;
        };
      };

      config = {
        "targetVolumeAttributesClassName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecTolerations" = {
      options = {
        "effect" = mkOption {
          description = "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.";
          type = types.nullOr types.str;
        };
        "key" = mkOption {
          description = "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.";
          type = types.nullOr types.str;
        };
        "operator" = mkOption {
          description = "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.";
          type = types.nullOr types.str;
        };
        "tolerationSeconds" = mkOption {
          description = "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.";
          type = types.nullOr types.int;
        };
        "value" = mkOption {
          description = "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "effect" = mkOverride 1002 null;
        "key" = mkOverride 1002 null;
        "operator" = mkOverride 1002 null;
        "tolerationSeconds" = mkOverride 1002 null;
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecTopologySpreadConstraints" = {
      options = {
        "labelSelector" = mkOption {
          description = "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecTopologySpreadConstraintsLabelSelector"
          );
        };
        "matchLabelKeys" = mkOption {
          description = "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).";
          type = types.nullOr (types.listOf types.str);
        };
        "maxSkew" = mkOption {
          description = "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |   P   |\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.";
          type = types.int;
        };
        "minDomains" = mkOption {
          description = "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |  P P  |\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.";
          type = types.nullOr types.int;
        };
        "nodeAffinityPolicy" = mkOption {
          description = "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.";
          type = types.nullOr types.str;
        };
        "nodeTaintsPolicy" = mkOption {
          description = "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.";
          type = types.nullOr types.str;
        };
        "topologyKey" = mkOption {
          description = "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each <key, value> as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.";
          type = types.str;
        };
        "whenUnsatisfiable" = mkOption {
          description = "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.";
          type = types.str;
        };
      };

      config = {
        "labelSelector" = mkOverride 1002 null;
        "matchLabelKeys" = mkOverride 1002 null;
        "minDomains" = mkOverride 1002 null;
        "nodeAffinityPolicy" = mkOverride 1002 null;
        "nodeTaintsPolicy" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecTopologySpreadConstraintsLabelSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumes" = {
      options = {
        "awsElasticBlockStore" = mkOption {
          description = "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree\nawsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesAwsElasticBlockStore"
          );
        };
        "azureDisk" = mkOption {
          description = "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\nDeprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type\nare redirected to the disk.csi.azure.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesAzureDisk");
        };
        "azureFile" = mkOption {
          description = "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\nDeprecated: AzureFile is deprecated. All operations for the in-tree azureFile type\nare redirected to the file.csi.azure.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesAzureFile");
        };
        "cephfs" = mkOption {
          description = "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.\nDeprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCephfs");
        };
        "cinder" = mkOption {
          description = "cinder represents a cinder volume attached and mounted on kubelets host machine.\nDeprecated: Cinder is deprecated. All operations for the in-tree cinder type\nare redirected to the cinder.csi.openstack.org CSI driver.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCinder");
        };
        "configMap" = mkOption {
          description = "configMap represents a configMap that should populate this volume";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesConfigMap");
        };
        "csi" = mkOption {
          description = "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCsi");
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI represents downward API about the pod that should populate this volume";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPI");
        };
        "emptyDir" = mkOption {
          description = "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEmptyDir");
        };
        "ephemeral" = mkOption {
          description = "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeral");
        };
        "fc" = mkOption {
          description = "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFc");
        };
        "flexVolume" = mkOption {
          description = "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\nDeprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFlexVolume");
        };
        "flocker" = mkOption {
          description = "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.\nDeprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFlocker");
        };
        "gcePersistentDisk" = mkOption {
          description = "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: GCEPersistentDisk is deprecated. All operations for the in-tree\ngcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesGcePersistentDisk"
          );
        };
        "gitRepo" = mkOption {
          description = "gitRepo represents a git repository at a particular revision.\nDeprecated: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesGitRepo");
        };
        "glusterfs" = mkOption {
          description = "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nDeprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesGlusterfs");
        };
        "hostPath" = mkOption {
          description = "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesHostPath");
        };
        "image" = mkOption {
          description = "image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.\nThe volume is resolved at pod startup depending on which PullPolicy value is provided:\n\n- Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\n- Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\n- IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\n\nThe volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.\nA failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.\nThe types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.\nThe OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.\nThe volume will be mounted read-only (ro) and non-executable files (noexec).\nSub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.\nThe field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesImage");
        };
        "iscsi" = mkOption {
          description = "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesIscsi");
        };
        "name" = mkOption {
          description = "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.str;
        };
        "nfs" = mkOption {
          description = "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesNfs");
        };
        "persistentVolumeClaim" = mkOption {
          description = "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesPersistentVolumeClaim"
          );
        };
        "photonPersistentDisk" = mkOption {
          description = "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.\nDeprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesPhotonPersistentDisk"
          );
        };
        "portworxVolume" = mkOption {
          description = "portworxVolume represents a portworx volume attached and mounted on kubelets host machine.\nDeprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type\nare redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate\nis on.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesPortworxVolume");
        };
        "projected" = mkOption {
          description = "projected items for all in one resources secrets, configmaps, and downward API";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjected");
        };
        "quobyte" = mkOption {
          description = "quobyte represents a Quobyte mount on the host that shares a pod's lifetime.\nDeprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesQuobyte");
        };
        "rbd" = mkOption {
          description = "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nDeprecated: RBD is deprecated and the in-tree rbd type is no longer supported.\nMore info: https://examples.k8s.io/volumes/rbd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesRbd");
        };
        "scaleIO" = mkOption {
          description = "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\nDeprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesScaleIO");
        };
        "secret" = mkOption {
          description = "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesSecret");
        };
        "storageos" = mkOption {
          description = "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\nDeprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesStorageos");
        };
        "vsphereVolume" = mkOption {
          description = "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.\nDeprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type\nare redirected to the csi.vsphere.vmware.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesVsphereVolume");
        };
      };

      config = {
        "awsElasticBlockStore" = mkOverride 1002 null;
        "azureDisk" = mkOverride 1002 null;
        "azureFile" = mkOverride 1002 null;
        "cephfs" = mkOverride 1002 null;
        "cinder" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "csi" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "fc" = mkOverride 1002 null;
        "flexVolume" = mkOverride 1002 null;
        "flocker" = mkOverride 1002 null;
        "gcePersistentDisk" = mkOverride 1002 null;
        "gitRepo" = mkOverride 1002 null;
        "glusterfs" = mkOverride 1002 null;
        "hostPath" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "iscsi" = mkOverride 1002 null;
        "nfs" = mkOverride 1002 null;
        "persistentVolumeClaim" = mkOverride 1002 null;
        "photonPersistentDisk" = mkOverride 1002 null;
        "portworxVolume" = mkOverride 1002 null;
        "projected" = mkOverride 1002 null;
        "quobyte" = mkOverride 1002 null;
        "rbd" = mkOverride 1002 null;
        "scaleIO" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "storageos" = mkOverride 1002 null;
        "vsphereVolume" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesAwsElasticBlockStore" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesAzureDisk" = {
      options = {
        "cachingMode" = mkOption {
          description = "cachingMode is the Host Caching mode: None, Read Only, Read Write.";
          type = types.nullOr types.str;
        };
        "diskName" = mkOption {
          description = "diskName is the Name of the data disk in the blob storage";
          type = types.str;
        };
        "diskURI" = mkOption {
          description = "diskURI is the URI of data disk in the blob storage";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cachingMode" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesAzureFile" = {
      options = {
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the  name of secret that contains Azure Storage Account Name and Key";
          type = types.str;
        };
        "shareName" = mkOption {
          description = "shareName is the azure share Name";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCephfs" = {
      options = {
        "monitors" = mkOption {
          description = "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "path" = mkOption {
          description = "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretFile" = mkOption {
          description = "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCephfsSecretRef");
        };
        "user" = mkOption {
          description = "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "path" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretFile" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCephfsSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCinder" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCinderSecretRef");
        };
        "volumeID" = mkOption {
          description = "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCinderSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesConfigMap" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesConfigMapItems")
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCsi" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.";
          type = types.nullOr types.str;
        };
        "nodePublishSecretRef" = mkOption {
          description = "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCsiNodePublishSecretRef"
          );
        };
        "readOnly" = mkOption {
          description = "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).";
          type = types.nullOr types.bool;
        };
        "volumeAttributes" = mkOption {
          description = "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "nodePublishSecretRef" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "volumeAttributes" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesCsiNodePublishSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPI" = {
      options = {
        "defaultMode" = mkOption {
          description = "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "Items is a list of downward API volume file";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPIItems")
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPIItemsFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesDownwardAPIItemsResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFc" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun is Optional: FC target lun number";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "targetWWNs" = mkOption {
          description = "targetWWNs is Optional: FC target worldwide names (WWNs)";
          type = types.nullOr (types.listOf types.str);
        };
        "wwids" = mkOption {
          description = "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "lun" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "targetWWNs" = mkOverride 1002 null;
        "wwids" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFlexVolume" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the driver to use for this volume.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.";
          type = types.nullOr types.str;
        };
        "options" = mkOption {
          description = "options is Optional: this field holds extra command options if any.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFlexVolumeSecretRef"
          );
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFlexVolumeSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesFlocker" = {
      options = {
        "datasetName" = mkOption {
          description = "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as deprecated";
          type = types.nullOr types.str;
        };
        "datasetUUID" = mkOption {
          description = "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset";
          type = types.nullOr types.str;
        };
      };

      config = {
        "datasetName" = mkOverride 1002 null;
        "datasetUUID" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesGcePersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.int;
        };
        "pdName" = mkOption {
          description = "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesGitRepo" = {
      options = {
        "directory" = mkOption {
          description = "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.";
          type = types.nullOr types.str;
        };
        "repository" = mkOption {
          description = "repository is the URL";
          type = types.str;
        };
        "revision" = mkOption {
          description = "revision is the commit hash for the specified revision.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "directory" = mkOverride 1002 null;
        "revision" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesGlusterfs" = {
      options = {
        "endpoints" = mkOption {
          description = "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "path" = mkOption {
          description = "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesHostPath" = {
      options = {
        "path" = mkOption {
          description = "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.str;
        };
        "type" = mkOption {
          description = "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr types.str;
        };
      };

      config = {
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesImage" = {
      options = {
        "pullPolicy" = mkOption {
          description = "Policy for pulling OCI objects. Possible values are:\nAlways: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\nNever: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\nIfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.";
          type = types.nullOr types.str;
        };
        "reference" = mkOption {
          description = "Required: Image or artifact reference to be used.\nBehaves in the same way as pod.spec.containers[*].image.\nPull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "pullPolicy" = mkOverride 1002 null;
        "reference" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesIscsi" = {
      options = {
        "chapAuthDiscovery" = mkOption {
          description = "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication";
          type = types.nullOr types.bool;
        };
        "chapAuthSession" = mkOption {
          description = "chapAuthSession defines whether support iSCSI Session CHAP authentication";
          type = types.nullOr types.bool;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi";
          type = types.nullOr types.str;
        };
        "initiatorName" = mkOption {
          description = "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.";
          type = types.nullOr types.str;
        };
        "iqn" = mkOption {
          description = "iqn is the target iSCSI Qualified Name.";
          type = types.str;
        };
        "iscsiInterface" = mkOption {
          description = "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun represents iSCSI Target Lun number.";
          type = types.int;
        };
        "portals" = mkOption {
          description = "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.nullOr (types.listOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is the CHAP Secret for iSCSI target and initiator authentication";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesIscsiSecretRef");
        };
        "targetPortal" = mkOption {
          description = "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.str;
        };
      };

      config = {
        "chapAuthDiscovery" = mkOverride 1002 null;
        "chapAuthSession" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "initiatorName" = mkOverride 1002 null;
        "iscsiInterface" = mkOverride 1002 null;
        "portals" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesIscsiSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesNfs" = {
      options = {
        "path" = mkOption {
          description = "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr types.bool;
        };
        "server" = mkOption {
          description = "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesPersistentVolumeClaim" = {
      options = {
        "claimName" = mkOption {
          description = "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesPhotonPersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "pdID" = mkOption {
          description = "pdID is the ID that identifies Photon Controller persistent disk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesPortworxVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID uniquely identifies a Portworx volume";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjected" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "sources" = mkOption {
          description = "sources is the list of volume projections. Each entry in this list\nhandles one source.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSources")
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "sources" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSources" = {
      options = {
        "clusterTrustBundle" = mkOption {
          description = "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesClusterTrustBundle"
          );
        };
        "configMap" = mkOption {
          description = "configMap information about the configMap data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesConfigMap"
          );
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI information about the downwardAPI data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPI"
          );
        };
        "secret" = mkOption {
          description = "secret information about the secret data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesSecret"
          );
        };
        "serviceAccountToken" = mkOption {
          description = "serviceAccountToken is information about the serviceAccountToken data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken"
          );
        };
      };

      config = {
        "clusterTrustBundle" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "serviceAccountToken" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesClusterTrustBundle" = {
      options = {
        "labelSelector" = mkOption {
          description = "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector"
          );
        };
        "name" = mkOption {
          description = "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.";
          type = types.nullOr types.bool;
        };
        "path" = mkOption {
          description = "Relative path from the volume root to write the bundle.";
          type = types.str;
        };
        "signerName" = mkOption {
          description = "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "labelSelector" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "signerName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesConfigMap" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesConfigMapItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPI" = {
      options = {
        "items" = mkOption {
          description = "Items is a list of DownwardAPIVolume file";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems"
            )
          );
        };
      };

      config = {
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef" =
      {
        options = {
          "containerName" = mkOption {
            description = "Container name: required for volumes, optional for env vars";
            type = types.nullOr types.str;
          };
          "divisor" = mkOption {
            description = "Specifies the output format of the exposed resources, defaults to \"1\"";
            type = types.nullOr (types.either types.int types.str);
          };
          "resource" = mkOption {
            description = "Required: resource to select";
            type = types.str;
          };
        };

        config = {
          "containerName" = mkOverride 1002 null;
          "divisor" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesSecret" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesSecretItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesProjectedSourcesServiceAccountToken" = {
      options = {
        "audience" = mkOption {
          description = "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.";
          type = types.nullOr types.str;
        };
        "expirationSeconds" = mkOption {
          description = "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the path relative to the mount point of the file to project the\ntoken into.";
          type = types.str;
        };
      };

      config = {
        "audience" = mkOverride 1002 null;
        "expirationSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesQuobyte" = {
      options = {
        "group" = mkOption {
          description = "group to map volume access to\nDefault is no group";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "registry" = mkOption {
          description = "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes";
          type = types.str;
        };
        "tenant" = mkOption {
          description = "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "user to map volume access to\nDefaults to serivceaccount user";
          type = types.nullOr types.str;
        };
        "volume" = mkOption {
          description = "volume is a string that references an already created Quobyte volume by name.";
          type = types.str;
        };
      };

      config = {
        "group" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "tenant" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesRbd" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd";
          type = types.nullOr types.str;
        };
        "image" = mkOption {
          description = "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.str;
        };
        "keyring" = mkOption {
          description = "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "monitors" = mkOption {
          description = "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "pool" = mkOption {
          description = "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesRbdSecretRef");
        };
        "user" = mkOption {
          description = "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "keyring" = mkOverride 1002 null;
        "pool" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesRbdSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesScaleIO" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".";
          type = types.nullOr types.str;
        };
        "gateway" = mkOption {
          description = "gateway is the host address of the ScaleIO API Gateway.";
          type = types.str;
        };
        "protectionDomain" = mkOption {
          description = "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.";
          type = submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesScaleIOSecretRef";
        };
        "sslEnabled" = mkOption {
          description = "sslEnabled Flag enable/disable SSL communication with Gateway, default false";
          type = types.nullOr types.bool;
        };
        "storageMode" = mkOption {
          description = "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.";
          type = types.nullOr types.str;
        };
        "storagePool" = mkOption {
          description = "storagePool is the ScaleIO Storage Pool associated with the protection domain.";
          type = types.nullOr types.str;
        };
        "system" = mkOption {
          description = "system is the name of the storage system as configured in ScaleIO.";
          type = types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "protectionDomain" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "sslEnabled" = mkOverride 1002 null;
        "storageMode" = mkOverride 1002 null;
        "storagePool" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesScaleIOSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesSecret" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesSecretItems")
          );
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its keys must be defined";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr types.str;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "secretName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesStorageos" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecVolumesStorageosSecretRef"
          );
        };
        "volumeName" = mkOption {
          description = "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.";
          type = types.nullOr types.str;
        };
        "volumeNamespace" = mkOption {
          description = "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
        "volumeNamespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesStorageosSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecVolumesVsphereVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "storagePolicyID" = mkOption {
          description = "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.";
          type = types.nullOr types.str;
        };
        "storagePolicyName" = mkOption {
          description = "storagePolicyName is the storage Policy Based Management (SPBM) profile name.";
          type = types.nullOr types.str;
        };
        "volumePath" = mkOption {
          description = "volumePath is the path that identifies vSphere volume vmdk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "storagePolicyID" = mkOverride 1002 null;
        "storagePolicyName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWeb" = {
      options = {
        "getConcurrency" = mkOption {
          description = "Maximum number of GET requests processed concurrently. This corresponds to the\nAlertmanager's `--web.get-concurrency` flag.";
          type = types.nullOr types.int;
        };
        "httpConfig" = mkOption {
          description = "Defines HTTP parameters for web server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebHttpConfig");
        };
        "timeout" = mkOption {
          description = "Timeout for HTTP requests. This corresponds to the Alertmanager's\n`--web.timeout` flag.";
          type = types.nullOr types.int;
        };
        "tlsConfig" = mkOption {
          description = "Defines the TLS parameters for HTTPS.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfig");
        };
      };

      config = {
        "getConcurrency" = mkOverride 1002 null;
        "httpConfig" = mkOverride 1002 null;
        "timeout" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebHttpConfig" = {
      options = {
        "headers" = mkOption {
          description = "List of headers that can be added to HTTP responses.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebHttpConfigHeaders");
        };
        "http2" = mkOption {
          description = "Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.\nWhen TLSConfig is not configured, HTTP/2 will be disabled.\nWhenever the value of the field changes, a rolling update will be triggered.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "headers" = mkOverride 1002 null;
        "http2" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebHttpConfigHeaders" = {
      options = {
        "contentSecurityPolicy" = mkOption {
          description = "Set the Content-Security-Policy header to HTTP responses.\nUnset if blank.";
          type = types.nullOr types.str;
        };
        "strictTransportSecurity" = mkOption {
          description = "Set the Strict-Transport-Security header to HTTP responses.\nUnset if blank.\nPlease make sure that you use this with care as this header might force\nbrowsers to load Prometheus and the other applications hosted on the same\ndomain and subdomains over HTTPS.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security";
          type = types.nullOr types.str;
        };
        "xContentTypeOptions" = mkOption {
          description = "Set the X-Content-Type-Options header to HTTP responses.\nUnset if blank. Accepted value is nosniff.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options";
          type = types.nullOr types.str;
        };
        "xFrameOptions" = mkOption {
          description = "Set the X-Frame-Options header to HTTP responses.\nUnset if blank. Accepted values are deny and sameorigin.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options";
          type = types.nullOr types.str;
        };
        "xXSSProtection" = mkOption {
          description = "Set the X-XSS-Protection header to all responses.\nUnset if blank.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection";
          type = types.nullOr types.str;
        };
      };

      config = {
        "contentSecurityPolicy" = mkOverride 1002 null;
        "strictTransportSecurity" = mkOverride 1002 null;
        "xContentTypeOptions" = mkOverride 1002 null;
        "xFrameOptions" = mkOverride 1002 null;
        "xXSSProtection" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfig" = {
      options = {
        "cert" = mkOption {
          description = "Secret or ConfigMap containing the TLS certificate for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `certFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigCert");
        };
        "certFile" = mkOption {
          description = "Path to the TLS certificate file in the container for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `cert`.";
          type = types.nullOr types.str;
        };
        "cipherSuites" = mkOption {
          description = "List of supported cipher suites for TLS versions up to TLS 1.2.\n\nIf not defined, the Go default cipher suites are used.\nAvailable cipher suites are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#pkg-constants";
          type = types.nullOr (types.listOf types.str);
        };
        "clientAuthType" = mkOption {
          description = "The server policy for client TLS authentication.\n\nFor more detail on clientAuth options:\nhttps://golang.org/pkg/crypto/tls/#ClientAuthType";
          type = types.nullOr types.str;
        };
        "clientCAFile" = mkOption {
          description = "Path to the CA certificate file for client certificate authentication to\nthe server.\n\nIt is mutually exclusive with `client_ca`.";
          type = types.nullOr types.str;
        };
        "client_ca" = mkOption {
          description = "Secret or ConfigMap containing the CA certificate for client certificate\nauthentication to the server.\n\nIt is mutually exclusive with `clientCAFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigClient_ca");
        };
        "curvePreferences" = mkOption {
          description = "Elliptic curves that will be used in an ECDHE handshake, in preference\norder.\n\nAvailable curves are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#CurveID";
          type = types.nullOr (types.listOf types.str);
        };
        "keyFile" = mkOption {
          description = "Path to the TLS private key file in the container for the web server.\n\nIf defined, either `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keySecret`.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the TLS private key for the web server.\n\nEither `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keyFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigKeySecret");
        };
        "maxVersion" = mkOption {
          description = "Maximum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "preferServerCipherSuites" = mkOption {
          description = "Controls whether the server selects the client's most preferred cipher\nsuite, or the server's most preferred cipher suite.\n\nIf true then the server's preference, as expressed in\nthe order of elements in cipherSuites, is used.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "cipherSuites" = mkOverride 1002 null;
        "clientAuthType" = mkOverride 1002 null;
        "clientCAFile" = mkOverride 1002 null;
        "client_ca" = mkOverride 1002 null;
        "curvePreferences" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "preferServerCipherSuites" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigCertSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigClient_ca" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigClient_caConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigClient_caSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigClient_caConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigClient_caSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerSpecWebTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerStatus" = {
      options = {
        "availableReplicas" = mkOption {
          description = "Total number of available pods (ready for at least minReadySeconds)\ntargeted by this Alertmanager cluster.";
          type = types.int;
        };
        "conditions" = mkOption {
          description = "The current state of the Alertmanager object.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.AlertmanagerStatusConditions")
          );
        };
        "paused" = mkOption {
          description = "Represents whether any actions on the underlying managed objects are\nbeing performed. Only delete actions will be performed.";
          type = types.bool;
        };
        "replicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this Alertmanager\nobject (their labels match the selector).";
          type = types.int;
        };
        "selector" = mkOption {
          description = "The selector used to match the pods targeted by this Alertmanager object.";
          type = types.nullOr types.str;
        };
        "unavailableReplicas" = mkOption {
          description = "Total number of unavailable pods targeted by this Alertmanager object.";
          type = types.int;
        };
        "updatedReplicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this Alertmanager\nobject that have the desired version spec.";
          type = types.int;
        };
      };

      config = {
        "conditions" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.AlertmanagerStatusConditions" = {
      options = {
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time of the last update to the current status property.";
          type = types.str;
        };
        "message" = mkOption {
          description = "Human-readable message indicating details for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "observedGeneration" = mkOption {
          description = "ObservedGeneration represents the .metadata.generation that the\ncondition was set based upon. For instance, if `.metadata.generation` is\ncurrently 12, but the `.status.conditions[].observedGeneration` is 9, the\ncondition is out of date with respect to the current state of the\ninstance.";
          type = types.nullOr types.int;
        };
        "reason" = mkOption {
          description = "Reason for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status of the condition.";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type of the condition being reported.";
          type = types.str;
        };
      };

      config = {
        "message" = mkOverride 1002 null;
        "observedGeneration" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitor" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of desired Pod selection for target discovery by Prometheus.";
          type = submoduleOf "monitoring.coreos.com.v1.PodMonitorSpec";
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpec" = {
      options = {
        "attachMetadata" = mkOption {
          description = "`attachMetadata` defines additional metadata which is added to the\ndiscovered targets.\n\nIt requires Prometheus >= v2.35.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecAttachMetadata");
        };
        "bodySizeLimit" = mkOption {
          description = "When defined, bodySizeLimit specifies a job level limit on the size\nof uncompressed response body that will be accepted by Prometheus.\n\nIt requires Prometheus >= v2.28.0.";
          type = types.nullOr types.str;
        };
        "convertClassicHistogramsToNHCB" = mkOption {
          description = "Whether to convert all scraped classic histograms into a native histogram with custom buckets.\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.bool;
        };
        "fallbackScrapeProtocol" = mkOption {
          description = "The protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
        "jobLabel" = mkOption {
          description = "The label to use to retrieve the job name from.\n`jobLabel` selects the label from the associated Kubernetes `Pod`\nobject which will be used as the `job` label for all metrics.\n\nFor example if `jobLabel` is set to `foo` and the Kubernetes `Pod`\nobject is labeled with `foo: bar`, then Prometheus adds the `job=\"bar\"`\nlabel to all ingested metrics.\n\nIf the value of this field is empty, the `job` label of the metrics\ndefaults to the namespace and name of the PodMonitor object (e.g. `<namespace>/<name>`).";
          type = types.nullOr types.str;
        };
        "keepDroppedTargets" = mkOption {
          description = "Per-scrape limit on the number of targets dropped by relabeling\nthat will be kept in memory. 0 means no limit.\n\nIt requires Prometheus >= v2.47.0.";
          type = types.nullOr types.int;
        };
        "labelLimit" = mkOption {
          description = "Per-scrape limit on number of labels that will be accepted for a sample.\n\nIt requires Prometheus >= v2.27.0.";
          type = types.nullOr types.int;
        };
        "labelNameLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels name that will be accepted for a sample.\n\nIt requires Prometheus >= v2.27.0.";
          type = types.nullOr types.int;
        };
        "labelValueLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels value that will be accepted for a sample.\n\nIt requires Prometheus >= v2.27.0.";
          type = types.nullOr types.int;
        };
        "namespaceSelector" = mkOption {
          description = "`namespaceSelector` defines in which namespace(s) Prometheus should discover the pods.\nBy default, the pods are discovered in the same namespace as the `PodMonitor` object but it is possible to select pods across different/all namespaces.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecNamespaceSelector");
        };
        "nativeHistogramBucketLimit" = mkOption {
          description = "If there are more than this many buckets in a native histogram,\nbuckets will be merged to stay within the limit.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.int;
        };
        "nativeHistogramMinBucketFactor" = mkOption {
          description = "If the growth factor of one bucket to the next is smaller than this,\nbuckets will be merged to increase the factor sufficiently.\nIt requires Prometheus >= v2.50.0.";
          type = types.nullOr (types.either types.int types.str);
        };
        "podMetricsEndpoints" = mkOption {
          description = "Defines how to scrape metrics from the selected pods.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpoints")
          );
        };
        "podTargetLabels" = mkOption {
          description = "`podTargetLabels` defines the labels which are transferred from the\nassociated Kubernetes `Pod` object onto the ingested metrics.";
          type = types.nullOr (types.listOf types.str);
        };
        "sampleLimit" = mkOption {
          description = "`sampleLimit` defines a per-scrape limit on the number of scraped samples\nthat will be accepted.";
          type = types.nullOr types.int;
        };
        "scrapeClass" = mkOption {
          description = "The scrape class to apply.";
          type = types.nullOr types.str;
        };
        "scrapeClassicHistograms" = mkOption {
          description = "Whether to scrape a classic histogram that is also exposed as a native histogram.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.bool;
        };
        "scrapeProtocols" = mkOption {
          description = "`scrapeProtocols` defines the protocols to negotiate during a scrape. It tells clients the\nprotocols supported by Prometheus in order of preference (from most to least preferred).\n\nIf unset, Prometheus uses its default value.\n\nIt requires Prometheus >= v2.49.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "selector" = mkOption {
          description = "Label selector to select the Kubernetes `Pod` objects to scrape metrics from.";
          type = submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecSelector";
        };
        "selectorMechanism" = mkOption {
          description = "Mechanism used to select the endpoints to scrape.\nBy default, the selection process relies on relabel configurations to filter the discovered targets.\nAlternatively, you can opt in for role selectors, which may offer better efficiency in large clusters.\nWhich strategy is best for your use case needs to be carefully evaluated.\n\nIt requires Prometheus >= v2.17.0.";
          type = types.nullOr types.str;
        };
        "targetLimit" = mkOption {
          description = "`targetLimit` defines a limit on the number of scraped targets that will\nbe accepted.";
          type = types.nullOr types.int;
        };
      };

      config = {
        "attachMetadata" = mkOverride 1002 null;
        "bodySizeLimit" = mkOverride 1002 null;
        "convertClassicHistogramsToNHCB" = mkOverride 1002 null;
        "fallbackScrapeProtocol" = mkOverride 1002 null;
        "jobLabel" = mkOverride 1002 null;
        "keepDroppedTargets" = mkOverride 1002 null;
        "labelLimit" = mkOverride 1002 null;
        "labelNameLengthLimit" = mkOverride 1002 null;
        "labelValueLengthLimit" = mkOverride 1002 null;
        "namespaceSelector" = mkOverride 1002 null;
        "nativeHistogramBucketLimit" = mkOverride 1002 null;
        "nativeHistogramMinBucketFactor" = mkOverride 1002 null;
        "podMetricsEndpoints" = mkOverride 1002 null;
        "podTargetLabels" = mkOverride 1002 null;
        "sampleLimit" = mkOverride 1002 null;
        "scrapeClass" = mkOverride 1002 null;
        "scrapeClassicHistograms" = mkOverride 1002 null;
        "scrapeProtocols" = mkOverride 1002 null;
        "selectorMechanism" = mkOverride 1002 null;
        "targetLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecAttachMetadata" = {
      options = {
        "node" = mkOption {
          description = "When set to true, Prometheus attaches node metadata to the discovered\ntargets.\n\nThe Prometheus service account must have the `list` and `watch`\npermissions on the `Nodes` objects.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "node" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecNamespaceSelector" = {
      options = {
        "any" = mkOption {
          description = "Boolean describing whether all namespaces are selected in contrast to a\nlist restricting them.";
          type = types.nullOr types.bool;
        };
        "matchNames" = mkOption {
          description = "List of namespace names to select from.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "any" = mkOverride 1002 null;
        "matchNames" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpoints" = {
      options = {
        "authorization" = mkOption {
          description = "`authorization` configures the Authorization header credentials to use when\nscraping the target.\n\nCannot be set at the same time as `basicAuth`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "`basicAuth` configures the Basic Authentication credentials to use when\nscraping the target.\n\nCannot be set at the same time as `authorization`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBasicAuth"
          );
        };
        "bearerTokenSecret" = mkOption {
          description = "`bearerTokenSecret` specifies a key of a Secret containing the bearer\ntoken for scraping targets. The secret needs to be in the same namespace\nas the PodMonitor object and readable by the Prometheus Operator.\n\nDeprecated: use `authorization` instead.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBearerTokenSecret"
          );
        };
        "enableHttp2" = mkOption {
          description = "`enableHttp2` can be used to disable HTTP2 when scraping the target.";
          type = types.nullOr types.bool;
        };
        "filterRunning" = mkOption {
          description = "When true, the pods which are not running (e.g. either in Failed or\nSucceeded state) are dropped during the target discovery.\n\nIf unset, the filtering is enabled.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "`followRedirects` defines whether the scrape requests should follow HTTP\n3xx redirects.";
          type = types.nullOr types.bool;
        };
        "honorLabels" = mkOption {
          description = "When true, `honorLabels` preserves the metric's labels when they collide\nwith the target's labels.";
          type = types.nullOr types.bool;
        };
        "honorTimestamps" = mkOption {
          description = "`honorTimestamps` controls whether Prometheus preserves the timestamps\nwhen exposed by the target.";
          type = types.nullOr types.bool;
        };
        "interval" = mkOption {
          description = "Interval at which Prometheus scrapes the metrics from the target.\n\nIf empty, Prometheus uses the global scrape interval.";
          type = types.nullOr types.str;
        };
        "metricRelabelings" = mkOption {
          description = "`metricRelabelings` configures the relabeling rules to apply to the\nsamples before ingestion.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsMetricRelabelings"
            )
          );
        };
        "oauth2" = mkOption {
          description = "`oauth2` configures the OAuth2 settings to use when scraping the target.\n\nIt requires Prometheus >= 2.27.0.\n\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2"
          );
        };
        "params" = mkOption {
          description = "`params` define optional HTTP URL parameters.";
          type = types.nullOr (types.loaOf types.str);
        };
        "path" = mkOption {
          description = "HTTP path from which to scrape for metrics.\n\nIf empty, Prometheus uses the default value (e.g. `/metrics`).";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "The `Pod` port name which exposes the endpoint.\n\nIt takes precedence over the `portNumber` and `targetPort` fields.";
          type = types.nullOr types.str;
        };
        "portNumber" = mkOption {
          description = "The `Pod` port number which exposes the endpoint.";
          type = types.nullOr types.int;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` configures the HTTP Proxy URL (e.g.\n\"http://proxyserver:2195\") to go through when scraping the target.";
          type = types.nullOr types.str;
        };
        "relabelings" = mkOption {
          description = "`relabelings` configures the relabeling rules to apply the target's\nmetadata labels.\n\nThe Operator automatically adds relabelings for a few standard Kubernetes fields.\n\nThe original scrape job's name is available via the `__tmp_prometheus_job_name` label.\n\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsRelabelings")
          );
        };
        "scheme" = mkOption {
          description = "HTTP scheme to use for scraping.\n\n`http` and `https` are the expected values unless you rewrite the\n`__scheme__` label via relabeling.\n\nIf empty, Prometheus uses the default value `http`.";
          type = types.nullOr types.str;
        };
        "scrapeTimeout" = mkOption {
          description = "Timeout after which Prometheus considers the scrape to be failed.\n\nIf empty, Prometheus uses the global scrape timeout unless it is less\nthan the target's scrape interval value in which the latter is used.\nThe value cannot be greater than the scrape interval otherwise the operator will reject the resource.";
          type = types.nullOr types.str;
        };
        "targetPort" = mkOption {
          description = "Name or number of the target port of the `Pod` object behind the Service, the\nport must be specified with container port property.\n\nDeprecated: use 'port' or 'portNumber' instead.";
          type = types.nullOr (types.either types.int types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when scraping the target.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfig"
          );
        };
        "trackTimestampsStaleness" = mkOption {
          description = "`trackTimestampsStaleness` defines whether Prometheus tracks staleness of\nthe metrics that have an explicit timestamp present in scraped data.\nHas no effect if `honorTimestamps` is false.\n\nIt requires Prometheus >= v2.48.0.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerTokenSecret" = mkOverride 1002 null;
        "enableHttp2" = mkOverride 1002 null;
        "filterRunning" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "honorLabels" = mkOverride 1002 null;
        "honorTimestamps" = mkOverride 1002 null;
        "interval" = mkOverride 1002 null;
        "metricRelabelings" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "params" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "portNumber" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "relabelings" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
        "scrapeTimeout" = mkOverride 1002 null;
        "targetPort" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "trackTimestampsStaleness" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsBearerTokenSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsMetricRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecPodMetricsEndpointsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PodMonitorSpecSelectorMatchExpressions")
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PodMonitorSpecSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.Probe" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of desired Ingress selection for target discovery by Prometheus.";
          type = submoduleOf "monitoring.coreos.com.v1.ProbeSpec";
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpec" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization section for this endpoint";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecAuthorization");
        };
        "basicAuth" = mkOption {
          description = "BasicAuth allow an endpoint to authenticate over basic authentication.\nMore info: https://prometheus.io/docs/operating/configuration/#endpoint";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecBasicAuth");
        };
        "bearerTokenSecret" = mkOption {
          description = "Secret to mount to read bearer token for scraping targets. The secret\nneeds to be in the same namespace as the probe and accessible by\nthe Prometheus Operator.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecBearerTokenSecret");
        };
        "convertClassicHistogramsToNHCB" = mkOption {
          description = "Whether to convert all scraped classic histograms into a native histogram with custom buckets.\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.bool;
        };
        "fallbackScrapeProtocol" = mkOption {
          description = "The protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
        "interval" = mkOption {
          description = "Interval at which targets are probed using the configured prober.\nIf not specified Prometheus' global scrape interval is used.";
          type = types.nullOr types.str;
        };
        "jobName" = mkOption {
          description = "The job name assigned to scraped metrics by default.";
          type = types.nullOr types.str;
        };
        "keepDroppedTargets" = mkOption {
          description = "Per-scrape limit on the number of targets dropped by relabeling\nthat will be kept in memory. 0 means no limit.\n\nIt requires Prometheus >= v2.47.0.";
          type = types.nullOr types.int;
        };
        "labelLimit" = mkOption {
          description = "Per-scrape limit on number of labels that will be accepted for a sample.\nOnly valid in Prometheus versions 2.27.0 and newer.";
          type = types.nullOr types.int;
        };
        "labelNameLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels name that will be accepted for a sample.\nOnly valid in Prometheus versions 2.27.0 and newer.";
          type = types.nullOr types.int;
        };
        "labelValueLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels value that will be accepted for a sample.\nOnly valid in Prometheus versions 2.27.0 and newer.";
          type = types.nullOr types.int;
        };
        "metricRelabelings" = mkOption {
          description = "MetricRelabelConfigs to apply to samples before ingestion.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ProbeSpecMetricRelabelings")
          );
        };
        "module" = mkOption {
          description = "The module to use for probing specifying how to probe the target.\nExample module configuring in the blackbox exporter:\nhttps://github.com/prometheus/blackbox_exporter/blob/master/example.yml";
          type = types.nullOr types.str;
        };
        "nativeHistogramBucketLimit" = mkOption {
          description = "If there are more than this many buckets in a native histogram,\nbuckets will be merged to stay within the limit.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.int;
        };
        "nativeHistogramMinBucketFactor" = mkOption {
          description = "If the growth factor of one bucket to the next is smaller than this,\nbuckets will be merged to increase the factor sufficiently.\nIt requires Prometheus >= v2.50.0.";
          type = types.nullOr (types.either types.int types.str);
        };
        "oauth2" = mkOption {
          description = "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2");
        };
        "prober" = mkOption {
          description = "Specification for the prober to use for probing targets.\nThe prober.URL parameter is required. Targets cannot be probed if left empty.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecProber");
        };
        "sampleLimit" = mkOption {
          description = "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.";
          type = types.nullOr types.int;
        };
        "scrapeClass" = mkOption {
          description = "The scrape class to apply.";
          type = types.nullOr types.str;
        };
        "scrapeClassicHistograms" = mkOption {
          description = "Whether to scrape a classic histogram that is also exposed as a native histogram.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.bool;
        };
        "scrapeProtocols" = mkOption {
          description = "`scrapeProtocols` defines the protocols to negotiate during a scrape. It tells clients the\nprotocols supported by Prometheus in order of preference (from most to least preferred).\n\nIf unset, Prometheus uses its default value.\n\nIt requires Prometheus >= v2.49.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "scrapeTimeout" = mkOption {
          description = "Timeout for scraping metrics from the Prometheus exporter.\nIf not specified, the Prometheus global scrape timeout is used.\nThe value cannot be greater than the scrape interval otherwise the operator will reject the resource.";
          type = types.nullOr types.str;
        };
        "targetLimit" = mkOption {
          description = "TargetLimit defines a limit on the number of scraped targets that will be accepted.";
          type = types.nullOr types.int;
        };
        "targets" = mkOption {
          description = "Targets defines a set of static or dynamically discovered targets to probe.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargets");
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when scraping the endpoint.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfig");
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerTokenSecret" = mkOverride 1002 null;
        "convertClassicHistogramsToNHCB" = mkOverride 1002 null;
        "fallbackScrapeProtocol" = mkOverride 1002 null;
        "interval" = mkOverride 1002 null;
        "jobName" = mkOverride 1002 null;
        "keepDroppedTargets" = mkOverride 1002 null;
        "labelLimit" = mkOverride 1002 null;
        "labelNameLengthLimit" = mkOverride 1002 null;
        "labelValueLengthLimit" = mkOverride 1002 null;
        "metricRelabelings" = mkOverride 1002 null;
        "module" = mkOverride 1002 null;
        "nativeHistogramBucketLimit" = mkOverride 1002 null;
        "nativeHistogramMinBucketFactor" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "prober" = mkOverride 1002 null;
        "sampleLimit" = mkOverride 1002 null;
        "scrapeClass" = mkOverride 1002 null;
        "scrapeClassicHistograms" = mkOverride 1002 null;
        "scrapeProtocols" = mkOverride 1002 null;
        "scrapeTimeout" = mkOverride 1002 null;
        "targetLimit" = mkOverride 1002 null;
        "targets" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecAuthorizationCredentials");
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecBasicAuthPassword");
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecBasicAuthUsername");
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecBearerTokenSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecMetricRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfig");
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2ClientIdConfigMap");
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2ClientIdSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCa");
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCert");
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigKeySecret");
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCaConfigMap");
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCaSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCertConfigMap");
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCertSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecProber" = {
      options = {
        "path" = mkOption {
          description = "Path to collect metrics from.\nDefaults to `/probe`.";
          type = types.nullOr types.str;
        };
        "proxyUrl" = mkOption {
          description = "Optional ProxyURL.";
          type = types.nullOr types.str;
        };
        "scheme" = mkOption {
          description = "HTTP scheme to use for scraping.\n`http` and `https` are the expected values unless you rewrite the `__scheme__` label via relabeling.\nIf empty, Prometheus uses the default value `http`.";
          type = types.nullOr types.str;
        };
        "url" = mkOption {
          description = "Mandatory URL of the prober.";
          type = types.str;
        };
      };

      config = {
        "path" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargets" = {
      options = {
        "ingress" = mkOption {
          description = "ingress defines the Ingress objects to probe and the relabeling\nconfiguration.\nIf `staticConfig` is also defined, `staticConfig` takes precedence.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargetsIngress");
        };
        "staticConfig" = mkOption {
          description = "staticConfig defines the static list of targets to probe and the\nrelabeling configuration.\nIf `ingress` is also defined, `staticConfig` takes precedence.\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargetsStaticConfig");
        };
      };

      config = {
        "ingress" = mkOverride 1002 null;
        "staticConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargetsIngress" = {
      options = {
        "namespaceSelector" = mkOption {
          description = "From which namespaces to select Ingress objects.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargetsIngressNamespaceSelector"
          );
        };
        "relabelingConfigs" = mkOption {
          description = "RelabelConfigs to apply to the label set of the target before it gets\nscraped.\nThe original ingress address is available via the\n`__tmp_prometheus_ingress_address` label. It can be used to customize the\nprobed URL.\nThe original scrape job's name is available via the `__tmp_prometheus_job_name` label.\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargetsIngressRelabelingConfigs")
          );
        };
        "selector" = mkOption {
          description = "Selector to select the Ingress objects.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargetsIngressSelector");
        };
      };

      config = {
        "namespaceSelector" = mkOverride 1002 null;
        "relabelingConfigs" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargetsIngressNamespaceSelector" = {
      options = {
        "any" = mkOption {
          description = "Boolean describing whether all namespaces are selected in contrast to a\nlist restricting them.";
          type = types.nullOr types.bool;
        };
        "matchNames" = mkOption {
          description = "List of namespace names to select from.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "any" = mkOverride 1002 null;
        "matchNames" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargetsIngressRelabelingConfigs" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargetsIngressSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargetsIngressSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargetsIngressSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargetsStaticConfig" = {
      options = {
        "labels" = mkOption {
          description = "Labels assigned to all metrics scraped from the targets.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "relabelingConfigs" = mkOption {
          description = "RelabelConfigs to apply to the label set of the targets before it gets\nscraped.\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTargetsStaticConfigRelabelingConfigs")
          );
        };
        "static" = mkOption {
          description = "The list of hosts to probe.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "labels" = mkOverride 1002 null;
        "relabelingConfigs" = mkOverride 1002 null;
        "static" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTargetsStaticConfigRelabelingConfigs" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfigCa");
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfigCert");
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfigKeySecret");
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfigCaConfigMap");
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfigCaSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfigCertConfigMap");
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ProbeSpecTlsConfigCertSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ProbeSpecTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.Prometheus" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of the desired behavior of the Prometheus cluster. More info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpec";
        };
        "status" = mkOption {
          description = "Most recent observed status of the Prometheus cluster. Read-only.\nMore info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusStatus");
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusRule" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of desired alerting rule definitions for Prometheus.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusRuleSpec";
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusRuleSpec" = {
      options = {
        "groups" = mkOption {
          description = "Content of Prometheus rule file";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusRuleSpecGroups" "name" [
              "name"
            ]
          );
          apply = attrsToList;
        };
      };

      config = {
        "groups" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusRuleSpecGroups" = {
      options = {
        "interval" = mkOption {
          description = "Interval determines how often rules in the group are evaluated.";
          type = types.nullOr types.str;
        };
        "labels" = mkOption {
          description = "Labels to add or overwrite before storing the result for its rules.\nThe labels defined at the rule level take precedence.\n\nIt requires Prometheus >= 3.0.0.\nThe field is ignored for Thanos Ruler.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "limit" = mkOption {
          description = "Limit the number of alerts an alerting rule and series a recording\nrule can produce.\nLimit is supported starting with Prometheus >= 2.31 and Thanos Ruler >= 0.24.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "Name of the rule group.";
          type = types.str;
        };
        "partial_response_strategy" = mkOption {
          description = "PartialResponseStrategy is only used by ThanosRuler and will\nbe ignored by Prometheus instances.\nMore info: https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md#partial-response";
          type = types.nullOr types.str;
        };
        "query_offset" = mkOption {
          description = "Defines the offset the rule evaluation timestamp of this particular group by the specified duration into the past.\n\nIt requires Prometheus >= v2.53.0.\nIt is not supported for ThanosRuler.";
          type = types.nullOr types.str;
        };
        "rules" = mkOption {
          description = "List of alerting and recording rules.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusRuleSpecGroupsRules")
          );
        };
      };

      config = {
        "interval" = mkOverride 1002 null;
        "labels" = mkOverride 1002 null;
        "limit" = mkOverride 1002 null;
        "partial_response_strategy" = mkOverride 1002 null;
        "query_offset" = mkOverride 1002 null;
        "rules" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusRuleSpecGroupsRules" = {
      options = {
        "alert" = mkOption {
          description = "Name of the alert. Must be a valid label value.\nOnly one of `record` and `alert` must be set.";
          type = types.nullOr types.str;
        };
        "annotations" = mkOption {
          description = "Annotations to add to each alert.\nOnly valid for alerting rules.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "expr" = mkOption {
          description = "PromQL expression to evaluate.";
          type = types.either types.int types.str;
        };
        "for" = mkOption {
          description = "Alerts are considered firing once they have been returned for this long.";
          type = types.nullOr types.str;
        };
        "keep_firing_for" = mkOption {
          description = "KeepFiringFor defines how long an alert will continue firing after the condition that triggered it has cleared.";
          type = types.nullOr types.str;
        };
        "labels" = mkOption {
          description = "Labels to add or overwrite.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "record" = mkOption {
          description = "Name of the time series to output to. Must be a valid metric name.\nOnly one of `record` and `alert` must be set.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "alert" = mkOverride 1002 null;
        "annotations" = mkOverride 1002 null;
        "for" = mkOverride 1002 null;
        "keep_firing_for" = mkOverride 1002 null;
        "labels" = mkOverride 1002 null;
        "record" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpec" = {
      options = {
        "additionalAlertManagerConfigs" = mkOption {
          description = "AdditionalAlertManagerConfigs specifies a key of a Secret containing\nadditional Prometheus Alertmanager configurations. The Alertmanager\nconfigurations are appended to the configuration generated by the\nPrometheus Operator. They must be formatted according to the official\nPrometheus documentation:\n\nhttps://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config\n\nThe user is responsible for making sure that the configurations are valid\n\nNote that using this feature may expose the possibility to break\nupgrades of Prometheus. It is advised to review Prometheus release notes\nto ensure that no incompatible AlertManager configs are going to break\nPrometheus after the upgrade.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAdditionalAlertManagerConfigs"
          );
        };
        "additionalAlertRelabelConfigs" = mkOption {
          description = "AdditionalAlertRelabelConfigs specifies a key of a Secret containing\nadditional Prometheus alert relabel configurations. The alert relabel\nconfigurations are appended to the configuration generated by the\nPrometheus Operator. They must be formatted according to the official\nPrometheus documentation:\n\nhttps://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs\n\nThe user is responsible for making sure that the configurations are valid\n\nNote that using this feature may expose the possibility to break\nupgrades of Prometheus. It is advised to review Prometheus release notes\nto ensure that no incompatible alert relabel configs are going to break\nPrometheus after the upgrade.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAdditionalAlertRelabelConfigs"
          );
        };
        "additionalArgs" = mkOption {
          description = "AdditionalArgs allows setting additional arguments for the 'prometheus' container.\n\nIt is intended for e.g. activating hidden flags which are not supported by\nthe dedicated configuration options yet. The arguments are passed as-is to the\nPrometheus container which may cause issues if they are invalid or not supported\nby the given Prometheus version.\n\nIn case of an argument conflict (e.g. an argument which is already set by the\noperator itself) or when providing an invalid argument, the reconciliation will\nfail and an error will be logged.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecAdditionalArgs" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "additionalScrapeConfigs" = mkOption {
          description = "AdditionalScrapeConfigs allows specifying a key of a Secret containing\nadditional Prometheus scrape configurations. Scrape configurations\nspecified are appended to the configurations generated by the Prometheus\nOperator. Job configurations specified must have the form as specified\nin the official Prometheus documentation:\nhttps://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.\nAs scrape configs are appended, the user is responsible to make sure it\nis valid. Note that using this feature may expose the possibility to\nbreak upgrades of Prometheus. It is advised to review Prometheus release\nnotes to ensure that no incompatible scrape configs are going to break\nPrometheus after the upgrade.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAdditionalScrapeConfigs");
        };
        "affinity" = mkOption {
          description = "Defines the Pods' affinity scheduling rules if specified.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinity");
        };
        "alerting" = mkOption {
          description = "Defines the settings related to Alertmanager.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlerting");
        };
        "allowOverlappingBlocks" = mkOption {
          description = "AllowOverlappingBlocks enables vertical compaction and vertical query\nmerge in Prometheus.\n\nDeprecated: this flag has no effect for Prometheus >= 2.39.0 where overlapping blocks are enabled by default.";
          type = types.nullOr types.bool;
        };
        "apiserverConfig" = mkOption {
          description = "APIServerConfig allows specifying a host and auth methods to access the\nKuberntees API server.\nIf null, Prometheus is assumed to run inside of the cluster: it will\ndiscover the API servers automatically and use the Pod's CA certificate\nand bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfig");
        };
        "arbitraryFSAccessThroughSMs" = mkOption {
          description = "When true, ServiceMonitor, PodMonitor and Probe object are forbidden to\nreference arbitrary files on the file system of the 'prometheus'\ncontainer.\nWhen a ServiceMonitor's endpoint specifies a `bearerTokenFile` value\n(e.g.  '/var/run/secrets/kubernetes.io/serviceaccount/token'), a\nmalicious target can get access to the Prometheus service account's\ntoken in the Prometheus' scrape request. Setting\n`spec.arbitraryFSAccessThroughSM` to 'true' would prevent the attack.\nUsers should instead provide the credentials using the\n`spec.bearerTokenSecret` field.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecArbitraryFSAccessThroughSMs"
          );
        };
        "automountServiceAccountToken" = mkOption {
          description = "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in the pod.\nIf the field isn't set, the operator mounts the service account token by default.\n\n**Warning:** be aware that by default, Prometheus requires the service account token for Kubernetes service discovery.\nIt is possible to use strategic merge patch to project the service account token into the 'prometheus' container.";
          type = types.nullOr types.bool;
        };
        "baseImage" = mkOption {
          description = "Deprecated: use 'spec.image' instead.";
          type = types.nullOr types.str;
        };
        "bodySizeLimit" = mkOption {
          description = "BodySizeLimit defines per-scrape on response body size.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedBodySizeLimit.";
          type = types.nullOr types.str;
        };
        "configMaps" = mkOption {
          description = "ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus\nobject, which shall be mounted into the Prometheus Pods.\nEach ConfigMap is added to the StatefulSet definition as a volume named `configmap-<configmap-name>`.\nThe ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name> in the 'prometheus' container.";
          type = types.nullOr (types.listOf types.str);
        };
        "containers" = mkOption {
          description = "Containers allows injecting additional containers or modifying operator\ngenerated containers. This can be used to allow adding an authentication\nproxy to the Pods or to change the behavior of an operator generated\ncontainer. Containers described here modify an operator generated\ncontainer if they share the same name and modifications are done via a\nstrategic merge patch.\n\nThe names of containers managed by the operator are:\n* `prometheus`\n* `config-reloader`\n* `thanos-sidecar`\n\nOverriding containers is entirely outside the scope of what the\nmaintainers will support and by doing so, you accept that this behaviour\nmay break at any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecContainers" "name" [ ]
          );
          apply = attrsToList;
        };
        "convertClassicHistogramsToNHCB" = mkOption {
          description = "Whether to convert all scraped classic histograms into a native\nhistogram with custom buckets.\n\nIt requires Prometheus >= v3.4.0.";
          type = types.nullOr types.bool;
        };
        "disableCompaction" = mkOption {
          description = "When true, the Prometheus compaction is disabled.\nWhen `spec.thanos.objectStorageConfig` or `spec.objectStorageConfigFile` are defined, the operator automatically\ndisables block compaction to avoid race conditions during block uploads (as the Thanos documentation recommends).";
          type = types.nullOr types.bool;
        };
        "dnsConfig" = mkOption {
          description = "Defines the DNS configuration for the pods.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecDnsConfig");
        };
        "dnsPolicy" = mkOption {
          description = "Defines the DNS policy for the pods.";
          type = types.nullOr types.str;
        };
        "enableAdminAPI" = mkOption {
          description = "Enables access to the Prometheus web admin API.\n\nWARNING: Enabling the admin APIs enables mutating endpoints, to delete data,\nshutdown Prometheus, and more. Enabling this should be done with care and the\nuser is advised to add additional authentication authorization via a proxy to\nensure only clients authorized to perform these actions can do so.\n\nFor more information:\nhttps://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis";
          type = types.nullOr types.bool;
        };
        "enableFeatures" = mkOption {
          description = "Enable access to Prometheus feature flags. By default, no features are enabled.\n\nEnabling features which are disabled by default is entirely outside the\nscope of what the maintainers will support and by doing so, you accept\nthat this behaviour may break at any time without notice.\n\nFor more information see https://prometheus.io/docs/prometheus/latest/feature_flags/";
          type = types.nullOr (types.listOf types.str);
        };
        "enableOTLPReceiver" = mkOption {
          description = "Enable Prometheus to be used as a receiver for the OTLP Metrics protocol.\n\nNote that the OTLP receiver endpoint is automatically enabled if `.spec.otlpConfig` is defined.\n\nIt requires Prometheus >= v2.47.0.";
          type = types.nullOr types.bool;
        };
        "enableRemoteWriteReceiver" = mkOption {
          description = "Enable Prometheus to be used as a receiver for the Prometheus remote\nwrite protocol.\n\nWARNING: This is not considered an efficient way of ingesting samples.\nUse it with caution for specific low-volume use cases.\nIt is not suitable for replacing the ingestion via scraping and turning\nPrometheus into a push-based metrics collection system.\nFor more information see https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver\n\nIt requires Prometheus >= v2.33.0.";
          type = types.nullOr types.bool;
        };
        "enableServiceLinks" = mkOption {
          description = "Indicates whether information about services should be injected into pod's environment variables";
          type = types.nullOr types.bool;
        };
        "enforcedBodySizeLimit" = mkOption {
          description = "When defined, enforcedBodySizeLimit specifies a global limit on the size\nof uncompressed response body that will be accepted by Prometheus.\nTargets responding with a body larger than this many bytes will cause\nthe scrape to fail.\n\nIt requires Prometheus >= v2.28.0.\n\nWhen both `enforcedBodySizeLimit` and `bodySizeLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined bodySizeLimit value will inherit the global bodySizeLimit value (Prometheus >= 2.45.0) or the enforcedBodySizeLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedBodySizeLimit` is greater than the `bodySizeLimit`, the `bodySizeLimit` will be set to `enforcedBodySizeLimit`.\n* Scrape objects with a bodySizeLimit value less than or equal to enforcedBodySizeLimit keep their specific value.\n* Scrape objects with a bodySizeLimit value greater than enforcedBodySizeLimit are set to enforcedBodySizeLimit.";
          type = types.nullOr types.str;
        };
        "enforcedKeepDroppedTargets" = mkOption {
          description = "When defined, enforcedKeepDroppedTargets specifies a global limit on the number of targets\ndropped by relabeling that will be kept in memory. The value overrides\nany `spec.keepDroppedTargets` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.keepDroppedTargets` is\ngreater than zero and less than `spec.enforcedKeepDroppedTargets`.\n\nIt requires Prometheus >= v2.47.0.\n\nWhen both `enforcedKeepDroppedTargets` and `keepDroppedTargets` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined keepDroppedTargets value will inherit the global keepDroppedTargets value (Prometheus >= 2.45.0) or the enforcedKeepDroppedTargets value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedKeepDroppedTargets` is greater than the `keepDroppedTargets`, the `keepDroppedTargets` will be set to `enforcedKeepDroppedTargets`.\n* Scrape objects with a keepDroppedTargets value less than or equal to enforcedKeepDroppedTargets keep their specific value.\n* Scrape objects with a keepDroppedTargets value greater than enforcedKeepDroppedTargets are set to enforcedKeepDroppedTargets.";
          type = types.nullOr types.int;
        };
        "enforcedLabelLimit" = mkOption {
          description = "When defined, enforcedLabelLimit specifies a global limit on the number\nof labels per sample. The value overrides any `spec.labelLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.labelLimit` is\ngreater than zero and less than `spec.enforcedLabelLimit`.\n\nIt requires Prometheus >= v2.27.0.\n\nWhen both `enforcedLabelLimit` and `labelLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined labelLimit value will inherit the global labelLimit value (Prometheus >= 2.45.0) or the enforcedLabelLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedLabelLimit` is greater than the `labelLimit`, the `labelLimit` will be set to `enforcedLabelLimit`.\n* Scrape objects with a labelLimit value less than or equal to enforcedLabelLimit keep their specific value.\n* Scrape objects with a labelLimit value greater than enforcedLabelLimit are set to enforcedLabelLimit.";
          type = types.nullOr types.int;
        };
        "enforcedLabelNameLengthLimit" = mkOption {
          description = "When defined, enforcedLabelNameLengthLimit specifies a global limit on the length\nof labels name per sample. The value overrides any `spec.labelNameLengthLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.labelNameLengthLimit` is\ngreater than zero and less than `spec.enforcedLabelNameLengthLimit`.\n\nIt requires Prometheus >= v2.27.0.\n\nWhen both `enforcedLabelNameLengthLimit` and `labelNameLengthLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined labelNameLengthLimit value will inherit the global labelNameLengthLimit value (Prometheus >= 2.45.0) or the enforcedLabelNameLengthLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedLabelNameLengthLimit` is greater than the `labelNameLengthLimit`, the `labelNameLengthLimit` will be set to `enforcedLabelNameLengthLimit`.\n* Scrape objects with a labelNameLengthLimit value less than or equal to enforcedLabelNameLengthLimit keep their specific value.\n* Scrape objects with a labelNameLengthLimit value greater than enforcedLabelNameLengthLimit are set to enforcedLabelNameLengthLimit.";
          type = types.nullOr types.int;
        };
        "enforcedLabelValueLengthLimit" = mkOption {
          description = "When not null, enforcedLabelValueLengthLimit defines a global limit on the length\nof labels value per sample. The value overrides any `spec.labelValueLengthLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.labelValueLengthLimit` is\ngreater than zero and less than `spec.enforcedLabelValueLengthLimit`.\n\nIt requires Prometheus >= v2.27.0.\n\nWhen both `enforcedLabelValueLengthLimit` and `labelValueLengthLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined labelValueLengthLimit value will inherit the global labelValueLengthLimit value (Prometheus >= 2.45.0) or the enforcedLabelValueLengthLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedLabelValueLengthLimit` is greater than the `labelValueLengthLimit`, the `labelValueLengthLimit` will be set to `enforcedLabelValueLengthLimit`.\n* Scrape objects with a labelValueLengthLimit value less than or equal to enforcedLabelValueLengthLimit keep their specific value.\n* Scrape objects with a labelValueLengthLimit value greater than enforcedLabelValueLengthLimit are set to enforcedLabelValueLengthLimit.";
          type = types.nullOr types.int;
        };
        "enforcedNamespaceLabel" = mkOption {
          description = "When not empty, a label will be added to:\n\n1. All metrics scraped from `ServiceMonitor`, `PodMonitor`, `Probe` and `ScrapeConfig` objects.\n2. All metrics generated from recording rules defined in `PrometheusRule` objects.\n3. All alerts generated from alerting rules defined in `PrometheusRule` objects.\n4. All vector selectors of PromQL expressions defined in `PrometheusRule` objects.\n\nThe label will not added for objects referenced in `spec.excludedFromEnforcement`.\n\nThe label's name is this field's value.\nThe label's value is the namespace of the `ServiceMonitor`,\n`PodMonitor`, `Probe`, `PrometheusRule` or `ScrapeConfig` object.";
          type = types.nullOr types.str;
        };
        "enforcedSampleLimit" = mkOption {
          description = "When defined, enforcedSampleLimit specifies a global limit on the number\nof scraped samples that will be accepted. This overrides any\n`spec.sampleLimit` set by ServiceMonitor, PodMonitor, Probe objects\nunless `spec.sampleLimit` is greater than zero and less than\n`spec.enforcedSampleLimit`.\n\nIt is meant to be used by admins to keep the overall number of\nsamples/series under a desired limit.\n\nWhen both `enforcedSampleLimit` and `sampleLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined sampleLimit value will inherit the global sampleLimit value (Prometheus >= 2.45.0) or the enforcedSampleLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedSampleLimit` is greater than the `sampleLimit`, the `sampleLimit` will be set to `enforcedSampleLimit`.\n* Scrape objects with a sampleLimit value less than or equal to enforcedSampleLimit keep their specific value.\n* Scrape objects with a sampleLimit value greater than enforcedSampleLimit are set to enforcedSampleLimit.";
          type = types.nullOr types.int;
        };
        "enforcedTargetLimit" = mkOption {
          description = "When defined, enforcedTargetLimit specifies a global limit on the number\nof scraped targets. The value overrides any `spec.targetLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.targetLimit` is\ngreater than zero and less than `spec.enforcedTargetLimit`.\n\nIt is meant to be used by admins to to keep the overall number of\ntargets under a desired limit.\n\nWhen both `enforcedTargetLimit` and `targetLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined targetLimit value will inherit the global targetLimit value (Prometheus >= 2.45.0) or the enforcedTargetLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedTargetLimit` is greater than the `targetLimit`, the `targetLimit` will be set to `enforcedTargetLimit`.\n* Scrape objects with a targetLimit value less than or equal to enforcedTargetLimit keep their specific value.\n* Scrape objects with a targetLimit value greater than enforcedTargetLimit are set to enforcedTargetLimit.";
          type = types.nullOr types.int;
        };
        "evaluationInterval" = mkOption {
          description = "Interval between rule evaluations.\nDefault: \"30s\"";
          type = types.nullOr types.str;
        };
        "excludedFromEnforcement" = mkOption {
          description = "List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule objects\nto be excluded from enforcing a namespace label of origin.\n\nIt is only applicable if `spec.enforcedNamespaceLabel` set to true.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecExcludedFromEnforcement"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "exemplars" = mkOption {
          description = "Exemplars related settings that are runtime reloadable.\nIt requires to enable the `exemplar-storage` feature flag to be effective.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecExemplars");
        };
        "externalLabels" = mkOption {
          description = "The labels to add to any time series or alerts when communicating with\nexternal systems (federation, remote storage, Alertmanager).\nLabels defined by `spec.replicaExternalLabelName` and\n`spec.prometheusExternalLabelName` take precedence over this list.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "externalUrl" = mkOption {
          description = "The external URL under which the Prometheus service is externally\navailable. This is necessary to generate correct URLs (for instance if\nPrometheus is accessible behind an Ingress resource).";
          type = types.nullOr types.str;
        };
        "hostAliases" = mkOption {
          description = "Optional list of hosts and IPs that will be injected into the Pod's\nhosts file if specified.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecHostAliases")
          );
        };
        "hostNetwork" = mkOption {
          description = "Use the host's network namespace if true.\n\nMake sure to understand the security implications if you want to enable\nit (https://kubernetes.io/docs/concepts/configuration/overview/).\n\nWhen hostNetwork is enabled, this will set the DNS policy to\n`ClusterFirstWithHostNet` automatically (unless `.spec.DNSPolicy` is set\nto a different value).";
          type = types.nullOr types.bool;
        };
        "ignoreNamespaceSelectors" = mkOption {
          description = "When true, `spec.namespaceSelector` from all PodMonitor, ServiceMonitor\nand Probe objects will be ignored. They will only discover targets\nwithin the namespace of the PodMonitor, ServiceMonitor and Probe\nobject.";
          type = types.nullOr types.bool;
        };
        "image" = mkOption {
          description = "Container image name for Prometheus. If specified, it takes precedence\nover the `spec.baseImage`, `spec.tag` and `spec.sha` fields.\n\nSpecifying `spec.version` is still necessary to ensure the Prometheus\nOperator knows which version of Prometheus is being configured.\n\nIf neither `spec.image` nor `spec.baseImage` are defined, the operator\nwill use the latest upstream version of Prometheus available at the time\nwhen the operator was released.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy for the 'prometheus', 'init-config-reloader' and 'config-reloader' containers.\nSee https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.";
          type = types.nullOr types.str;
        };
        "imagePullSecrets" = mkOption {
          description = "An optional list of references to Secrets in the same namespace\nto use for pulling images from registries.\nSee http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecImagePullSecrets" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "initContainers" = mkOption {
          description = "InitContainers allows injecting initContainers to the Pod definition. Those\ncan be used to e.g.  fetch secrets for injection into the Prometheus\nconfiguration from external sources. Any errors during the execution of\nan initContainer will lead to a restart of the Pod. More info:\nhttps://kubernetes.io/docs/concepts/workloads/pods/init-containers/\nInitContainers described here modify an operator generated init\ncontainers if they share the same name and modifications are done via a\nstrategic merge patch.\n\nThe names of init container name managed by the operator are:\n* `init-config-reloader`.\n\nOverriding init containers is entirely outside the scope of what the\nmaintainers will support and by doing so, you accept that this behaviour\nmay break at any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecInitContainers" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "keepDroppedTargets" = mkOption {
          description = "Per-scrape limit on the number of targets dropped by relabeling\nthat will be kept in memory. 0 means no limit.\n\nIt requires Prometheus >= v2.47.0.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedKeepDroppedTargets.";
          type = types.nullOr types.int;
        };
        "labelLimit" = mkOption {
          description = "Per-scrape limit on number of labels that will be accepted for a sample.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelLimit.";
          type = types.nullOr types.int;
        };
        "labelNameLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels name that will be accepted for a sample.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelNameLengthLimit.";
          type = types.nullOr types.int;
        };
        "labelValueLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels value that will be accepted for a sample.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelValueLengthLimit.";
          type = types.nullOr types.int;
        };
        "listenLocal" = mkOption {
          description = "When true, the Prometheus server listens on the loopback address\ninstead of the Pod IP's address.";
          type = types.nullOr types.bool;
        };
        "logFormat" = mkOption {
          description = "Log format for Log level for Prometheus and the config-reloader sidecar.";
          type = types.nullOr types.str;
        };
        "logLevel" = mkOption {
          description = "Log level for Prometheus and the config-reloader sidecar.";
          type = types.nullOr types.str;
        };
        "maximumStartupDurationSeconds" = mkOption {
          description = "Defines the maximum time that the `prometheus` container's startup probe will wait before being considered failed. The startup probe will return success after the WAL replay is complete.\nIf set, the value should be greater than 60 (seconds). Otherwise it will be equal to 600 seconds (15 minutes).";
          type = types.nullOr types.int;
        };
        "minReadySeconds" = mkOption {
          description = "Minimum number of seconds for which a newly created Pod should be ready\nwithout any of its container crashing for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n\nThis is an alpha field from kubernetes 1.22 until 1.24 which requires\nenabling the StatefulSetMinReadySeconds feature gate.";
          type = types.nullOr types.int;
        };
        "nameEscapingScheme" = mkOption {
          description = "Specifies the character escaping scheme that will be requested when scraping\nfor metric and label names that do not conform to the legacy Prometheus\ncharacter set.\n\nIt requires Prometheus >= v3.4.0.";
          type = types.nullOr types.str;
        };
        "nameValidationScheme" = mkOption {
          description = "Specifies the validation scheme for metric and label names.\n\nIt requires Prometheus >= v2.55.0.";
          type = types.nullOr types.str;
        };
        "nodeSelector" = mkOption {
          description = "Defines on which Nodes the Pods are scheduled.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "otlp" = mkOption {
          description = "Settings related to the OTLP receiver feature.\nIt requires Prometheus >= v2.55.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecOtlp");
        };
        "overrideHonorLabels" = mkOption {
          description = "When true, Prometheus resolves label conflicts by renaming the labels in the scraped data\n to u201cexported_u201d for all targets created from ServiceMonitor, PodMonitor and\nScrapeConfig objects. Otherwise the HonorLabels field of the service or pod monitor applies.\nIn practice,`overrideHonorLaels:true` enforces `honorLabels:false`\nfor all ServiceMonitor, PodMonitor and ScrapeConfig objects.";
          type = types.nullOr types.bool;
        };
        "overrideHonorTimestamps" = mkOption {
          description = "When true, Prometheus ignores the timestamps for all the targets created\nfrom service and pod monitors.\nOtherwise the HonorTimestamps field of the service or pod monitor applies.";
          type = types.nullOr types.bool;
        };
        "paused" = mkOption {
          description = "When a Prometheus deployment is paused, no actions except for deletion\nwill be performed on the underlying objects.";
          type = types.nullOr types.bool;
        };
        "persistentVolumeClaimRetentionPolicy" = mkOption {
          description = "The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.\nThe default behavior is all PVCs are retained.\nThis is an alpha field from kubernetes 1.23 until 1.26 and a beta field from 1.26.\nIt requires enabling the StatefulSetAutoDeletePVC feature gate.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecPersistentVolumeClaimRetentionPolicy"
          );
        };
        "podMetadata" = mkOption {
          description = "PodMetadata configures labels and annotations which are propagated to the Prometheus pods.\n\nThe following items are reserved and cannot be overridden:\n* \"prometheus\" label, set to the name of the Prometheus object.\n* \"app.kubernetes.io/instance\" label, set to the name of the Prometheus object.\n* \"app.kubernetes.io/managed-by\" label, set to \"prometheus-operator\".\n* \"app.kubernetes.io/name\" label, set to \"prometheus\".\n* \"app.kubernetes.io/version\" label, set to the Prometheus version.\n* \"operator.prometheus.io/name\" label, set to the name of the Prometheus object.\n* \"operator.prometheus.io/shard\" label, set to the shard number of the Prometheus object.\n* \"kubectl.kubernetes.io/default-container\" annotation, set to \"prometheus\".";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecPodMetadata");
        };
        "podMonitorNamespaceSelector" = mkOption {
          description = "Namespaces to match for PodMonitors discovery. An empty label selector\nmatches all namespaces. A null label selector (default value) matches the current\nnamespace only.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecPodMonitorNamespaceSelector"
          );
        };
        "podMonitorSelector" = mkOption {
          description = "PodMonitors to be selected for target discovery. An empty label selector\nmatches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecPodMonitorSelector");
        };
        "podTargetLabels" = mkOption {
          description = "PodTargetLabels are appended to the `spec.podTargetLabels` field of all\nPodMonitor and ServiceMonitor objects.";
          type = types.nullOr (types.listOf types.str);
        };
        "portName" = mkOption {
          description = "Port name used for the pods and governing service.\nDefault: \"web\"";
          type = types.nullOr types.str;
        };
        "priorityClassName" = mkOption {
          description = "Priority class assigned to the Pods.";
          type = types.nullOr types.str;
        };
        "probeNamespaceSelector" = mkOption {
          description = "Namespaces to match for Probe discovery. An empty label\nselector matches all namespaces. A null label selector matches the\ncurrent namespace only.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecProbeNamespaceSelector");
        };
        "probeSelector" = mkOption {
          description = "Probes to be selected for target discovery. An empty label selector\nmatches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecProbeSelector");
        };
        "prometheusExternalLabelName" = mkOption {
          description = "Name of Prometheus external label used to denote the Prometheus instance\nname. The external label will _not_ be added when the field is set to\nthe empty string (`\"\"`).\n\nDefault: \"prometheus\"";
          type = types.nullOr types.str;
        };
        "prometheusRulesExcludedFromEnforce" = mkOption {
          description = "Defines the list of PrometheusRule objects to which the namespace label\nenforcement doesn't apply.\nThis is only relevant when `spec.enforcedNamespaceLabel` is set to true.\nDeprecated: use `spec.excludedFromEnforcement` instead.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecPrometheusRulesExcludedFromEnforce"
            )
          );
        };
        "query" = mkOption {
          description = "QuerySpec defines the configuration of the Promethus query service.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecQuery");
        };
        "queryLogFile" = mkOption {
          description = "queryLogFile specifies where the file to which PromQL queries are logged.\n\nIf the filename has an empty path, e.g. 'query.log', The Prometheus Pods\nwill mount the file into an emptyDir volume at `/var/log/prometheus`.\nIf a full path is provided, e.g. '/var/log/prometheus/query.log', you\nmust mount a volume in the specified directory and it must be writable.\nThis is because the prometheus container runs with a read-only root\nfilesystem for security reasons.\nAlternatively, the location can be set to a standard I/O stream, e.g.\n`/dev/stdout`, to log query information to the default Prometheus log\nstream.";
          type = types.nullOr types.str;
        };
        "reloadStrategy" = mkOption {
          description = "Defines the strategy used to reload the Prometheus configuration.\nIf not specified, the configuration is reloaded using the /-/reload HTTP endpoint.";
          type = types.nullOr types.str;
        };
        "remoteRead" = mkOption {
          description = "Defines the list of remote read configurations.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecRemoteRead" "name" [ ]
          );
          apply = attrsToList;
        };
        "remoteWrite" = mkOption {
          description = "Defines the list of remote write configurations.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecRemoteWrite" "name" [ ]
          );
          apply = attrsToList;
        };
        "remoteWriteReceiverMessageVersions" = mkOption {
          description = "List of the protobuf message versions to accept when receiving the\nremote writes.\n\nIt requires Prometheus >= v2.54.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "replicaExternalLabelName" = mkOption {
          description = "Name of Prometheus external label used to denote the replica name.\nThe external label will _not_ be added when the field is set to the\nempty string (`\"\"`).\n\nDefault: \"prometheus_replica\"";
          type = types.nullOr types.str;
        };
        "replicas" = mkOption {
          description = "Number of replicas of each shard to deploy for a Prometheus deployment.\n`spec.replicas` multiplied by `spec.shards` is the total number of Pods\ncreated.\n\nDefault: 1";
          type = types.nullOr types.int;
        };
        "resources" = mkOption {
          description = "Defines the resources requests and limits of the 'prometheus' container.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecResources");
        };
        "retention" = mkOption {
          description = "How long to retain the Prometheus data.\n\nDefault: \"24h\" if `spec.retention` and `spec.retentionSize` are empty.";
          type = types.nullOr types.str;
        };
        "retentionSize" = mkOption {
          description = "Maximum number of bytes used by the Prometheus data.";
          type = types.nullOr types.str;
        };
        "routePrefix" = mkOption {
          description = "The route prefix Prometheus registers HTTP handlers for.\n\nThis is useful when using `spec.externalURL`, and a proxy is rewriting\nHTTP routes of a request, and the actual ExternalURL is still true, but\nthe server serves requests under a different route prefix. For example\nfor use with `kubectl proxy`.";
          type = types.nullOr types.str;
        };
        "ruleNamespaceSelector" = mkOption {
          description = "Namespaces to match for PrometheusRule discovery. An empty label selector\nmatches all namespaces. A null label selector matches the current\nnamespace only.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRuleNamespaceSelector");
        };
        "ruleQueryOffset" = mkOption {
          description = "Defines the offset the rule evaluation timestamp of this particular group by the specified duration into the past.\nIt requires Prometheus >= v2.53.0.";
          type = types.nullOr types.str;
        };
        "ruleSelector" = mkOption {
          description = "PrometheusRule objects to be selected for rule evaluation. An empty\nlabel selector matches all objects. A null label selector matches no\nobjects.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRuleSelector");
        };
        "rules" = mkOption {
          description = "Defines the configuration of the Prometheus rules' engine.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRules");
        };
        "runtime" = mkOption {
          description = "RuntimeConfig configures the values for the Prometheus process behavior";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRuntime");
        };
        "sampleLimit" = mkOption {
          description = "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedSampleLimit.";
          type = types.nullOr types.int;
        };
        "scrapeClasses" = mkOption {
          description = "List of scrape classes to expose to scraping objects such as\nPodMonitors, ServiceMonitors, Probes and ScrapeConfigs.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecScrapeClasses" "name" [
              "name"
            ]
          );
          apply = attrsToList;
        };
        "scrapeConfigNamespaceSelector" = mkOption {
          description = "Namespaces to match for ScrapeConfig discovery. An empty label selector\nmatches all namespaces. A null label selector matches the current\nnamespace only.\n\nNote that the ScrapeConfig custom resource definition is currently at Alpha level.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigNamespaceSelector"
          );
        };
        "scrapeConfigSelector" = mkOption {
          description = "ScrapeConfigs to be selected for target discovery. An empty label\nselector matches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.\n\nNote that the ScrapeConfig custom resource definition is currently at Alpha level.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigSelector");
        };
        "scrapeFailureLogFile" = mkOption {
          description = "File to which scrape failures are logged.\nReloading the configuration will reopen the file.\n\nIf the filename has an empty path, e.g. 'file.log', The Prometheus Pods\nwill mount the file into an emptyDir volume at `/var/log/prometheus`.\nIf a full path is provided, e.g. '/var/log/prometheus/file.log', you\nmust mount a volume in the specified directory and it must be writable.\nIt requires Prometheus >= v2.55.0.";
          type = types.nullOr types.str;
        };
        "scrapeInterval" = mkOption {
          description = "Interval between consecutive scrapes.\n\nDefault: \"30s\"";
          type = types.nullOr types.str;
        };
        "scrapeProtocols" = mkOption {
          description = "The protocols to negotiate during a scrape. It tells clients the\nprotocols supported by Prometheus in order of preference (from most to least preferred).\n\nIf unset, Prometheus uses its default value.\n\nIt requires Prometheus >= v2.49.0.\n\n`PrometheusText1.0.0` requires Prometheus >= v3.0.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "scrapeTimeout" = mkOption {
          description = "Number of seconds to wait until a scrape request times out.\nThe value cannot be greater than the scrape interval otherwise the operator will reject the resource.";
          type = types.nullOr types.str;
        };
        "secrets" = mkOption {
          description = "Secrets is a list of Secrets in the same namespace as the Prometheus\nobject, which shall be mounted into the Prometheus Pods.\nEach Secret is added to the StatefulSet definition as a volume named `secret-<secret-name>`.\nThe Secrets are mounted into /etc/prometheus/secrets/<secret-name> in the 'prometheus' container.";
          type = types.nullOr (types.listOf types.str);
        };
        "securityContext" = mkOption {
          description = "SecurityContext holds pod-level security attributes and common container settings.\nThis defaults to the default PodSecurityContext.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecSecurityContext");
        };
        "serviceAccountName" = mkOption {
          description = "ServiceAccountName is the name of the ServiceAccount to use to run the\nPrometheus Pods.";
          type = types.nullOr types.str;
        };
        "serviceDiscoveryRole" = mkOption {
          description = "Defines the service discovery role used to discover targets from\n`ServiceMonitor` objects and Alertmanager endpoints.\n\nIf set, the value should be either \"Endpoints\" or \"EndpointSlice\".\nIf unset, the operator assumes the \"Endpoints\" role.";
          type = types.nullOr types.str;
        };
        "serviceMonitorNamespaceSelector" = mkOption {
          description = "Namespaces to match for ServicedMonitors discovery. An empty label selector\nmatches all namespaces. A null label selector (default value) matches the current\nnamespace only.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorNamespaceSelector"
          );
        };
        "serviceMonitorSelector" = mkOption {
          description = "ServiceMonitors to be selected for target discovery. An empty label\nselector matches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorSelector");
        };
        "serviceName" = mkOption {
          description = "The name of the service name used by the underlying StatefulSet(s) as the governing service.\nIf defined, the Service  must be created before the Prometheus/PrometheusAgent resource in the same namespace and it must define a selector that matches the pod labels.\nIf empty, the operator will create and manage a headless service named `prometheus-operated` for Prometheus resources,\nor `prometheus-agent-operated` for PrometheusAgent resources.\nWhen deploying multiple Prometheus/PrometheusAgent resources in the same namespace, it is recommended to specify a different value for each.\nSee https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id for more details.";
          type = types.nullOr types.str;
        };
        "sha" = mkOption {
          description = "Deprecated: use 'spec.image' instead. The image's digest can be specified as part of the image name.";
          type = types.nullOr types.str;
        };
        "shardRetentionPolicy" = mkOption {
          description = "ShardRetentionPolicy defines the retention policy for the Prometheus shards.\n(Alpha) Using this field requires the 'PrometheusShardRetentionPolicy' feature gate to be enabled.\n\nThe final goals for this feature can be seen at https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/proposals/202310-shard-autoscaling.md#graceful-scale-down-of-prometheus-servers,\nhowever, the feature is not yet fully implemented in this PR. The limitation being:\n* Retention duration is not settable, for now, shards are retained forever.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecShardRetentionPolicy");
        };
        "shards" = mkOption {
          description = "Number of shards to distribute the scraped targets onto.\n\n`spec.replicas` multiplied by `spec.shards` is the total number of Pods\nbeing created.\n\nWhen not defined, the operator assumes only one shard.\n\nNote that scaling down shards will not reshard data onto the remaining\ninstances, it must be manually moved. Increasing shards will not reshard\ndata either but it will continue to be available from the same\ninstances. To query globally, use either\n* Thanos sidecar + querier for query federation and Thanos Ruler for rules.\n* Remote-write to send metrics to a central location.\n\nBy default, the sharding of targets is performed on:\n* The `__address__` target's metadata label for PodMonitor,\nServiceMonitor and ScrapeConfig resources.\n* The `__param_target__` label for Probe resources.\n\nUsers can define their own sharding implementation by setting the\n`__tmp_hash` label during the target discovery with relabeling\nconfiguration (either in the monitoring resources or via scrape class).\n\nYou can also disable sharding on a specific target by setting the\n`__tmp_disable_sharding` label with relabeling configuration. When\nthe label value isn't empty, all Prometheus shards will scrape the target.";
          type = types.nullOr types.int;
        };
        "storage" = mkOption {
          description = "Storage defines the storage used by Prometheus.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorage");
        };
        "tag" = mkOption {
          description = "Deprecated: use 'spec.image' instead. The image's tag can be specified as part of the image name.";
          type = types.nullOr types.str;
        };
        "targetLimit" = mkOption {
          description = "TargetLimit defines a limit on the number of scraped targets that will be accepted.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedTargetLimit.";
          type = types.nullOr types.int;
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down) which may lead to data corruption.\n\nDefaults to 600 seconds.";
          type = types.nullOr types.int;
        };
        "thanos" = mkOption {
          description = "Defines the configuration of the optional Thanos sidecar.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanos");
        };
        "tolerations" = mkOption {
          description = "Defines the Pods' tolerations if specified.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTolerations")
          );
        };
        "topologySpreadConstraints" = mkOption {
          description = "Defines the pod's topology spread constraints if specified.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTopologySpreadConstraints")
          );
        };
        "tracingConfig" = mkOption {
          description = "TracingConfig configures tracing in Prometheus.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfig");
        };
        "tsdb" = mkOption {
          description = "Defines the runtime reloadable configuration of the timeseries database(TSDB).\nIt requires Prometheus >= v2.39.0 or PrometheusAgent >= v2.54.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTsdb");
        };
        "version" = mkOption {
          description = "Version of Prometheus being deployed. The operator uses this information\nto generate the Prometheus StatefulSet + configuration files.\n\nIf not specified, the operator assumes the latest upstream version of\nPrometheus available at the time when the version of the operator was\nreleased.";
          type = types.nullOr types.str;
        };
        "volumeMounts" = mkOption {
          description = "VolumeMounts allows the configuration of additional VolumeMounts.\n\nVolumeMounts will be appended to other VolumeMounts in the 'prometheus'\ncontainer, that are generated as a result of StorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecVolumeMounts" "name" [ ]
          );
          apply = attrsToList;
        };
        "volumes" = mkOption {
          description = "Volumes allows the configuration of additional volumes on the output\nStatefulSet definition. Volumes specified will be appended to other\nvolumes that are generated as a result of StorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecVolumes" "name" [ ]
          );
          apply = attrsToList;
        };
        "walCompression" = mkOption {
          description = "Configures compression of the write-ahead log (WAL) using Snappy.\n\nWAL compression is enabled by default for Prometheus >= 2.20.0\n\nRequires Prometheus v2.11.0 and above.";
          type = types.nullOr types.bool;
        };
        "web" = mkOption {
          description = "Defines the configuration of the Prometheus web server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWeb");
        };
      };

      config = {
        "additionalAlertManagerConfigs" = mkOverride 1002 null;
        "additionalAlertRelabelConfigs" = mkOverride 1002 null;
        "additionalArgs" = mkOverride 1002 null;
        "additionalScrapeConfigs" = mkOverride 1002 null;
        "affinity" = mkOverride 1002 null;
        "alerting" = mkOverride 1002 null;
        "allowOverlappingBlocks" = mkOverride 1002 null;
        "apiserverConfig" = mkOverride 1002 null;
        "arbitraryFSAccessThroughSMs" = mkOverride 1002 null;
        "automountServiceAccountToken" = mkOverride 1002 null;
        "baseImage" = mkOverride 1002 null;
        "bodySizeLimit" = mkOverride 1002 null;
        "configMaps" = mkOverride 1002 null;
        "containers" = mkOverride 1002 null;
        "convertClassicHistogramsToNHCB" = mkOverride 1002 null;
        "disableCompaction" = mkOverride 1002 null;
        "dnsConfig" = mkOverride 1002 null;
        "dnsPolicy" = mkOverride 1002 null;
        "enableAdminAPI" = mkOverride 1002 null;
        "enableFeatures" = mkOverride 1002 null;
        "enableOTLPReceiver" = mkOverride 1002 null;
        "enableRemoteWriteReceiver" = mkOverride 1002 null;
        "enableServiceLinks" = mkOverride 1002 null;
        "enforcedBodySizeLimit" = mkOverride 1002 null;
        "enforcedKeepDroppedTargets" = mkOverride 1002 null;
        "enforcedLabelLimit" = mkOverride 1002 null;
        "enforcedLabelNameLengthLimit" = mkOverride 1002 null;
        "enforcedLabelValueLengthLimit" = mkOverride 1002 null;
        "enforcedNamespaceLabel" = mkOverride 1002 null;
        "enforcedSampleLimit" = mkOverride 1002 null;
        "enforcedTargetLimit" = mkOverride 1002 null;
        "evaluationInterval" = mkOverride 1002 null;
        "excludedFromEnforcement" = mkOverride 1002 null;
        "exemplars" = mkOverride 1002 null;
        "externalLabels" = mkOverride 1002 null;
        "externalUrl" = mkOverride 1002 null;
        "hostAliases" = mkOverride 1002 null;
        "hostNetwork" = mkOverride 1002 null;
        "ignoreNamespaceSelectors" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "imagePullSecrets" = mkOverride 1002 null;
        "initContainers" = mkOverride 1002 null;
        "keepDroppedTargets" = mkOverride 1002 null;
        "labelLimit" = mkOverride 1002 null;
        "labelNameLengthLimit" = mkOverride 1002 null;
        "labelValueLengthLimit" = mkOverride 1002 null;
        "listenLocal" = mkOverride 1002 null;
        "logFormat" = mkOverride 1002 null;
        "logLevel" = mkOverride 1002 null;
        "maximumStartupDurationSeconds" = mkOverride 1002 null;
        "minReadySeconds" = mkOverride 1002 null;
        "nameEscapingScheme" = mkOverride 1002 null;
        "nameValidationScheme" = mkOverride 1002 null;
        "nodeSelector" = mkOverride 1002 null;
        "otlp" = mkOverride 1002 null;
        "overrideHonorLabels" = mkOverride 1002 null;
        "overrideHonorTimestamps" = mkOverride 1002 null;
        "paused" = mkOverride 1002 null;
        "persistentVolumeClaimRetentionPolicy" = mkOverride 1002 null;
        "podMetadata" = mkOverride 1002 null;
        "podMonitorNamespaceSelector" = mkOverride 1002 null;
        "podMonitorSelector" = mkOverride 1002 null;
        "podTargetLabels" = mkOverride 1002 null;
        "portName" = mkOverride 1002 null;
        "priorityClassName" = mkOverride 1002 null;
        "probeNamespaceSelector" = mkOverride 1002 null;
        "probeSelector" = mkOverride 1002 null;
        "prometheusExternalLabelName" = mkOverride 1002 null;
        "prometheusRulesExcludedFromEnforce" = mkOverride 1002 null;
        "query" = mkOverride 1002 null;
        "queryLogFile" = mkOverride 1002 null;
        "reloadStrategy" = mkOverride 1002 null;
        "remoteRead" = mkOverride 1002 null;
        "remoteWrite" = mkOverride 1002 null;
        "remoteWriteReceiverMessageVersions" = mkOverride 1002 null;
        "replicaExternalLabelName" = mkOverride 1002 null;
        "replicas" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "retention" = mkOverride 1002 null;
        "retentionSize" = mkOverride 1002 null;
        "routePrefix" = mkOverride 1002 null;
        "ruleNamespaceSelector" = mkOverride 1002 null;
        "ruleQueryOffset" = mkOverride 1002 null;
        "ruleSelector" = mkOverride 1002 null;
        "rules" = mkOverride 1002 null;
        "runtime" = mkOverride 1002 null;
        "sampleLimit" = mkOverride 1002 null;
        "scrapeClasses" = mkOverride 1002 null;
        "scrapeConfigNamespaceSelector" = mkOverride 1002 null;
        "scrapeConfigSelector" = mkOverride 1002 null;
        "scrapeFailureLogFile" = mkOverride 1002 null;
        "scrapeInterval" = mkOverride 1002 null;
        "scrapeProtocols" = mkOverride 1002 null;
        "scrapeTimeout" = mkOverride 1002 null;
        "secrets" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "serviceAccountName" = mkOverride 1002 null;
        "serviceDiscoveryRole" = mkOverride 1002 null;
        "serviceMonitorNamespaceSelector" = mkOverride 1002 null;
        "serviceMonitorSelector" = mkOverride 1002 null;
        "serviceName" = mkOverride 1002 null;
        "sha" = mkOverride 1002 null;
        "shardRetentionPolicy" = mkOverride 1002 null;
        "shards" = mkOverride 1002 null;
        "storage" = mkOverride 1002 null;
        "tag" = mkOverride 1002 null;
        "targetLimit" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "thanos" = mkOverride 1002 null;
        "tolerations" = mkOverride 1002 null;
        "topologySpreadConstraints" = mkOverride 1002 null;
        "tracingConfig" = mkOverride 1002 null;
        "tsdb" = mkOverride 1002 null;
        "version" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "volumes" = mkOverride 1002 null;
        "walCompression" = mkOverride 1002 null;
        "web" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAdditionalAlertManagerConfigs" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAdditionalAlertRelabelConfigs" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAdditionalArgs" = {
      options = {
        "name" = mkOption {
          description = "Name of the argument, e.g. \"scrape.discovery-reload-interval\".";
          type = types.str;
        };
        "value" = mkOption {
          description = "Argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAdditionalScrapeConfigs" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAffinity" = {
      options = {
        "nodeAffinity" = mkOption {
          description = "Describes node affinity scheduling rules for the pod.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinity");
        };
        "podAffinity" = mkOption {
          description = "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinity");
        };
        "podAntiAffinity" = mkOption {
          description = "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinity");
        };
      };

      config = {
        "nodeAffinity" = mkOverride 1002 null;
        "podAffinity" = mkOverride 1002 null;
        "podAntiAffinity" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "preference" = mkOption {
            description = "A node selector term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference";
          };
          "weight" = mkOption {
            description = "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "nodeSelectorTerms" = mkOption {
            description = "Required. A list of node selector terms. The terms are ORed.";
            type = types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
            );
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecAlerting" = {
      options = {
        "alertmanagers" = mkOption {
          description = "Alertmanager endpoints where Prometheus should send alerts to.";
          type =
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagers"
              "name"
              [ ];
          apply = attrsToList;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagers" = {
      options = {
        "alertRelabelings" = mkOption {
          description = "Relabeling configs applied before sending alerts to a specific Alertmanager.\nIt requires Prometheus >= v2.51.0.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersAlertRelabelings"
            )
          );
        };
        "apiVersion" = mkOption {
          description = "Version of the Alertmanager API that Prometheus uses to send alerts.\nIt can be \"V1\" or \"V2\".\nThe field has no effect for Prometheus >= v3.0.0 because only the v2 API is supported.";
          type = types.nullOr types.str;
        };
        "authorization" = mkOption {
          description = "Authorization section for Alertmanager.\n\nCannot be set at the same time as `basicAuth`, `bearerTokenFile` or `sigv4`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth configuration for Alertmanager.\n\nCannot be set at the same time as `bearerTokenFile`, `authorization` or `sigv4`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersBasicAuth"
          );
        };
        "bearerTokenFile" = mkOption {
          description = "File to read bearer token for Alertmanager.\n\nCannot be set at the same time as `basicAuth`, `authorization`, or `sigv4`.\n\nDeprecated: this will be removed in a future release. Prefer using `authorization`.";
          type = types.nullOr types.str;
        };
        "enableHttp2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "name" = mkOption {
          description = "Name of the Endpoints object in the namespace.";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace of the Endpoints object.\n\nIf not set, the object will be discovered in the namespace of the\nPrometheus object.";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "pathPrefix" = mkOption {
          description = "Prefix for the HTTP path alerts are pushed to.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Port on which the Alertmanager API is exposed.";
          type = types.either types.int types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "relabelings" = mkOption {
          description = "Relabel configuration applied to the discovered Alertmanagers.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersRelabelings")
          );
        };
        "scheme" = mkOption {
          description = "Scheme to use when firing alerts.";
          type = types.nullOr types.str;
        };
        "sigv4" = mkOption {
          description = "Sigv4 allows to configures AWS's Signature Verification 4 for the URL.\n\nIt requires Prometheus >= v2.48.0.\n\nCannot be set at the same time as `basicAuth`, `bearerTokenFile` or `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersSigv4"
          );
        };
        "timeout" = mkOption {
          description = "Timeout is a per-target Alertmanager timeout when pushing alerts.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use for Alertmanager.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfig"
          );
        };
      };

      config = {
        "alertRelabelings" = mkOverride 1002 null;
        "apiVersion" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "enableHttp2" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "pathPrefix" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "relabelings" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
        "sigv4" = mkOverride 1002 null;
        "timeout" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersAlertRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersSigv4" = {
      options = {
        "accessKey" = mkOption {
          description = "AccessKey is the AWS API key. If not specified, the environment variable\n`AWS_ACCESS_KEY_ID` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersSigv4AccessKey"
          );
        };
        "profile" = mkOption {
          description = "Profile is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "Region is the AWS region. If blank, the region from the default credentials chain used.";
          type = types.nullOr types.str;
        };
        "roleArn" = mkOption {
          description = "RoleArn is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "secretKey" = mkOption {
          description = "SecretKey is the AWS API secret. If not specified, the environment\nvariable `AWS_SECRET_ACCESS_KEY` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersSigv4SecretKey"
          );
        };
      };

      config = {
        "accessKey" = mkOverride 1002 null;
        "profile" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "roleArn" = mkOverride 1002 null;
        "secretKey" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersSigv4AccessKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersSigv4SecretKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCa"
          );
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecAlertingAlertmanagersTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfig" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization section for the API server.\n\nCannot be set at the same time as `basicAuth`, `bearerToken`, or\n`bearerTokenFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth configuration for the API server.\n\nCannot be set at the same time as `authorization`, `bearerToken`, or\n`bearerTokenFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigBasicAuth");
        };
        "bearerToken" = mkOption {
          description = "*Warning: this field shouldn't be used because the token value appears\nin clear-text. Prefer using `authorization`.*\n\nDeprecated: this will be removed in a future release.";
          type = types.nullOr types.str;
        };
        "bearerTokenFile" = mkOption {
          description = "File to read bearer token for accessing apiserver.\n\nCannot be set at the same time as `basicAuth`, `authorization`, or `bearerToken`.\n\nDeprecated: this will be removed in a future release. Prefer using `authorization`.";
          type = types.nullOr types.str;
        };
        "host" = mkOption {
          description = "Kubernetes API address consisting of a hostname or IP address followed\nby an optional port number.";
          type = types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use for the API server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfig");
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerToken" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCa"
          );
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecApiserverConfigTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecArbitraryFSAccessThroughSMs" = {
      options = {
        "deny" = mkOption {
          description = "";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "deny" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecContainersEnv" "name" [
              "name"
            ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecycle");
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbe");
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecContainersPorts" "name" [
              "containerPort"
              "protocol"
            ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbe");
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersResizePolicy")
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersResources");
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbe");
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFrom");
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecDnsConfig" = {
      options = {
        "nameservers" = mkOption {
          description = "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
        "options" = mkOption {
          description = "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nResolution options given in Options\nwill override those that appear in the base DNSPolicy.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecDnsConfigOptions" "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "searches" = mkOption {
          description = "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "nameservers" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "searches" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecDnsConfigOptions" = {
      options = {
        "name" = mkOption {
          description = "Name is required and must be unique.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value is optional.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecExcludedFromEnforcement" = {
      options = {
        "group" = mkOption {
          description = "Group of the referent. When not specified, it defaults to `monitoring.coreos.com`";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "Name of the referent. When not set, all resources in the namespace are matched.";
          type = types.nullOr types.str;
        };
        "namespace" = mkOption {
          description = "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/";
          type = types.str;
        };
        "resource" = mkOption {
          description = "Resource of the referent.";
          type = types.str;
        };
      };

      config = {
        "group" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecExemplars" = {
      options = {
        "maxSize" = mkOption {
          description = "Maximum number of exemplars stored in memory for all series.\n\nexemplar-storage itself must be enabled using the `spec.enableFeature`\noption for exemplars to be scraped in the first place.\n\nIf not set, Prometheus uses its default value. A value of zero or less\nthan zero disables the storage.";
          type = types.nullOr types.int;
        };
      };

      config = {
        "maxSize" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecHostAliases" = {
      options = {
        "hostnames" = mkOption {
          description = "Hostnames for the above IP address.";
          type = types.listOf types.str;
        };
        "ip" = mkOption {
          description = "IP address of the host file entry.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecImagePullSecrets" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnv" "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecycle");
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbe"
          );
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecInitContainersPorts"
              "name"
              [
                "containerPort"
                "protocol"
              ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbe"
          );
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersResizePolicy")
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersResources");
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbe"
          );
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFrom"
          );
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecInitContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecOtlp" = {
      options = {
        "convertHistogramsToNHCB" = mkOption {
          description = "Configures optional translation of OTLP explicit bucket histograms into native histograms with custom buckets.\nIt requires Prometheus >= v3.4.0.";
          type = types.nullOr types.bool;
        };
        "keepIdentifyingResourceAttributes" = mkOption {
          description = "Enables adding `service.name`, `service.namespace` and `service.instance.id`\nresource attributes to the `target_info` metric, on top of converting them into the `instance` and `job` labels.\n\nIt requires Prometheus >= v3.1.0.";
          type = types.nullOr types.bool;
        };
        "promoteResourceAttributes" = mkOption {
          description = "List of OpenTelemetry Attributes that should be promoted to metric labels, defaults to none.";
          type = types.nullOr (types.listOf types.str);
        };
        "translationStrategy" = mkOption {
          description = "Configures how the OTLP receiver endpoint translates the incoming metrics.\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "convertHistogramsToNHCB" = mkOverride 1002 null;
        "keepIdentifyingResourceAttributes" = mkOverride 1002 null;
        "promoteResourceAttributes" = mkOverride 1002 null;
        "translationStrategy" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecPersistentVolumeClaimRetentionPolicy" = {
      options = {
        "whenDeleted" = mkOption {
          description = "WhenDeleted specifies what happens to PVCs created from StatefulSet\nVolumeClaimTemplates when the StatefulSet is deleted. The default policy\nof `Retain` causes PVCs to not be affected by StatefulSet deletion. The\n`Delete` policy causes those PVCs to be deleted.";
          type = types.nullOr types.str;
        };
        "whenScaled" = mkOption {
          description = "WhenScaled specifies what happens to PVCs created from StatefulSet\nVolumeClaimTemplates when the StatefulSet is scaled down. The default\npolicy of `Retain` causes PVCs to not be affected by a scaledown. The\n`Delete` policy causes the associated PVCs for any excess pods above\nthe replica count to be deleted.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "whenDeleted" = mkOverride 1002 null;
        "whenScaled" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecPodMetadata" = {
      options = {
        "annotations" = mkOption {
          description = "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations";
          type = types.nullOr (types.attrsOf types.str);
        };
        "labels" = mkOption {
          description = "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels";
          type = types.nullOr (types.attrsOf types.str);
        };
        "name" = mkOption {
          description = "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "annotations" = mkOverride 1002 null;
        "labels" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecPodMonitorNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecPodMonitorNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecPodMonitorSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecPodMonitorSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecPodMonitorSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecProbeNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecProbeNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecProbeNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecProbeSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecProbeSelectorMatchExpressions")
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecProbeSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecPrometheusRulesExcludedFromEnforce" = {
      options = {
        "ruleName" = mkOption {
          description = "Name of the excluded PrometheusRule object.";
          type = types.str;
        };
        "ruleNamespace" = mkOption {
          description = "Namespace of the excluded PrometheusRule object.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecQuery" = {
      options = {
        "lookbackDelta" = mkOption {
          description = "The delta difference allowed for retrieving metrics during expression evaluations.";
          type = types.nullOr types.str;
        };
        "maxConcurrency" = mkOption {
          description = "Number of concurrent queries that can be run at once.";
          type = types.nullOr types.int;
        };
        "maxSamples" = mkOption {
          description = "Maximum number of samples a single query can load into memory. Note that\nqueries will fail if they would load more samples than this into memory,\nso this also limits the number of samples a query can return.";
          type = types.nullOr types.int;
        };
        "timeout" = mkOption {
          description = "Maximum time a query may take before being aborted.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "lookbackDelta" = mkOverride 1002 null;
        "maxConcurrency" = mkOverride 1002 null;
        "maxSamples" = mkOverride 1002 null;
        "timeout" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteRead" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization section for the URL.\n\nIt requires Prometheus >= v2.26.0.\n\nCannot be set at the same time as `basicAuth`, or `oauth2`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadAuthorization");
        };
        "basicAuth" = mkOption {
          description = "BasicAuth configuration for the URL.\n\nCannot be set at the same time as `authorization`, or `oauth2`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadBasicAuth");
        };
        "bearerToken" = mkOption {
          description = "*Warning: this field shouldn't be used because the token value appears\nin clear-text. Prefer using `authorization`.*\n\nDeprecated: this will be removed in a future release.";
          type = types.nullOr types.str;
        };
        "bearerTokenFile" = mkOption {
          description = "File from which to read the bearer token for the URL.\n\nDeprecated: this will be removed in a future release. Prefer using `authorization`.";
          type = types.nullOr types.str;
        };
        "filterExternalLabels" = mkOption {
          description = "Whether to use the external labels as selectors for the remote read endpoint.\n\nIt requires Prometheus >= v2.34.0.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.\n\nIt requires Prometheus >= v2.26.0.";
          type = types.nullOr types.bool;
        };
        "headers" = mkOption {
          description = "Custom HTTP headers to be sent along with each remote read request.\nBe aware that headers that are set by Prometheus itself can't be overwritten.\nOnly valid in Prometheus versions 2.26.0 and newer.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "name" = mkOption {
          description = "The name of the remote read queue, it must be unique if specified. The\nname is used in metrics and logging in order to differentiate read\nconfigurations.\n\nIt requires Prometheus >= v2.15.0.";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "OAuth2 configuration for the URL.\n\nIt requires Prometheus >= v2.27.0.\n\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2");
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "readRecent" = mkOption {
          description = "Whether reads should be made for queries for time ranges that\nthe local storage should have complete data for.";
          type = types.nullOr types.bool;
        };
        "remoteTimeout" = mkOption {
          description = "Timeout for requests to the remote read endpoint.";
          type = types.nullOr types.str;
        };
        "requiredMatchers" = mkOption {
          description = "An optional list of equality matchers which have to be present\nin a selector to query the remote read endpoint.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use for the URL.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfig");
        };
        "url" = mkOption {
          description = "The URL of the endpoint to query from.";
          type = types.str;
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerToken" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "filterExternalLabels" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "headers" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "readRecent" = mkOverride 1002 null;
        "remoteTimeout" = mkOverride 1002 null;
        "requiredMatchers" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCa");
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCert");
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteReadTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWrite" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization section for the URL.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `sigv4`, `basicAuth`, `oauth2`, or `azureAd`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAuthorization");
        };
        "azureAd" = mkOption {
          description = "AzureAD for the URL.\n\nIt requires Prometheus >= v2.45.0 or Thanos >= v0.31.0.\n\nCannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `sigv4`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAd");
        };
        "basicAuth" = mkOption {
          description = "BasicAuth configuration for the URL.\n\nCannot be set at the same time as `sigv4`, `authorization`, `oauth2`, or `azureAd`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteBasicAuth");
        };
        "bearerToken" = mkOption {
          description = "*Warning: this field shouldn't be used because the token value appears\nin clear-text. Prefer using `authorization`.*\n\nDeprecated: this will be removed in a future release.";
          type = types.nullOr types.str;
        };
        "bearerTokenFile" = mkOption {
          description = "File from which to read bearer token for the URL.\n\nDeprecated: this will be removed in a future release. Prefer using `authorization`.";
          type = types.nullOr types.str;
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.";
          type = types.nullOr types.bool;
        };
        "headers" = mkOption {
          description = "Custom HTTP headers to be sent along with each remote write request.\nBe aware that headers that are set by Prometheus itself can't be overwritten.\n\nIt requires Prometheus >= v2.25.0 or Thanos >= v0.24.0.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "messageVersion" = mkOption {
          description = "The Remote Write message's version to use when writing to the endpoint.\n\n`Version1.0` corresponds to the `prometheus.WriteRequest` protobuf message introduced in Remote Write 1.0.\n`Version2.0` corresponds to the `io.prometheus.write.v2.Request` protobuf message introduced in Remote Write 2.0.\n\nWhen `Version2.0` is selected, Prometheus will automatically be\nconfigured to append the metadata of scraped metrics to the WAL.\n\nBefore setting this field, consult with your remote storage provider\nwhat message version it supports.\n\nIt requires Prometheus >= v2.54.0 or Thanos >= v0.37.0.";
          type = types.nullOr types.str;
        };
        "metadataConfig" = mkOption {
          description = "MetadataConfig configures the sending of series metadata to the remote storage.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteMetadataConfig"
          );
        };
        "name" = mkOption {
          description = "The name of the remote write queue, it must be unique if specified. The\nname is used in metrics and logging in order to differentiate queues.\n\nIt requires Prometheus >= v2.15.0 or Thanos >= 0.24.0.";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "OAuth2 configuration for the URL.\n\nIt requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `sigv4`, `authorization`, `basicAuth`, or `azureAd`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2");
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "queueConfig" = mkOption {
          description = "QueueConfig allows tuning of the remote write queue parameters.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteQueueConfig");
        };
        "remoteTimeout" = mkOption {
          description = "Timeout for requests to the remote write endpoint.";
          type = types.nullOr types.str;
        };
        "roundRobinDNS" = mkOption {
          description = "When enabled:\n    - The remote-write mechanism will resolve the hostname via DNS.\n    - It will randomly select one of the resolved IP addresses and connect to it.\n\nWhen disabled (default behavior):\n    - The Go standard library will handle hostname resolution.\n    - It will attempt connections to each resolved IP address sequentially.\n\nNote: The connection timeout applies to the entire resolution and connection process.\n      If disabled, the timeout is distributed across all connection attempts.\n\nIt requires Prometheus >= v3.1.0 or Thanos >= v0.38.0.";
          type = types.nullOr types.bool;
        };
        "sendExemplars" = mkOption {
          description = "Enables sending of exemplars over remote write. Note that\nexemplar-storage itself must be enabled using the `spec.enableFeatures`\noption for exemplars to be scraped in the first place.\n\nIt requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.";
          type = types.nullOr types.bool;
        };
        "sendNativeHistograms" = mkOption {
          description = "Enables sending of native histograms, also known as sparse histograms\nover remote write.\n\nIt requires Prometheus >= v2.40.0 or Thanos >= v0.30.0.";
          type = types.nullOr types.bool;
        };
        "sigv4" = mkOption {
          description = "Sigv4 allows to configures AWS's Signature Verification 4 for the URL.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `azureAd`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteSigv4");
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use for the URL.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfig");
        };
        "url" = mkOption {
          description = "The URL of the endpoint to send samples to.";
          type = types.str;
        };
        "writeRelabelConfigs" = mkOption {
          description = "The list of remote write relabel configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteWriteRelabelConfigs")
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "azureAd" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerToken" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "headers" = mkOverride 1002 null;
        "messageVersion" = mkOverride 1002 null;
        "metadataConfig" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "queueConfig" = mkOverride 1002 null;
        "remoteTimeout" = mkOverride 1002 null;
        "roundRobinDNS" = mkOverride 1002 null;
        "sendExemplars" = mkOverride 1002 null;
        "sendNativeHistograms" = mkOverride 1002 null;
        "sigv4" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "writeRelabelConfigs" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAd" = {
      options = {
        "cloud" = mkOption {
          description = "The Azure Cloud. Options are 'AzurePublic', 'AzureChina', or 'AzureGovernment'.";
          type = types.nullOr types.str;
        };
        "managedIdentity" = mkOption {
          description = "ManagedIdentity defines the Azure User-assigned Managed identity.\nCannot be set at the same time as `oauth` or `sdk`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdManagedIdentity"
          );
        };
        "oauth" = mkOption {
          description = "OAuth defines the oauth config that is being used to authenticate.\nCannot be set at the same time as `managedIdentity` or `sdk`.\n\nIt requires Prometheus >= v2.48.0 or Thanos >= v0.31.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdOauth");
        };
        "sdk" = mkOption {
          description = "SDK defines the Azure SDK config that is being used to authenticate.\nSee https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication\nCannot be set at the same time as `oauth` or `managedIdentity`.\n\nIt requires Prometheus >= v2.52.0 or Thanos >= v0.36.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdSdk");
        };
      };

      config = {
        "cloud" = mkOverride 1002 null;
        "managedIdentity" = mkOverride 1002 null;
        "oauth" = mkOverride 1002 null;
        "sdk" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdManagedIdentity" = {
      options = {
        "clientId" = mkOption {
          description = "The client id";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdOauth" = {
      options = {
        "clientId" = mkOption {
          description = "`clientID` is the clientId of the Azure Active Directory application that is being used to authenticate.";
          type = types.str;
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the client secret of the Azure Active Directory application that is being used to authenticate.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdOauthClientSecret";
        };
        "tenantId" = mkOption {
          description = "`tenantId` is the tenant ID of the Azure Active Directory application that is being used to authenticate.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdOauthClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteAzureAdSdk" = {
      options = {
        "tenantId" = mkOption {
          description = "`tenantId` is the tenant ID of the azure active directory application that is being used to authenticate.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "tenantId" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteMetadataConfig" = {
      options = {
        "maxSamplesPerSend" = mkOption {
          description = "MaxSamplesPerSend is the maximum number of metadata samples per send.\n\nIt requires Prometheus >= v2.29.0.";
          type = types.nullOr types.int;
        };
        "send" = mkOption {
          description = "Defines whether metric metadata is sent to the remote storage or not.";
          type = types.nullOr types.bool;
        };
        "sendInterval" = mkOption {
          description = "Defines how frequently metric metadata is sent to the remote storage.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "maxSamplesPerSend" = mkOverride 1002 null;
        "send" = mkOverride 1002 null;
        "sendInterval" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteQueueConfig" = {
      options = {
        "batchSendDeadline" = mkOption {
          description = "BatchSendDeadline is the maximum time a sample will wait in buffer.";
          type = types.nullOr types.str;
        };
        "capacity" = mkOption {
          description = "Capacity is the number of samples to buffer per shard before we start\ndropping them.";
          type = types.nullOr types.int;
        };
        "maxBackoff" = mkOption {
          description = "MaxBackoff is the maximum retry delay.";
          type = types.nullOr types.str;
        };
        "maxRetries" = mkOption {
          description = "MaxRetries is the maximum number of times to retry a batch on recoverable errors.";
          type = types.nullOr types.int;
        };
        "maxSamplesPerSend" = mkOption {
          description = "MaxSamplesPerSend is the maximum number of samples per send.";
          type = types.nullOr types.int;
        };
        "maxShards" = mkOption {
          description = "MaxShards is the maximum number of shards, i.e. amount of concurrency.";
          type = types.nullOr types.int;
        };
        "minBackoff" = mkOption {
          description = "MinBackoff is the initial retry delay. Gets doubled for every retry.";
          type = types.nullOr types.str;
        };
        "minShards" = mkOption {
          description = "MinShards is the minimum number of shards, i.e. amount of concurrency.";
          type = types.nullOr types.int;
        };
        "retryOnRateLimit" = mkOption {
          description = "Retry upon receiving a 429 status code from the remote-write storage.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr types.bool;
        };
        "sampleAgeLimit" = mkOption {
          description = "SampleAgeLimit drops samples older than the limit.\nIt requires Prometheus >= v2.50.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "batchSendDeadline" = mkOverride 1002 null;
        "capacity" = mkOverride 1002 null;
        "maxBackoff" = mkOverride 1002 null;
        "maxRetries" = mkOverride 1002 null;
        "maxSamplesPerSend" = mkOverride 1002 null;
        "maxShards" = mkOverride 1002 null;
        "minBackoff" = mkOverride 1002 null;
        "minShards" = mkOverride 1002 null;
        "retryOnRateLimit" = mkOverride 1002 null;
        "sampleAgeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteSigv4" = {
      options = {
        "accessKey" = mkOption {
          description = "AccessKey is the AWS API key. If not specified, the environment variable\n`AWS_ACCESS_KEY_ID` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteSigv4AccessKey"
          );
        };
        "profile" = mkOption {
          description = "Profile is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "Region is the AWS region. If blank, the region from the default credentials chain used.";
          type = types.nullOr types.str;
        };
        "roleArn" = mkOption {
          description = "RoleArn is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "secretKey" = mkOption {
          description = "SecretKey is the AWS API secret. If not specified, the environment\nvariable `AWS_SECRET_ACCESS_KEY` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteSigv4SecretKey"
          );
        };
      };

      config = {
        "accessKey" = mkOverride 1002 null;
        "profile" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "roleArn" = mkOverride 1002 null;
        "secretKey" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteSigv4AccessKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteSigv4SecretKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCa");
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCert");
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRemoteWriteWriteRelabelConfigs" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecResourcesClaims" "name" [
              "name"
            ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRuleNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRuleNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRuleNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRuleSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRuleSelectorMatchExpressions")
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRuleSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRules" = {
      options = {
        "alert" = mkOption {
          description = "Defines the parameters of the Prometheus rules' engine.\n\nAny update to these parameters trigger a restart of the pods.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecRulesAlert");
        };
      };

      config = {
        "alert" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRulesAlert" = {
      options = {
        "forGracePeriod" = mkOption {
          description = "Minimum duration between alert and restored 'for' state.\n\nThis is maintained only for alerts with a configured 'for' time greater\nthan the grace period.";
          type = types.nullOr types.str;
        };
        "forOutageTolerance" = mkOption {
          description = "Max time to tolerate prometheus outage for restoring 'for' state of\nalert.";
          type = types.nullOr types.str;
        };
        "resendDelay" = mkOption {
          description = "Minimum amount of time to wait before resending an alert to\nAlertmanager.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "forGracePeriod" = mkOverride 1002 null;
        "forOutageTolerance" = mkOverride 1002 null;
        "resendDelay" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecRuntime" = {
      options = {
        "goGC" = mkOption {
          description = "The Go garbage collection target percentage. Lowering this number may increase the CPU usage.\nSee: https://tip.golang.org/doc/gc-guide#GOGC";
          type = types.nullOr types.int;
        };
      };

      config = {
        "goGC" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClasses" = {
      options = {
        "attachMetadata" = mkOption {
          description = "AttachMetadata configures additional metadata to the discovered targets.\nWhen the scrape object defines its own configuration, it takes\nprecedence over the scrape class configuration.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesAttachMetadata"
          );
        };
        "authorization" = mkOption {
          description = "Authorization section for the ScrapeClass.\nIt will only apply if the scrape resource doesn't specify any Authorization.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesAuthorization"
          );
        };
        "default" = mkOption {
          description = "Default indicates that the scrape applies to all scrape objects that\ndon't configure an explicit scrape class name.\n\nOnly one scrape class can be set as the default.";
          type = types.nullOr types.bool;
        };
        "fallbackScrapeProtocol" = mkOption {
          description = "The protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.\nIt will only apply if the scrape resource doesn't specify any FallbackScrapeProtocol\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
        "metricRelabelings" = mkOption {
          description = "MetricRelabelings configures the relabeling rules to apply to all samples before ingestion.\n\nThe Operator adds the scrape class metric relabelings defined here.\nThen the Operator adds the target-specific metric relabelings defined in ServiceMonitors, PodMonitors, Probes and ScrapeConfigs.\nThen the Operator adds namespace enforcement relabeling rule, specified in '.spec.enforcedNamespaceLabel'.\n\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesMetricRelabelings")
          );
        };
        "name" = mkOption {
          description = "Name of the scrape class.";
          type = types.str;
        };
        "relabelings" = mkOption {
          description = "Relabelings configures the relabeling rules to apply to all scrape targets.\n\nThe Operator automatically adds relabelings for a few standard Kubernetes fields\nlike `__meta_kubernetes_namespace` and `__meta_kubernetes_service_name`.\nThen the Operator adds the scrape class relabelings defined here.\nThen the Operator adds the target-specific relabelings defined in the scrape object.\n\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesRelabelings")
          );
        };
        "tlsConfig" = mkOption {
          description = "TLSConfig defines the TLS settings to use for the scrape. When the\nscrape objects define their own CA, certificate and/or key, they take\nprecedence over the corresponding scrape class fields.\n\nFor now only the `caFile`, `certFile` and `keyFile` fields are supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfig");
        };
      };

      config = {
        "attachMetadata" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "default" = mkOverride 1002 null;
        "fallbackScrapeProtocol" = mkOverride 1002 null;
        "metricRelabelings" = mkOverride 1002 null;
        "relabelings" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesAttachMetadata" = {
      options = {
        "node" = mkOption {
          description = "When set to true, Prometheus attaches node metadata to the discovered\ntargets.\n\nThe Prometheus service account must have the `list` and `watch`\npermissions on the `Nodes` objects.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "node" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesMetricRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCa");
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeClassesTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecScrapeConfigSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecSecurityContext" = {
      options = {
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecSecurityContextAppArmorProfile"
          );
        };
        "fsGroup" = mkOption {
          description = "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "fsGroupChangePolicy" = mkOption {
          description = "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxChangePolicy" = mkOption {
          description = "seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.\nIt has no effect on nodes that do not support SELinux or to volumes does not support SELinux.\nValid values are \"MountOption\" and \"Recursive\".\n\n\"Recursive\" means relabeling of all files on all Pod volumes by the container runtime.\nThis may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.\n\n\"MountOption\" mounts all eligible Pod volumes with `-o context` mount option.\nThis requires all Pods that share the same volume to use the same SELinux label.\nIt is not possible to share the same volume among privileged and unprivileged Pods.\nEligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes\nwhose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their\nCSIDriver instance. Other volumes are always re-labelled recursively.\n\"MountOption\" value is allowed only when SELinuxMount feature gate is enabled.\n\nIf not specified and SELinuxMount feature gate is enabled, \"MountOption\" is used.\nIf not specified and SELinuxMount feature gate is disabled, \"MountOption\" is used for ReadWriteOncePod volumes\nand \"Recursive\" for all other volumes.\n\nThis field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.\n\nAll Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecSecurityContextSeccompProfile"
          );
        };
        "supplementalGroups" = mkOption {
          description = "A list of groups applied to the first process run in each container, in\naddition to the container's primary GID and fsGroup (if specified).  If\nthe SupplementalGroupsPolicy feature is enabled, the\nsupplementalGroupsPolicy field determines whether these are in addition\nto or instead of any group memberships defined in the container image.\nIf unspecified, no additional groups are added, though group memberships\ndefined in the container image may still be used, depending on the\nsupplementalGroupsPolicy field.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (types.listOf types.int);
        };
        "supplementalGroupsPolicy" = mkOption {
          description = "Defines how supplemental groups of the first container processes are calculated.\nValid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used.\n(Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled\nand the container runtime must implement support for this feature.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "sysctls" = mkOption {
          description = "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecSecurityContextSysctls"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "appArmorProfile" = mkOverride 1002 null;
        "fsGroup" = mkOverride 1002 null;
        "fsGroupChangePolicy" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxChangePolicy" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "supplementalGroups" = mkOverride 1002 null;
        "supplementalGroupsPolicy" = mkOverride 1002 null;
        "sysctls" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecSecurityContextSysctls" = {
      options = {
        "name" = mkOption {
          description = "Name of a property to set";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value of a property to set";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecServiceMonitorSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecShardRetentionPolicy" = {
      options = {
        "retain" = mkOption {
          description = "Defines the config for retention when the retention policy is set to `Retain`.\nThis field is ineffective as of now.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecShardRetentionPolicyRetain"
          );
        };
        "whenScaled" = mkOption {
          description = "Defines the retention policy when the Prometheus shards are scaled down.\n* `Delete`, the operator will delete the pods from the scaled-down shard(s).\n* `Retain`, the operator will keep the pods from the scaled-down shard(s), so the data can still be queried.\n\nIf not defined, the operator assumes the `Delete` value.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "retain" = mkOverride 1002 null;
        "whenScaled" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecShardRetentionPolicyRetain" = {
      options = {
        "retentionPeriod" = mkOption {
          description = "Duration is a valid time duration that can be parsed by Prometheus model.ParseDuration() function.\nSupported units: y, w, d, h, m, s, ms\nExamples: `30s`, `1m`, `1h20m15s`, `15d`";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorage" = {
      options = {
        "disableMountSubPath" = mkOption {
          description = "Deprecated: subPath usage will be removed in a future release.";
          type = types.nullOr types.bool;
        };
        "emptyDir" = mkOption {
          description = "EmptyDirVolumeSource to be used by the StatefulSet.\nIf specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEmptyDir");
        };
        "ephemeral" = mkOption {
          description = "EphemeralVolumeSource to be used by the StatefulSet.\nThis is a beta field in k8s 1.21 and GA in 1.15.\nFor lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.\nMore info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeral");
        };
        "volumeClaimTemplate" = mkOption {
          description = "Defines the PVC spec to be used by the Prometheus StatefulSets.\nThe easiest way to use a volume that cannot be automatically provisioned\nis to use a label selector alongside manually created PersistentVolumes.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplate"
          );
        };
      };

      config = {
        "disableMountSubPath" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplate" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Defines the desired characteristics of a volume requested by a pod author.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpec"
          );
        };
        "status" = mkOption {
          description = "Deprecated: this field is never set.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateStatus"
          );
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "spec" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateStatus" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the actual access modes the volume backing the PVC has.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "allocatedResourceStatuses" = mkOption {
          description = "allocatedResourceStatuses stores status of resource being resized for the given PVC.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "allocatedResources" = mkOption {
          description = "allocatedResources tracks the resources allocated to a PVC including its capacity.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation\nis requested.\nFor storage quota, the larger value from allocatedResources and PVC.spec.resources is used.\nIf allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.\nIf a volume expansion capacity request is lowered, allocatedResources is only\nlowered if there are no expansion operations in progress and if the actual volume capacity\nis equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "capacity" = mkOption {
          description = "capacity represents the actual resources of the underlying volume.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "conditions" = mkOption {
          description = "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being\nresized then the Condition will be set to 'Resizing'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateStatusConditions"
            )
          );
        };
        "currentVolumeAttributesClassName" = mkOption {
          description = "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.\nWhen unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr types.str;
        };
        "modifyVolumeStatus" = mkOption {
          description = "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.\nWhen this is unset, there is no ModifyVolume operation being attempted.\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus"
          );
        };
        "phase" = mkOption {
          description = "phase represents the current phase of PersistentVolumeClaim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "allocatedResourceStatuses" = mkOverride 1002 null;
        "allocatedResources" = mkOverride 1002 null;
        "capacity" = mkOverride 1002 null;
        "conditions" = mkOverride 1002 null;
        "currentVolumeAttributesClassName" = mkOverride 1002 null;
        "modifyVolumeStatus" = mkOverride 1002 null;
        "phase" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateStatusConditions" = {
      options = {
        "lastProbeTime" = mkOption {
          description = "lastProbeTime is the time we probed the condition.";
          type = types.nullOr types.str;
        };
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time the condition transitioned from one status to another.";
          type = types.nullOr types.str;
        };
        "message" = mkOption {
          description = "message is the human-readable message indicating details about last transition.";
          type = types.nullOr types.str;
        };
        "reason" = mkOption {
          description = "reason is a unique, this should be a short, machine understandable string that gives the reason\nfor condition's last transition. If it reports \"Resizing\" that means the underlying\npersistent volume is being resized.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about";
          type = types.str;
        };
      };

      config = {
        "lastProbeTime" = mkOverride 1002 null;
        "lastTransitionTime" = mkOverride 1002 null;
        "message" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus" = {
      options = {
        "status" = mkOption {
          description = "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.";
          type = types.str;
        };
        "targetVolumeAttributesClassName" = mkOption {
          description = "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled";
          type = types.nullOr types.str;
        };
      };

      config = {
        "targetVolumeAttributesClassName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanos" = {
      options = {
        "additionalArgs" = mkOption {
          description = "AdditionalArgs allows setting additional arguments for the Thanos container.\nThe arguments are passed as-is to the Thanos container which may cause issues\nif they are invalid or not supported the given Thanos version.\nIn case of an argument conflict (e.g. an argument which is already set by the\noperator itself) or when providing an invalid argument, the reconciliation will\nfail and an error will be logged.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecThanosAdditionalArgs"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "baseImage" = mkOption {
          description = "Deprecated: use 'image' instead.";
          type = types.nullOr types.str;
        };
        "blockSize" = mkOption {
          description = "BlockDuration controls the size of TSDB blocks produced by Prometheus.\nThe default value is 2h to match the upstream Prometheus defaults.\n\nWARNING: Changing the block duration can impact the performance and\nefficiency of the entire Prometheus/Thanos stack due to how it interacts\nwith memory and Thanos compactors. It is recommended to keep this value\nset to a multiple of 120 times your longest scrape or rule interval. For\nexample, 30s * 120 = 1h.";
          type = types.nullOr types.str;
        };
        "getConfigInterval" = mkOption {
          description = "How often to retrieve the Prometheus configuration.";
          type = types.nullOr types.str;
        };
        "getConfigTimeout" = mkOption {
          description = "Maximum time to wait when retrieving the Prometheus configuration.";
          type = types.nullOr types.str;
        };
        "grpcListenLocal" = mkOption {
          description = "When true, the Thanos sidecar listens on the loopback interface instead\nof the Pod IP's address for the gRPC endpoints.\n\nIt has no effect if `listenLocal` is true.";
          type = types.nullOr types.bool;
        };
        "grpcServerTlsConfig" = mkOption {
          description = "Configures the TLS parameters for the gRPC server providing the StoreAPI.\n\nNote: Currently only the `caFile`, `certFile`, and `keyFile` fields are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfig"
          );
        };
        "httpListenLocal" = mkOption {
          description = "When true, the Thanos sidecar listens on the loopback interface instead\nof the Pod IP's address for the HTTP endpoints.\n\nIt has no effect if `listenLocal` is true.";
          type = types.nullOr types.bool;
        };
        "image" = mkOption {
          description = "Container image name for Thanos. If specified, it takes precedence over\nthe `spec.thanos.baseImage`, `spec.thanos.tag` and `spec.thanos.sha`\nfields.\n\nSpecifying `spec.thanos.version` is still necessary to ensure the\nPrometheus Operator knows which version of Thanos is being configured.\n\nIf neither `spec.thanos.image` nor `spec.thanos.baseImage` are defined,\nthe operator will use the latest upstream version of Thanos available at\nthe time when the operator was released.";
          type = types.nullOr types.str;
        };
        "listenLocal" = mkOption {
          description = "Deprecated: use `grpcListenLocal` and `httpListenLocal` instead.";
          type = types.nullOr types.bool;
        };
        "logFormat" = mkOption {
          description = "Log format for the Thanos sidecar.";
          type = types.nullOr types.str;
        };
        "logLevel" = mkOption {
          description = "Log level for the Thanos sidecar.";
          type = types.nullOr types.str;
        };
        "minTime" = mkOption {
          description = "Defines the start of time range limit served by the Thanos sidecar's StoreAPI.\nThe field's value should be a constant time in RFC3339 format or a time\nduration relative to current time, such as -1d or 2h45m. Valid duration\nunits are ms, s, m, h, d, w, y.";
          type = types.nullOr types.str;
        };
        "objectStorageConfig" = mkOption {
          description = "Defines the Thanos sidecar's configuration to upload TSDB blocks to object storage.\n\nMore info: https://thanos.io/tip/thanos/storage.md/\n\nobjectStorageConfigFile takes precedence over this field.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosObjectStorageConfig"
          );
        };
        "objectStorageConfigFile" = mkOption {
          description = "Defines the Thanos sidecar's configuration file to upload TSDB blocks to object storage.\n\nMore info: https://thanos.io/tip/thanos/storage.md/\n\nThis field takes precedence over objectStorageConfig.";
          type = types.nullOr types.str;
        };
        "readyTimeout" = mkOption {
          description = "ReadyTimeout is the maximum time that the Thanos sidecar will wait for\nPrometheus to start.";
          type = types.nullOr types.str;
        };
        "resources" = mkOption {
          description = "Defines the resources requests and limits of the Thanos sidecar.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosResources");
        };
        "sha" = mkOption {
          description = "Deprecated: use 'image' instead.  The image digest can be specified as part of the image name.";
          type = types.nullOr types.str;
        };
        "tag" = mkOption {
          description = "Deprecated: use 'image' instead. The image's tag can be specified as as part of the image name.";
          type = types.nullOr types.str;
        };
        "tracingConfig" = mkOption {
          description = "Defines the tracing configuration for the Thanos sidecar.\n\n`tracingConfigFile` takes precedence over this field.\n\nMore info: https://thanos.io/tip/thanos/tracing.md/\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosTracingConfig");
        };
        "tracingConfigFile" = mkOption {
          description = "Defines the tracing configuration file for the Thanos sidecar.\n\nThis field takes precedence over `tracingConfig`.\n\nMore info: https://thanos.io/tip/thanos/tracing.md/\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr types.str;
        };
        "version" = mkOption {
          description = "Version of Thanos being deployed. The operator uses this information\nto generate the Prometheus StatefulSet + configuration files.\n\nIf not specified, the operator assumes the latest upstream release of\nThanos available at the time when the version of the operator was\nreleased.";
          type = types.nullOr types.str;
        };
        "volumeMounts" = mkOption {
          description = "VolumeMounts allows configuration of additional VolumeMounts for Thanos.\nVolumeMounts specified will be appended to other VolumeMounts in the\n'thanos-sidecar' container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecThanosVolumeMounts"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
      };

      config = {
        "additionalArgs" = mkOverride 1002 null;
        "baseImage" = mkOverride 1002 null;
        "blockSize" = mkOverride 1002 null;
        "getConfigInterval" = mkOverride 1002 null;
        "getConfigTimeout" = mkOverride 1002 null;
        "grpcListenLocal" = mkOverride 1002 null;
        "grpcServerTlsConfig" = mkOverride 1002 null;
        "httpListenLocal" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "listenLocal" = mkOverride 1002 null;
        "logFormat" = mkOverride 1002 null;
        "logLevel" = mkOverride 1002 null;
        "minTime" = mkOverride 1002 null;
        "objectStorageConfig" = mkOverride 1002 null;
        "objectStorageConfigFile" = mkOverride 1002 null;
        "readyTimeout" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "sha" = mkOverride 1002 null;
        "tag" = mkOverride 1002 null;
        "tracingConfig" = mkOverride 1002 null;
        "tracingConfigFile" = mkOverride 1002 null;
        "version" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosAdditionalArgs" = {
      options = {
        "name" = mkOption {
          description = "Name of the argument, e.g. \"scrape.discovery-reload-interval\".";
          type = types.str;
        };
        "value" = mkOption {
          description = "Argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCa"
          );
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosGrpcServerTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosObjectStorageConfig" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.PrometheusSpecThanosResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosTracingConfig" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecThanosVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTolerations" = {
      options = {
        "effect" = mkOption {
          description = "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.";
          type = types.nullOr types.str;
        };
        "key" = mkOption {
          description = "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.";
          type = types.nullOr types.str;
        };
        "operator" = mkOption {
          description = "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.";
          type = types.nullOr types.str;
        };
        "tolerationSeconds" = mkOption {
          description = "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.";
          type = types.nullOr types.int;
        };
        "value" = mkOption {
          description = "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "effect" = mkOverride 1002 null;
        "key" = mkOverride 1002 null;
        "operator" = mkOverride 1002 null;
        "tolerationSeconds" = mkOverride 1002 null;
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTopologySpreadConstraints" = {
      options = {
        "additionalLabelSelectors" = mkOption {
          description = "Defines what Prometheus Operator managed labels should be added to labelSelector on the topologySpreadConstraint.";
          type = types.nullOr types.str;
        };
        "labelSelector" = mkOption {
          description = "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTopologySpreadConstraintsLabelSelector"
          );
        };
        "matchLabelKeys" = mkOption {
          description = "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).";
          type = types.nullOr (types.listOf types.str);
        };
        "maxSkew" = mkOption {
          description = "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |   P   |\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.";
          type = types.int;
        };
        "minDomains" = mkOption {
          description = "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |  P P  |\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.";
          type = types.nullOr types.int;
        };
        "nodeAffinityPolicy" = mkOption {
          description = "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.";
          type = types.nullOr types.str;
        };
        "nodeTaintsPolicy" = mkOption {
          description = "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.";
          type = types.nullOr types.str;
        };
        "topologyKey" = mkOption {
          description = "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each <key, value> as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.";
          type = types.str;
        };
        "whenUnsatisfiable" = mkOption {
          description = "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.";
          type = types.str;
        };
      };

      config = {
        "additionalLabelSelectors" = mkOverride 1002 null;
        "labelSelector" = mkOverride 1002 null;
        "matchLabelKeys" = mkOverride 1002 null;
        "minDomains" = mkOverride 1002 null;
        "nodeAffinityPolicy" = mkOverride 1002 null;
        "nodeTaintsPolicy" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTopologySpreadConstraintsLabelSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTopologySpreadConstraintsLabelSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTopologySpreadConstraintsLabelSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfig" = {
      options = {
        "clientType" = mkOption {
          description = "Client used to export the traces. Supported values are `http` or `grpc`.";
          type = types.nullOr types.str;
        };
        "compression" = mkOption {
          description = "Compression key for supported compression types. The only supported value is `gzip`.";
          type = types.nullOr types.str;
        };
        "endpoint" = mkOption {
          description = "Endpoint to send the traces to. Should be provided in format <host>:<port>.";
          type = types.str;
        };
        "headers" = mkOption {
          description = "Key-value pairs to be used as headers associated with gRPC or HTTP requests.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "insecure" = mkOption {
          description = "If disabled, the client will use a secure connection.";
          type = types.nullOr types.bool;
        };
        "samplingFraction" = mkOption {
          description = "Sets the probability a given trace will be sampled. Must be a float from 0 through 1.";
          type = types.nullOr (types.either types.int types.str);
        };
        "timeout" = mkOption {
          description = "Maximum time the exporter will wait for each batch export.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use when sending traces.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfig");
        };
      };

      config = {
        "clientType" = mkOverride 1002 null;
        "compression" = mkOverride 1002 null;
        "headers" = mkOverride 1002 null;
        "insecure" = mkOverride 1002 null;
        "samplingFraction" = mkOverride 1002 null;
        "timeout" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCa");
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTracingConfigTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecTsdb" = {
      options = {
        "outOfOrderTimeWindow" = mkOption {
          description = "Configures how old an out-of-order/out-of-bounds sample can be with\nrespect to the TSDB max time.\n\nAn out-of-order/out-of-bounds sample is ingested into the TSDB as long as\nthe timestamp of the sample is >= (TSDB.MaxTime - outOfOrderTimeWindow).\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.\n\nIt requires Prometheus >= v2.39.0 or PrometheusAgent >= v2.54.0.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "outOfOrderTimeWindow" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumes" = {
      options = {
        "awsElasticBlockStore" = mkOption {
          description = "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree\nawsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesAwsElasticBlockStore"
          );
        };
        "azureDisk" = mkOption {
          description = "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\nDeprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type\nare redirected to the disk.csi.azure.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesAzureDisk");
        };
        "azureFile" = mkOption {
          description = "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\nDeprecated: AzureFile is deprecated. All operations for the in-tree azureFile type\nare redirected to the file.csi.azure.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesAzureFile");
        };
        "cephfs" = mkOption {
          description = "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.\nDeprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesCephfs");
        };
        "cinder" = mkOption {
          description = "cinder represents a cinder volume attached and mounted on kubelets host machine.\nDeprecated: Cinder is deprecated. All operations for the in-tree cinder type\nare redirected to the cinder.csi.openstack.org CSI driver.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesCinder");
        };
        "configMap" = mkOption {
          description = "configMap represents a configMap that should populate this volume";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesConfigMap");
        };
        "csi" = mkOption {
          description = "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesCsi");
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI represents downward API about the pod that should populate this volume";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPI");
        };
        "emptyDir" = mkOption {
          description = "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEmptyDir");
        };
        "ephemeral" = mkOption {
          description = "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeral");
        };
        "fc" = mkOption {
          description = "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesFc");
        };
        "flexVolume" = mkOption {
          description = "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\nDeprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesFlexVolume");
        };
        "flocker" = mkOption {
          description = "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.\nDeprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesFlocker");
        };
        "gcePersistentDisk" = mkOption {
          description = "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: GCEPersistentDisk is deprecated. All operations for the in-tree\ngcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesGcePersistentDisk");
        };
        "gitRepo" = mkOption {
          description = "gitRepo represents a git repository at a particular revision.\nDeprecated: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesGitRepo");
        };
        "glusterfs" = mkOption {
          description = "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nDeprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesGlusterfs");
        };
        "hostPath" = mkOption {
          description = "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesHostPath");
        };
        "image" = mkOption {
          description = "image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.\nThe volume is resolved at pod startup depending on which PullPolicy value is provided:\n\n- Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\n- Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\n- IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\n\nThe volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.\nA failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.\nThe types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.\nThe OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.\nThe volume will be mounted read-only (ro) and non-executable files (noexec).\nSub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.\nThe field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesImage");
        };
        "iscsi" = mkOption {
          description = "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesIscsi");
        };
        "name" = mkOption {
          description = "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.str;
        };
        "nfs" = mkOption {
          description = "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesNfs");
        };
        "persistentVolumeClaim" = mkOption {
          description = "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesPersistentVolumeClaim"
          );
        };
        "photonPersistentDisk" = mkOption {
          description = "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.\nDeprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesPhotonPersistentDisk"
          );
        };
        "portworxVolume" = mkOption {
          description = "portworxVolume represents a portworx volume attached and mounted on kubelets host machine.\nDeprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type\nare redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate\nis on.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesPortworxVolume");
        };
        "projected" = mkOption {
          description = "projected items for all in one resources secrets, configmaps, and downward API";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjected");
        };
        "quobyte" = mkOption {
          description = "quobyte represents a Quobyte mount on the host that shares a pod's lifetime.\nDeprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesQuobyte");
        };
        "rbd" = mkOption {
          description = "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nDeprecated: RBD is deprecated and the in-tree rbd type is no longer supported.\nMore info: https://examples.k8s.io/volumes/rbd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesRbd");
        };
        "scaleIO" = mkOption {
          description = "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\nDeprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesScaleIO");
        };
        "secret" = mkOption {
          description = "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesSecret");
        };
        "storageos" = mkOption {
          description = "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\nDeprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesStorageos");
        };
        "vsphereVolume" = mkOption {
          description = "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.\nDeprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type\nare redirected to the csi.vsphere.vmware.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesVsphereVolume");
        };
      };

      config = {
        "awsElasticBlockStore" = mkOverride 1002 null;
        "azureDisk" = mkOverride 1002 null;
        "azureFile" = mkOverride 1002 null;
        "cephfs" = mkOverride 1002 null;
        "cinder" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "csi" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "fc" = mkOverride 1002 null;
        "flexVolume" = mkOverride 1002 null;
        "flocker" = mkOverride 1002 null;
        "gcePersistentDisk" = mkOverride 1002 null;
        "gitRepo" = mkOverride 1002 null;
        "glusterfs" = mkOverride 1002 null;
        "hostPath" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "iscsi" = mkOverride 1002 null;
        "nfs" = mkOverride 1002 null;
        "persistentVolumeClaim" = mkOverride 1002 null;
        "photonPersistentDisk" = mkOverride 1002 null;
        "portworxVolume" = mkOverride 1002 null;
        "projected" = mkOverride 1002 null;
        "quobyte" = mkOverride 1002 null;
        "rbd" = mkOverride 1002 null;
        "scaleIO" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "storageos" = mkOverride 1002 null;
        "vsphereVolume" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesAwsElasticBlockStore" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesAzureDisk" = {
      options = {
        "cachingMode" = mkOption {
          description = "cachingMode is the Host Caching mode: None, Read Only, Read Write.";
          type = types.nullOr types.str;
        };
        "diskName" = mkOption {
          description = "diskName is the Name of the data disk in the blob storage";
          type = types.str;
        };
        "diskURI" = mkOption {
          description = "diskURI is the URI of data disk in the blob storage";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cachingMode" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesAzureFile" = {
      options = {
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the  name of secret that contains Azure Storage Account Name and Key";
          type = types.str;
        };
        "shareName" = mkOption {
          description = "shareName is the azure share Name";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesCephfs" = {
      options = {
        "monitors" = mkOption {
          description = "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "path" = mkOption {
          description = "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretFile" = mkOption {
          description = "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesCephfsSecretRef");
        };
        "user" = mkOption {
          description = "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "path" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretFile" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesCephfsSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesCinder" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesCinderSecretRef");
        };
        "volumeID" = mkOption {
          description = "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesCinderSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesConfigMap" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesConfigMapItems")
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesCsi" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.";
          type = types.nullOr types.str;
        };
        "nodePublishSecretRef" = mkOption {
          description = "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesCsiNodePublishSecretRef"
          );
        };
        "readOnly" = mkOption {
          description = "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).";
          type = types.nullOr types.bool;
        };
        "volumeAttributes" = mkOption {
          description = "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "nodePublishSecretRef" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "volumeAttributes" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesCsiNodePublishSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPI" = {
      options = {
        "defaultMode" = mkOption {
          description = "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "Items is a list of downward API volume file";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPIItems")
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPIItemsFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesDownwardAPIItemsResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesFc" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun is Optional: FC target lun number";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "targetWWNs" = mkOption {
          description = "targetWWNs is Optional: FC target worldwide names (WWNs)";
          type = types.nullOr (types.listOf types.str);
        };
        "wwids" = mkOption {
          description = "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "lun" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "targetWWNs" = mkOverride 1002 null;
        "wwids" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesFlexVolume" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the driver to use for this volume.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.";
          type = types.nullOr types.str;
        };
        "options" = mkOption {
          description = "options is Optional: this field holds extra command options if any.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesFlexVolumeSecretRef"
          );
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesFlexVolumeSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesFlocker" = {
      options = {
        "datasetName" = mkOption {
          description = "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as deprecated";
          type = types.nullOr types.str;
        };
        "datasetUUID" = mkOption {
          description = "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset";
          type = types.nullOr types.str;
        };
      };

      config = {
        "datasetName" = mkOverride 1002 null;
        "datasetUUID" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesGcePersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.int;
        };
        "pdName" = mkOption {
          description = "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesGitRepo" = {
      options = {
        "directory" = mkOption {
          description = "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.";
          type = types.nullOr types.str;
        };
        "repository" = mkOption {
          description = "repository is the URL";
          type = types.str;
        };
        "revision" = mkOption {
          description = "revision is the commit hash for the specified revision.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "directory" = mkOverride 1002 null;
        "revision" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesGlusterfs" = {
      options = {
        "endpoints" = mkOption {
          description = "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "path" = mkOption {
          description = "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesHostPath" = {
      options = {
        "path" = mkOption {
          description = "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.str;
        };
        "type" = mkOption {
          description = "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr types.str;
        };
      };

      config = {
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesImage" = {
      options = {
        "pullPolicy" = mkOption {
          description = "Policy for pulling OCI objects. Possible values are:\nAlways: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\nNever: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\nIfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.";
          type = types.nullOr types.str;
        };
        "reference" = mkOption {
          description = "Required: Image or artifact reference to be used.\nBehaves in the same way as pod.spec.containers[*].image.\nPull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "pullPolicy" = mkOverride 1002 null;
        "reference" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesIscsi" = {
      options = {
        "chapAuthDiscovery" = mkOption {
          description = "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication";
          type = types.nullOr types.bool;
        };
        "chapAuthSession" = mkOption {
          description = "chapAuthSession defines whether support iSCSI Session CHAP authentication";
          type = types.nullOr types.bool;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi";
          type = types.nullOr types.str;
        };
        "initiatorName" = mkOption {
          description = "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.";
          type = types.nullOr types.str;
        };
        "iqn" = mkOption {
          description = "iqn is the target iSCSI Qualified Name.";
          type = types.str;
        };
        "iscsiInterface" = mkOption {
          description = "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun represents iSCSI Target Lun number.";
          type = types.int;
        };
        "portals" = mkOption {
          description = "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.nullOr (types.listOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is the CHAP Secret for iSCSI target and initiator authentication";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesIscsiSecretRef");
        };
        "targetPortal" = mkOption {
          description = "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.str;
        };
      };

      config = {
        "chapAuthDiscovery" = mkOverride 1002 null;
        "chapAuthSession" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "initiatorName" = mkOverride 1002 null;
        "iscsiInterface" = mkOverride 1002 null;
        "portals" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesIscsiSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesNfs" = {
      options = {
        "path" = mkOption {
          description = "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr types.bool;
        };
        "server" = mkOption {
          description = "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesPersistentVolumeClaim" = {
      options = {
        "claimName" = mkOption {
          description = "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesPhotonPersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "pdID" = mkOption {
          description = "pdID is the ID that identifies Photon Controller persistent disk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesPortworxVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID uniquely identifies a Portworx volume";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjected" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "sources" = mkOption {
          description = "sources is the list of volume projections. Each entry in this list\nhandles one source.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSources")
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "sources" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSources" = {
      options = {
        "clusterTrustBundle" = mkOption {
          description = "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesClusterTrustBundle"
          );
        };
        "configMap" = mkOption {
          description = "configMap information about the configMap data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesConfigMap"
          );
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI information about the downwardAPI data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPI"
          );
        };
        "secret" = mkOption {
          description = "secret information about the secret data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesSecret"
          );
        };
        "serviceAccountToken" = mkOption {
          description = "serviceAccountToken is information about the serviceAccountToken data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesServiceAccountToken"
          );
        };
      };

      config = {
        "clusterTrustBundle" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "serviceAccountToken" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesClusterTrustBundle" = {
      options = {
        "labelSelector" = mkOption {
          description = "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector"
          );
        };
        "name" = mkOption {
          description = "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.";
          type = types.nullOr types.bool;
        };
        "path" = mkOption {
          description = "Relative path from the volume root to write the bundle.";
          type = types.str;
        };
        "signerName" = mkOption {
          description = "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "labelSelector" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "signerName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesConfigMap" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesConfigMapItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPI" = {
      options = {
        "items" = mkOption {
          description = "Items is a list of DownwardAPIVolume file";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPIItems"
            )
          );
        };
      };

      config = {
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesSecret" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesSecretItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesProjectedSourcesServiceAccountToken" = {
      options = {
        "audience" = mkOption {
          description = "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.";
          type = types.nullOr types.str;
        };
        "expirationSeconds" = mkOption {
          description = "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the path relative to the mount point of the file to project the\ntoken into.";
          type = types.str;
        };
      };

      config = {
        "audience" = mkOverride 1002 null;
        "expirationSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesQuobyte" = {
      options = {
        "group" = mkOption {
          description = "group to map volume access to\nDefault is no group";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "registry" = mkOption {
          description = "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes";
          type = types.str;
        };
        "tenant" = mkOption {
          description = "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "user to map volume access to\nDefaults to serivceaccount user";
          type = types.nullOr types.str;
        };
        "volume" = mkOption {
          description = "volume is a string that references an already created Quobyte volume by name.";
          type = types.str;
        };
      };

      config = {
        "group" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "tenant" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesRbd" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd";
          type = types.nullOr types.str;
        };
        "image" = mkOption {
          description = "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.str;
        };
        "keyring" = mkOption {
          description = "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "monitors" = mkOption {
          description = "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "pool" = mkOption {
          description = "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesRbdSecretRef");
        };
        "user" = mkOption {
          description = "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "keyring" = mkOverride 1002 null;
        "pool" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesRbdSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesScaleIO" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".";
          type = types.nullOr types.str;
        };
        "gateway" = mkOption {
          description = "gateway is the host address of the ScaleIO API Gateway.";
          type = types.str;
        };
        "protectionDomain" = mkOption {
          description = "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.";
          type = submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesScaleIOSecretRef";
        };
        "sslEnabled" = mkOption {
          description = "sslEnabled Flag enable/disable SSL communication with Gateway, default false";
          type = types.nullOr types.bool;
        };
        "storageMode" = mkOption {
          description = "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.";
          type = types.nullOr types.str;
        };
        "storagePool" = mkOption {
          description = "storagePool is the ScaleIO Storage Pool associated with the protection domain.";
          type = types.nullOr types.str;
        };
        "system" = mkOption {
          description = "system is the name of the storage system as configured in ScaleIO.";
          type = types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "protectionDomain" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "sslEnabled" = mkOverride 1002 null;
        "storageMode" = mkOverride 1002 null;
        "storagePool" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesScaleIOSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesSecret" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesSecretItems")
          );
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its keys must be defined";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr types.str;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "secretName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesStorageos" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecVolumesStorageosSecretRef"
          );
        };
        "volumeName" = mkOption {
          description = "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.";
          type = types.nullOr types.str;
        };
        "volumeNamespace" = mkOption {
          description = "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
        "volumeNamespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesStorageosSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecVolumesVsphereVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "storagePolicyID" = mkOption {
          description = "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.";
          type = types.nullOr types.str;
        };
        "storagePolicyName" = mkOption {
          description = "storagePolicyName is the storage Policy Based Management (SPBM) profile name.";
          type = types.nullOr types.str;
        };
        "volumePath" = mkOption {
          description = "volumePath is the path that identifies vSphere volume vmdk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "storagePolicyID" = mkOverride 1002 null;
        "storagePolicyName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWeb" = {
      options = {
        "httpConfig" = mkOption {
          description = "Defines HTTP parameters for web server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebHttpConfig");
        };
        "maxConnections" = mkOption {
          description = "Defines the maximum number of simultaneous connections\nA zero value means that Prometheus doesn't accept any incoming connection.";
          type = types.nullOr types.int;
        };
        "pageTitle" = mkOption {
          description = "The prometheus web page title.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "Defines the TLS parameters for HTTPS.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfig");
        };
      };

      config = {
        "httpConfig" = mkOverride 1002 null;
        "maxConnections" = mkOverride 1002 null;
        "pageTitle" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebHttpConfig" = {
      options = {
        "headers" = mkOption {
          description = "List of headers that can be added to HTTP responses.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebHttpConfigHeaders");
        };
        "http2" = mkOption {
          description = "Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.\nWhen TLSConfig is not configured, HTTP/2 will be disabled.\nWhenever the value of the field changes, a rolling update will be triggered.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "headers" = mkOverride 1002 null;
        "http2" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebHttpConfigHeaders" = {
      options = {
        "contentSecurityPolicy" = mkOption {
          description = "Set the Content-Security-Policy header to HTTP responses.\nUnset if blank.";
          type = types.nullOr types.str;
        };
        "strictTransportSecurity" = mkOption {
          description = "Set the Strict-Transport-Security header to HTTP responses.\nUnset if blank.\nPlease make sure that you use this with care as this header might force\nbrowsers to load Prometheus and the other applications hosted on the same\ndomain and subdomains over HTTPS.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security";
          type = types.nullOr types.str;
        };
        "xContentTypeOptions" = mkOption {
          description = "Set the X-Content-Type-Options header to HTTP responses.\nUnset if blank. Accepted value is nosniff.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options";
          type = types.nullOr types.str;
        };
        "xFrameOptions" = mkOption {
          description = "Set the X-Frame-Options header to HTTP responses.\nUnset if blank. Accepted values are deny and sameorigin.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options";
          type = types.nullOr types.str;
        };
        "xXSSProtection" = mkOption {
          description = "Set the X-XSS-Protection header to all responses.\nUnset if blank.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection";
          type = types.nullOr types.str;
        };
      };

      config = {
        "contentSecurityPolicy" = mkOverride 1002 null;
        "strictTransportSecurity" = mkOverride 1002 null;
        "xContentTypeOptions" = mkOverride 1002 null;
        "xFrameOptions" = mkOverride 1002 null;
        "xXSSProtection" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfig" = {
      options = {
        "cert" = mkOption {
          description = "Secret or ConfigMap containing the TLS certificate for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `certFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigCert");
        };
        "certFile" = mkOption {
          description = "Path to the TLS certificate file in the container for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `cert`.";
          type = types.nullOr types.str;
        };
        "cipherSuites" = mkOption {
          description = "List of supported cipher suites for TLS versions up to TLS 1.2.\n\nIf not defined, the Go default cipher suites are used.\nAvailable cipher suites are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#pkg-constants";
          type = types.nullOr (types.listOf types.str);
        };
        "clientAuthType" = mkOption {
          description = "The server policy for client TLS authentication.\n\nFor more detail on clientAuth options:\nhttps://golang.org/pkg/crypto/tls/#ClientAuthType";
          type = types.nullOr types.str;
        };
        "clientCAFile" = mkOption {
          description = "Path to the CA certificate file for client certificate authentication to\nthe server.\n\nIt is mutually exclusive with `client_ca`.";
          type = types.nullOr types.str;
        };
        "client_ca" = mkOption {
          description = "Secret or ConfigMap containing the CA certificate for client certificate\nauthentication to the server.\n\nIt is mutually exclusive with `clientCAFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigClient_ca");
        };
        "curvePreferences" = mkOption {
          description = "Elliptic curves that will be used in an ECDHE handshake, in preference\norder.\n\nAvailable curves are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#CurveID";
          type = types.nullOr (types.listOf types.str);
        };
        "keyFile" = mkOption {
          description = "Path to the TLS private key file in the container for the web server.\n\nIf defined, either `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keySecret`.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the TLS private key for the web server.\n\nEither `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keyFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigKeySecret");
        };
        "maxVersion" = mkOption {
          description = "Maximum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "preferServerCipherSuites" = mkOption {
          description = "Controls whether the server selects the client's most preferred cipher\nsuite, or the server's most preferred cipher suite.\n\nIf true then the server's preference, as expressed in\nthe order of elements in cipherSuites, is used.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "cipherSuites" = mkOverride 1002 null;
        "clientAuthType" = mkOverride 1002 null;
        "clientCAFile" = mkOverride 1002 null;
        "client_ca" = mkOverride 1002 null;
        "curvePreferences" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "preferServerCipherSuites" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigCertSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigClient_ca" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigClient_caConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigClient_caSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigClient_caConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigClient_caSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusSpecWebTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusStatus" = {
      options = {
        "availableReplicas" = mkOption {
          description = "Total number of available pods (ready for at least minReadySeconds)\ntargeted by this Prometheus deployment.";
          type = types.int;
        };
        "conditions" = mkOption {
          description = "The current state of the Prometheus deployment.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusStatusConditions")
          );
        };
        "paused" = mkOption {
          description = "Represents whether any actions on the underlying managed objects are\nbeing performed. Only delete actions will be performed.";
          type = types.bool;
        };
        "replicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this Prometheus deployment\n(their labels match the selector).";
          type = types.int;
        };
        "selector" = mkOption {
          description = "The selector used to match the pods targeted by this Prometheus resource.";
          type = types.nullOr types.str;
        };
        "shardStatuses" = mkOption {
          description = "The list has one entry per shard. Each entry provides a summary of the shard status.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.PrometheusStatusShardStatuses")
          );
        };
        "shards" = mkOption {
          description = "Shards is the most recently observed number of shards.";
          type = types.nullOr types.int;
        };
        "unavailableReplicas" = mkOption {
          description = "Total number of unavailable pods targeted by this Prometheus deployment.";
          type = types.int;
        };
        "updatedReplicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this Prometheus deployment\nthat have the desired version spec.";
          type = types.int;
        };
      };

      config = {
        "conditions" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "shardStatuses" = mkOverride 1002 null;
        "shards" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusStatusConditions" = {
      options = {
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time of the last update to the current status property.";
          type = types.str;
        };
        "message" = mkOption {
          description = "Human-readable message indicating details for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "observedGeneration" = mkOption {
          description = "ObservedGeneration represents the .metadata.generation that the\ncondition was set based upon. For instance, if `.metadata.generation` is\ncurrently 12, but the `.status.conditions[].observedGeneration` is 9, the\ncondition is out of date with respect to the current state of the\ninstance.";
          type = types.nullOr types.int;
        };
        "reason" = mkOption {
          description = "Reason for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status of the condition.";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type of the condition being reported.";
          type = types.str;
        };
      };

      config = {
        "message" = mkOverride 1002 null;
        "observedGeneration" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.PrometheusStatusShardStatuses" = {
      options = {
        "availableReplicas" = mkOption {
          description = "Total number of available pods (ready for at least minReadySeconds)\ntargeted by this shard.";
          type = types.int;
        };
        "replicas" = mkOption {
          description = "Total number of pods targeted by this shard.";
          type = types.int;
        };
        "shardID" = mkOption {
          description = "Identifier of the shard.";
          type = types.str;
        };
        "unavailableReplicas" = mkOption {
          description = "Total number of unavailable pods targeted by this shard.";
          type = types.int;
        };
        "updatedReplicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this shard\nthat have the desired spec.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ServiceMonitor" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of desired Service selection for target discovery by\nPrometheus.";
          type = submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpec";
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpec" = {
      options = {
        "attachMetadata" = mkOption {
          description = "`attachMetadata` defines additional metadata which is added to the\ndiscovered targets.\n\nIt requires Prometheus >= v2.37.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecAttachMetadata");
        };
        "bodySizeLimit" = mkOption {
          description = "When defined, bodySizeLimit specifies a job level limit on the size\nof uncompressed response body that will be accepted by Prometheus.\n\nIt requires Prometheus >= v2.28.0.";
          type = types.nullOr types.str;
        };
        "convertClassicHistogramsToNHCB" = mkOption {
          description = "Whether to convert all scraped classic histograms into a native histogram with custom buckets.\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.bool;
        };
        "endpoints" = mkOption {
          description = "List of endpoints part of this ServiceMonitor.\nDefines how to scrape metrics from Kubernetes [Endpoints](https://kubernetes.io/docs/concepts/services-networking/service/#endpoints) objects.\nIn most cases, an Endpoints object is backed by a Kubernetes [Service](https://kubernetes.io/docs/concepts/services-networking/service/) object with the same name and labels.";
          type = types.listOf (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpoints");
        };
        "fallbackScrapeProtocol" = mkOption {
          description = "The protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
        "jobLabel" = mkOption {
          description = "`jobLabel` selects the label from the associated Kubernetes `Service`\nobject which will be used as the `job` label for all metrics.\n\nFor example if `jobLabel` is set to `foo` and the Kubernetes `Service`\nobject is labeled with `foo: bar`, then Prometheus adds the `job=\"bar\"`\nlabel to all ingested metrics.\n\nIf the value of this field is empty or if the label doesn't exist for\nthe given Service, the `job` label of the metrics defaults to the name\nof the associated Kubernetes `Service`.";
          type = types.nullOr types.str;
        };
        "keepDroppedTargets" = mkOption {
          description = "Per-scrape limit on the number of targets dropped by relabeling\nthat will be kept in memory. 0 means no limit.\n\nIt requires Prometheus >= v2.47.0.";
          type = types.nullOr types.int;
        };
        "labelLimit" = mkOption {
          description = "Per-scrape limit on number of labels that will be accepted for a sample.\n\nIt requires Prometheus >= v2.27.0.";
          type = types.nullOr types.int;
        };
        "labelNameLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels name that will be accepted for a sample.\n\nIt requires Prometheus >= v2.27.0.";
          type = types.nullOr types.int;
        };
        "labelValueLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels value that will be accepted for a sample.\n\nIt requires Prometheus >= v2.27.0.";
          type = types.nullOr types.int;
        };
        "namespaceSelector" = mkOption {
          description = "`namespaceSelector` defines in which namespace(s) Prometheus should discover the services.\nBy default, the services are discovered in the same namespace as the `ServiceMonitor` object but it is possible to select pods across different/all namespaces.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecNamespaceSelector");
        };
        "nativeHistogramBucketLimit" = mkOption {
          description = "If there are more than this many buckets in a native histogram,\nbuckets will be merged to stay within the limit.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.int;
        };
        "nativeHistogramMinBucketFactor" = mkOption {
          description = "If the growth factor of one bucket to the next is smaller than this,\nbuckets will be merged to increase the factor sufficiently.\nIt requires Prometheus >= v2.50.0.";
          type = types.nullOr (types.either types.int types.str);
        };
        "podTargetLabels" = mkOption {
          description = "`podTargetLabels` defines the labels which are transferred from the\nassociated Kubernetes `Pod` object onto the ingested metrics.";
          type = types.nullOr (types.listOf types.str);
        };
        "sampleLimit" = mkOption {
          description = "`sampleLimit` defines a per-scrape limit on the number of scraped samples\nthat will be accepted.";
          type = types.nullOr types.int;
        };
        "scrapeClass" = mkOption {
          description = "The scrape class to apply.";
          type = types.nullOr types.str;
        };
        "scrapeClassicHistograms" = mkOption {
          description = "Whether to scrape a classic histogram that is also exposed as a native histogram.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.bool;
        };
        "scrapeProtocols" = mkOption {
          description = "`scrapeProtocols` defines the protocols to negotiate during a scrape. It tells clients the\nprotocols supported by Prometheus in order of preference (from most to least preferred).\n\nIf unset, Prometheus uses its default value.\n\nIt requires Prometheus >= v2.49.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "selector" = mkOption {
          description = "Label selector to select the Kubernetes `Endpoints` objects to scrape metrics from.";
          type = submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecSelector";
        };
        "selectorMechanism" = mkOption {
          description = "Mechanism used to select the endpoints to scrape.\nBy default, the selection process relies on relabel configurations to filter the discovered targets.\nAlternatively, you can opt in for role selectors, which may offer better efficiency in large clusters.\nWhich strategy is best for your use case needs to be carefully evaluated.\n\nIt requires Prometheus >= v2.17.0.";
          type = types.nullOr types.str;
        };
        "targetLabels" = mkOption {
          description = "`targetLabels` defines the labels which are transferred from the\nassociated Kubernetes `Service` object onto the ingested metrics.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLimit" = mkOption {
          description = "`targetLimit` defines a limit on the number of scraped targets that will\nbe accepted.";
          type = types.nullOr types.int;
        };
      };

      config = {
        "attachMetadata" = mkOverride 1002 null;
        "bodySizeLimit" = mkOverride 1002 null;
        "convertClassicHistogramsToNHCB" = mkOverride 1002 null;
        "fallbackScrapeProtocol" = mkOverride 1002 null;
        "jobLabel" = mkOverride 1002 null;
        "keepDroppedTargets" = mkOverride 1002 null;
        "labelLimit" = mkOverride 1002 null;
        "labelNameLengthLimit" = mkOverride 1002 null;
        "labelValueLengthLimit" = mkOverride 1002 null;
        "namespaceSelector" = mkOverride 1002 null;
        "nativeHistogramBucketLimit" = mkOverride 1002 null;
        "nativeHistogramMinBucketFactor" = mkOverride 1002 null;
        "podTargetLabels" = mkOverride 1002 null;
        "sampleLimit" = mkOverride 1002 null;
        "scrapeClass" = mkOverride 1002 null;
        "scrapeClassicHistograms" = mkOverride 1002 null;
        "scrapeProtocols" = mkOverride 1002 null;
        "selectorMechanism" = mkOverride 1002 null;
        "targetLabels" = mkOverride 1002 null;
        "targetLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecAttachMetadata" = {
      options = {
        "node" = mkOption {
          description = "When set to true, Prometheus attaches node metadata to the discovered\ntargets.\n\nThe Prometheus service account must have the `list` and `watch`\npermissions on the `Nodes` objects.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "node" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpoints" = {
      options = {
        "authorization" = mkOption {
          description = "`authorization` configures the Authorization header credentials to use when\nscraping the target.\n\nCannot be set at the same time as `basicAuth`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "`basicAuth` configures the Basic Authentication credentials to use when\nscraping the target.\n\nCannot be set at the same time as `authorization`, or `oauth2`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBasicAuth");
        };
        "bearerTokenFile" = mkOption {
          description = "File to read bearer token for scraping the target.\n\nDeprecated: use `authorization` instead.";
          type = types.nullOr types.str;
        };
        "bearerTokenSecret" = mkOption {
          description = "`bearerTokenSecret` specifies a key of a Secret containing the bearer\ntoken for scraping targets. The secret needs to be in the same namespace\nas the ServiceMonitor object and readable by the Prometheus Operator.\n\nDeprecated: use `authorization` instead.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBearerTokenSecret"
          );
        };
        "enableHttp2" = mkOption {
          description = "`enableHttp2` can be used to disable HTTP2 when scraping the target.";
          type = types.nullOr types.bool;
        };
        "filterRunning" = mkOption {
          description = "When true, the pods which are not running (e.g. either in Failed or\nSucceeded state) are dropped during the target discovery.\n\nIf unset, the filtering is enabled.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "`followRedirects` defines whether the scrape requests should follow HTTP\n3xx redirects.";
          type = types.nullOr types.bool;
        };
        "honorLabels" = mkOption {
          description = "When true, `honorLabels` preserves the metric's labels when they collide\nwith the target's labels.";
          type = types.nullOr types.bool;
        };
        "honorTimestamps" = mkOption {
          description = "`honorTimestamps` controls whether Prometheus preserves the timestamps\nwhen exposed by the target.";
          type = types.nullOr types.bool;
        };
        "interval" = mkOption {
          description = "Interval at which Prometheus scrapes the metrics from the target.\n\nIf empty, Prometheus uses the global scrape interval.";
          type = types.nullOr types.str;
        };
        "metricRelabelings" = mkOption {
          description = "`metricRelabelings` configures the relabeling rules to apply to the\nsamples before ingestion.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsMetricRelabelings")
          );
        };
        "oauth2" = mkOption {
          description = "`oauth2` configures the OAuth2 settings to use when scraping the target.\n\nIt requires Prometheus >= 2.27.0.\n\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2");
        };
        "params" = mkOption {
          description = "params define optional HTTP URL parameters.";
          type = types.nullOr (types.loaOf types.str);
        };
        "path" = mkOption {
          description = "HTTP path from which to scrape for metrics.\n\nIf empty, Prometheus uses the default value (e.g. `/metrics`).";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name of the Service port which this endpoint refers to.\n\nIt takes precedence over `targetPort`.";
          type = types.nullOr types.str;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` configures the HTTP Proxy URL (e.g.\n\"http://proxyserver:2195\") to go through when scraping the target.";
          type = types.nullOr types.str;
        };
        "relabelings" = mkOption {
          description = "`relabelings` configures the relabeling rules to apply the target's\nmetadata labels.\n\nThe Operator automatically adds relabelings for a few standard Kubernetes fields.\n\nThe original scrape job's name is available via the `__tmp_prometheus_job_name` label.\n\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsRelabelings")
          );
        };
        "scheme" = mkOption {
          description = "HTTP scheme to use for scraping.\n\n`http` and `https` are the expected values unless you rewrite the\n`__scheme__` label via relabeling.\n\nIf empty, Prometheus uses the default value `http`.";
          type = types.nullOr types.str;
        };
        "scrapeTimeout" = mkOption {
          description = "Timeout after which Prometheus considers the scrape to be failed.\n\nIf empty, Prometheus uses the global scrape timeout unless it is less\nthan the target's scrape interval value in which the latter is used.\nThe value cannot be greater than the scrape interval otherwise the operator will reject the resource.";
          type = types.nullOr types.str;
        };
        "targetPort" = mkOption {
          description = "Name or number of the target port of the `Pod` object behind the\nService. The port must be specified with the container's port property.";
          type = types.nullOr (types.either types.int types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when scraping the target.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfig");
        };
        "trackTimestampsStaleness" = mkOption {
          description = "`trackTimestampsStaleness` defines whether Prometheus tracks staleness of\nthe metrics that have an explicit timestamp present in scraped data.\nHas no effect if `honorTimestamps` is false.\n\nIt requires Prometheus >= v2.48.0.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "bearerTokenSecret" = mkOverride 1002 null;
        "enableHttp2" = mkOverride 1002 null;
        "filterRunning" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "honorLabels" = mkOverride 1002 null;
        "honorTimestamps" = mkOverride 1002 null;
        "interval" = mkOverride 1002 null;
        "metricRelabelings" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "params" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "relabelings" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
        "scrapeTimeout" = mkOverride 1002 null;
        "targetPort" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "trackTimestampsStaleness" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsBearerTokenSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsMetricRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCa");
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecEndpointsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecNamespaceSelector" = {
      options = {
        "any" = mkOption {
          description = "Boolean describing whether all namespaces are selected in contrast to a\nlist restricting them.";
          type = types.nullOr types.bool;
        };
        "matchNames" = mkOption {
          description = "List of namespace names to select from.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "any" = mkOverride 1002 null;
        "matchNames" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ServiceMonitorSpecSelectorMatchExpressions")
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ServiceMonitorSpecSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRuler" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of the desired behavior of the ThanosRuler cluster. More info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpec";
        };
        "status" = mkOption {
          description = "Most recent observed status of the ThanosRuler cluster. Read-only.\nMore info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerStatus");
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpec" = {
      options = {
        "additionalArgs" = mkOption {
          description = "AdditionalArgs allows setting additional arguments for the ThanosRuler container.\nIt is intended for e.g. activating hidden flags which are not supported by\nthe dedicated configuration options yet. The arguments are passed as-is to the\nThanosRuler container which may cause issues if they are invalid or not supported\nby the given ThanosRuler version.\nIn case of an argument conflict (e.g. an argument which is already set by the\noperator itself) or when providing an invalid argument the reconciliation will\nfail and an error will be logged.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecAdditionalArgs" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "affinity" = mkOption {
          description = "If specified, the pod's scheduling constraints.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinity");
        };
        "alertDropLabels" = mkOption {
          description = "Configures the label names which should be dropped in Thanos Ruler\nalerts.\n\nThe replica label `thanos_ruler_replica` will always be dropped from the alerts.";
          type = types.nullOr (types.listOf types.str);
        };
        "alertQueryUrl" = mkOption {
          description = "The external Query URL the Thanos Ruler will set in the 'Source' field\nof all alerts.\nMaps to the '--alert.query-url' CLI arg.";
          type = types.nullOr types.str;
        };
        "alertRelabelConfigFile" = mkOption {
          description = "Configures the path to the alert relabeling configuration file.\n\nAlert relabel configuration must have the form as specified in the\nofficial Prometheus documentation:\nhttps://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs\n\nThe operator performs no validation of the configuration file.\n\nThis field takes precedence over `alertRelabelConfig`.";
          type = types.nullOr types.str;
        };
        "alertRelabelConfigs" = mkOption {
          description = "Configures alert relabeling in Thanos Ruler.\n\nAlert relabel configuration must have the form as specified in the\nofficial Prometheus documentation:\nhttps://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs\n\nThe operator performs no validation of the configuration.\n\n`alertRelabelConfigFile` takes precedence over this field.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAlertRelabelConfigs");
        };
        "alertmanagersConfig" = mkOption {
          description = "Configures the list of Alertmanager endpoints to send alerts to.\n\nThe configuration format is defined at https://thanos.io/tip/components/rule.md/#alertmanager.\n\nIt requires Thanos >= v0.10.0.\n\nThe operator performs no validation of the configuration.\n\nThis field takes precedence over `alertmanagersUrl`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAlertmanagersConfig");
        };
        "alertmanagersUrl" = mkOption {
          description = "Configures the list of Alertmanager endpoints to send alerts to.\n\nFor Thanos >= v0.10.0, it is recommended to use `alertmanagersConfig` instead.\n\n`alertmanagersConfig` takes precedence over this field.";
          type = types.nullOr (types.listOf types.str);
        };
        "containers" = mkOption {
          description = "Containers allows injecting additional containers or modifying operator generated\ncontainers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or\nto change the behavior of an operator generated container. Containers described here modify\nan operator generated container if they share the same name and modifications are done via a\nstrategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`.\nOverriding containers is entirely outside the scope of what the maintainers will support and by doing\nso, you accept that this behaviour may break at any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecContainers" "name" [ ]
          );
          apply = attrsToList;
        };
        "dnsConfig" = mkOption {
          description = "Defines the DNS configuration for the pods.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecDnsConfig");
        };
        "dnsPolicy" = mkOption {
          description = "Defines the DNS policy for the pods.";
          type = types.nullOr types.str;
        };
        "enableServiceLinks" = mkOption {
          description = "Indicates whether information about services should be injected into pod's environment variables";
          type = types.nullOr types.bool;
        };
        "enforcedNamespaceLabel" = mkOption {
          description = "EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert\nand metric that is user created. The label value will always be the namespace of the object that is\nbeing created.";
          type = types.nullOr types.str;
        };
        "evaluationInterval" = mkOption {
          description = "Interval between consecutive evaluations.";
          type = types.nullOr types.str;
        };
        "excludedFromEnforcement" = mkOption {
          description = "List of references to PrometheusRule objects\nto be excluded from enforcing a namespace label of origin.\nApplies only if enforcedNamespaceLabel set to true.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecExcludedFromEnforcement"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "externalPrefix" = mkOption {
          description = "The external URL the Thanos Ruler instances will be available under. This is\nnecessary to generate correct URLs. This is necessary if Thanos Ruler is not\nserved from root of a DNS name.";
          type = types.nullOr types.str;
        };
        "grpcServerTlsConfig" = mkOption {
          description = "GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads\nrecorded rule data.\nNote: Currently only the CAFile, CertFile, and KeyFile fields are supported.\nMaps to the '--grpc-server-tls-*' CLI args.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfig");
        };
        "hostAliases" = mkOption {
          description = "Pods' hostAliases configuration";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecHostAliases")
          );
        };
        "image" = mkOption {
          description = "Thanos container image URL.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy for the 'thanos', 'init-config-reloader' and 'config-reloader' containers.\nSee https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.";
          type = types.nullOr types.str;
        };
        "imagePullSecrets" = mkOption {
          description = "An optional list of references to secrets in the same namespace\nto use for pulling thanos images from registries\nsee http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecImagePullSecrets" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "initContainers" = mkOption {
          description = "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.\nfetch secrets for injection into the ThanosRuler configuration from external sources. Any\nerrors during the execution of an initContainer will lead to a restart of the Pod.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/\nUsing initContainers for any use case other then secret fetching is entirely outside the scope\nof what the maintainers will support and by doing so, you accept that this behaviour may break\nat any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecInitContainers" "name"
              [ ]
          );
          apply = attrsToList;
        };
        "labels" = mkOption {
          description = "Configures the external label pairs of the ThanosRuler resource.\n\nA default replica label `thanos_ruler_replica` will be always added as a\nlabel with the value of the pod's name.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "listenLocal" = mkOption {
          description = "ListenLocal makes the Thanos ruler listen on loopback, so that it\ndoes not bind against the Pod IP.";
          type = types.nullOr types.bool;
        };
        "logFormat" = mkOption {
          description = "Log format for ThanosRuler to be configured with.";
          type = types.nullOr types.str;
        };
        "logLevel" = mkOption {
          description = "Log level for ThanosRuler to be configured with.";
          type = types.nullOr types.str;
        };
        "minReadySeconds" = mkOption {
          description = "Minimum number of seconds for which a newly created pod should be ready\nwithout any of its container crashing for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\nThis is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.";
          type = types.nullOr types.int;
        };
        "nodeSelector" = mkOption {
          description = "Define which Nodes the Pods are scheduled on.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "objectStorageConfig" = mkOption {
          description = "Configures object storage.\n\nThe configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage\n\nThe operator performs no validation of the configuration.\n\n`objectStorageConfigFile` takes precedence over this field.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecObjectStorageConfig");
        };
        "objectStorageConfigFile" = mkOption {
          description = "Configures the path of the object storage configuration file.\n\nThe configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage\n\nThe operator performs no validation of the configuration file.\n\nThis field takes precedence over `objectStorageConfig`.";
          type = types.nullOr types.str;
        };
        "paused" = mkOption {
          description = "When a ThanosRuler deployment is paused, no actions except for deletion\nwill be performed on the underlying objects.";
          type = types.nullOr types.bool;
        };
        "podMetadata" = mkOption {
          description = "PodMetadata configures labels and annotations which are propagated to the ThanosRuler pods.\n\nThe following items are reserved and cannot be overridden:\n* \"app.kubernetes.io/name\" label, set to \"thanos-ruler\".\n* \"app.kubernetes.io/managed-by\" label, set to \"prometheus-operator\".\n* \"app.kubernetes.io/instance\" label, set to the name of the ThanosRuler instance.\n* \"thanos-ruler\" label, set to the name of the ThanosRuler instance.\n* \"kubectl.kubernetes.io/default-container\" annotation, set to \"thanos-ruler\".";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecPodMetadata");
        };
        "portName" = mkOption {
          description = "Port name used for the pods and governing service.\nDefaults to `web`.";
          type = types.nullOr types.str;
        };
        "priorityClassName" = mkOption {
          description = "Priority class assigned to the Pods";
          type = types.nullOr types.str;
        };
        "prometheusRulesExcludedFromEnforce" = mkOption {
          description = "PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing\nof adding namespace labels. Works only if enforcedNamespaceLabel set to true.\nMake sure both ruleNamespace and ruleName are set for each pair\nDeprecated: use excludedFromEnforcement instead.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecPrometheusRulesExcludedFromEnforce"
            )
          );
        };
        "queryConfig" = mkOption {
          description = "Configures the list of Thanos Query endpoints from which to query metrics.\n\nThe configuration format is defined at https://thanos.io/tip/components/rule.md/#query-api\n\nIt requires Thanos >= v0.11.0.\n\nThe operator performs no validation of the configuration.\n\nThis field takes precedence over `queryEndpoints`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecQueryConfig");
        };
        "queryEndpoints" = mkOption {
          description = "Configures the list of Thanos Query endpoints from which to query metrics.\n\nFor Thanos >= v0.11.0, it is recommended to use `queryConfig` instead.\n\n`queryConfig` takes precedence over this field.";
          type = types.nullOr (types.listOf types.str);
        };
        "remoteWrite" = mkOption {
          description = "Defines the list of remote write configurations.\n\nWhen the list isn't empty, the ruler is configured with stateless mode.\n\nIt requires Thanos >= 0.24.0.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWrite" "name" [ ]
          );
          apply = attrsToList;
        };
        "replicas" = mkOption {
          description = "Number of thanos ruler instances to deploy.";
          type = types.nullOr types.int;
        };
        "resources" = mkOption {
          description = "Resources defines the resource requirements for single Pods.\nIf not provided, no requests/limits will be set";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecResources");
        };
        "retention" = mkOption {
          description = "Time duration ThanosRuler shall retain data for. Default is '24h', and\nmust match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds\nseconds minutes hours days weeks years).\n\nThe field has no effect when remote-write is configured since the Ruler\noperates in stateless mode.";
          type = types.nullOr types.str;
        };
        "routePrefix" = mkOption {
          description = "The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.";
          type = types.nullOr types.str;
        };
        "ruleNamespaceSelector" = mkOption {
          description = "Namespaces to be selected for Rules discovery. If unspecified, only\nthe same namespace as the ThanosRuler object is in is used.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRuleNamespaceSelector");
        };
        "ruleSelector" = mkOption {
          description = "PrometheusRule objects to be selected for rule evaluation. An empty\nlabel selector matches all objects. A null label selector matches no\nobjects.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRuleSelector");
        };
        "securityContext" = mkOption {
          description = "SecurityContext holds pod-level security attributes and common container settings.\nThis defaults to the default PodSecurityContext.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContext");
        };
        "serviceAccountName" = mkOption {
          description = "ServiceAccountName is the name of the ServiceAccount to use to run the\nThanos Ruler Pods.";
          type = types.nullOr types.str;
        };
        "serviceName" = mkOption {
          description = "The name of the service name used by the underlying StatefulSet(s) as the governing service.\nIf defined, the Service  must be created before the ThanosRuler resource in the same namespace and it must define a selector that matches the pod labels.\nIf empty, the operator will create and manage a headless service named `thanos-ruler-operated` for ThanosRuler resources.\nWhen deploying multiple ThanosRuler resources in the same namespace, it is recommended to specify a different value for each.\nSee https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id for more details.";
          type = types.nullOr types.str;
        };
        "storage" = mkOption {
          description = "Storage spec to specify how storage shall be used.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorage");
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down) which may lead to data corruption.\n\nDefaults to 120 seconds.";
          type = types.nullOr types.int;
        };
        "tolerations" = mkOption {
          description = "If specified, the pod's tolerations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecTolerations")
          );
        };
        "topologySpreadConstraints" = mkOption {
          description = "If specified, the pod's topology spread constraints.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecTopologySpreadConstraints")
          );
        };
        "tracingConfig" = mkOption {
          description = "Configures tracing.\n\nThe configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.\n\nThe operator performs no validation of the configuration.\n\n`tracingConfigFile` takes precedence over this field.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecTracingConfig");
        };
        "tracingConfigFile" = mkOption {
          description = "Configures the path of the tracing configuration file.\n\nThe configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.\n\nThe operator performs no validation of the configuration file.\n\nThis field takes precedence over `tracingConfig`.";
          type = types.nullOr types.str;
        };
        "version" = mkOption {
          description = "Version of Thanos to be deployed.";
          type = types.nullOr types.str;
        };
        "volumeMounts" = mkOption {
          description = "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.\nVolumeMounts specified will be appended to other VolumeMounts in the ruler container,\nthat are generated as a result of StorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecVolumeMounts" "name" [ ]
          );
          apply = attrsToList;
        };
        "volumes" = mkOption {
          description = "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will\nbe appended to other volumes that are generated as a result of StorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecVolumes" "name" [ ]
          );
          apply = attrsToList;
        };
        "web" = mkOption {
          description = "Defines the configuration of the ThanosRuler web server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWeb");
        };
      };

      config = {
        "additionalArgs" = mkOverride 1002 null;
        "affinity" = mkOverride 1002 null;
        "alertDropLabels" = mkOverride 1002 null;
        "alertQueryUrl" = mkOverride 1002 null;
        "alertRelabelConfigFile" = mkOverride 1002 null;
        "alertRelabelConfigs" = mkOverride 1002 null;
        "alertmanagersConfig" = mkOverride 1002 null;
        "alertmanagersUrl" = mkOverride 1002 null;
        "containers" = mkOverride 1002 null;
        "dnsConfig" = mkOverride 1002 null;
        "dnsPolicy" = mkOverride 1002 null;
        "enableServiceLinks" = mkOverride 1002 null;
        "enforcedNamespaceLabel" = mkOverride 1002 null;
        "evaluationInterval" = mkOverride 1002 null;
        "excludedFromEnforcement" = mkOverride 1002 null;
        "externalPrefix" = mkOverride 1002 null;
        "grpcServerTlsConfig" = mkOverride 1002 null;
        "hostAliases" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "imagePullSecrets" = mkOverride 1002 null;
        "initContainers" = mkOverride 1002 null;
        "labels" = mkOverride 1002 null;
        "listenLocal" = mkOverride 1002 null;
        "logFormat" = mkOverride 1002 null;
        "logLevel" = mkOverride 1002 null;
        "minReadySeconds" = mkOverride 1002 null;
        "nodeSelector" = mkOverride 1002 null;
        "objectStorageConfig" = mkOverride 1002 null;
        "objectStorageConfigFile" = mkOverride 1002 null;
        "paused" = mkOverride 1002 null;
        "podMetadata" = mkOverride 1002 null;
        "portName" = mkOverride 1002 null;
        "priorityClassName" = mkOverride 1002 null;
        "prometheusRulesExcludedFromEnforce" = mkOverride 1002 null;
        "queryConfig" = mkOverride 1002 null;
        "queryEndpoints" = mkOverride 1002 null;
        "remoteWrite" = mkOverride 1002 null;
        "replicas" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "retention" = mkOverride 1002 null;
        "routePrefix" = mkOverride 1002 null;
        "ruleNamespaceSelector" = mkOverride 1002 null;
        "ruleSelector" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "serviceAccountName" = mkOverride 1002 null;
        "serviceName" = mkOverride 1002 null;
        "storage" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "tolerations" = mkOverride 1002 null;
        "topologySpreadConstraints" = mkOverride 1002 null;
        "tracingConfig" = mkOverride 1002 null;
        "tracingConfigFile" = mkOverride 1002 null;
        "version" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "volumes" = mkOverride 1002 null;
        "web" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecAdditionalArgs" = {
      options = {
        "name" = mkOption {
          description = "Name of the argument, e.g. \"scrape.discovery-reload-interval\".";
          type = types.str;
        };
        "value" = mkOption {
          description = "Argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinity" = {
      options = {
        "nodeAffinity" = mkOption {
          description = "Describes node affinity scheduling rules for the pod.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinity");
        };
        "podAffinity" = mkOption {
          description = "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinity");
        };
        "podAntiAffinity" = mkOption {
          description = "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinity");
        };
      };

      config = {
        "nodeAffinity" = mkOverride 1002 null;
        "podAffinity" = mkOverride 1002 null;
        "podAntiAffinity" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "preference" = mkOption {
            description = "A node selector term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference";
          };
          "weight" = mkOption {
            description = "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "nodeSelectorTerms" = mkOption {
            description = "Required. A list of node selector terms. The terms are ORed.";
            type = types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
            );
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecAlertRelabelConfigs" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecAlertmanagersConfig" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnv" "name" [
              "name"
            ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecycle");
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbe");
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecContainersPorts" "name"
              [
                "containerPort"
                "protocol"
              ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbe"
          );
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersResizePolicy")
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersResources");
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbe");
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFrom");
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecDnsConfig" = {
      options = {
        "nameservers" = mkOption {
          description = "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
        "options" = mkOption {
          description = "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nResolution options given in Options\nwill override those that appear in the base DNSPolicy.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecDnsConfigOptions" "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "searches" = mkOption {
          description = "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "nameservers" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "searches" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecDnsConfigOptions" = {
      options = {
        "name" = mkOption {
          description = "Name is required and must be unique.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value is optional.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecExcludedFromEnforcement" = {
      options = {
        "group" = mkOption {
          description = "Group of the referent. When not specified, it defaults to `monitoring.coreos.com`";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "Name of the referent. When not set, all resources in the namespace are matched.";
          type = types.nullOr types.str;
        };
        "namespace" = mkOption {
          description = "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/";
          type = types.str;
        };
        "resource" = mkOption {
          description = "Resource of the referent.";
          type = types.str;
        };
      };

      config = {
        "group" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCa");
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCert");
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecGrpcServerTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecHostAliases" = {
      options = {
        "hostnames" = mkOption {
          description = "Hostnames for the above IP address.";
          type = types.listOf types.str;
        };
        "ip" = mkOption {
          description = "IP address of the host file entry.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecImagePullSecrets" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnv"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecycle");
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbe"
          );
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersPorts"
              "name"
              [
                "containerPort"
                "protocol"
              ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbe"
          );
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersResizePolicy")
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersResources");
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbe"
          );
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFrom"
          );
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecInitContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecObjectStorageConfig" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecPodMetadata" = {
      options = {
        "annotations" = mkOption {
          description = "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations";
          type = types.nullOr (types.attrsOf types.str);
        };
        "labels" = mkOption {
          description = "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels";
          type = types.nullOr (types.attrsOf types.str);
        };
        "name" = mkOption {
          description = "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "annotations" = mkOverride 1002 null;
        "labels" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecPrometheusRulesExcludedFromEnforce" = {
      options = {
        "ruleName" = mkOption {
          description = "Name of the excluded PrometheusRule object.";
          type = types.str;
        };
        "ruleNamespace" = mkOption {
          description = "Namespace of the excluded PrometheusRule object.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecQueryConfig" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWrite" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization section for the URL.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `sigv4`, `basicAuth`, `oauth2`, or `azureAd`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAuthorization"
          );
        };
        "azureAd" = mkOption {
          description = "AzureAD for the URL.\n\nIt requires Prometheus >= v2.45.0 or Thanos >= v0.31.0.\n\nCannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `sigv4`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAd");
        };
        "basicAuth" = mkOption {
          description = "BasicAuth configuration for the URL.\n\nCannot be set at the same time as `sigv4`, `authorization`, `oauth2`, or `azureAd`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteBasicAuth");
        };
        "bearerToken" = mkOption {
          description = "*Warning: this field shouldn't be used because the token value appears\nin clear-text. Prefer using `authorization`.*\n\nDeprecated: this will be removed in a future release.";
          type = types.nullOr types.str;
        };
        "bearerTokenFile" = mkOption {
          description = "File from which to read bearer token for the URL.\n\nDeprecated: this will be removed in a future release. Prefer using `authorization`.";
          type = types.nullOr types.str;
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.";
          type = types.nullOr types.bool;
        };
        "headers" = mkOption {
          description = "Custom HTTP headers to be sent along with each remote write request.\nBe aware that headers that are set by Prometheus itself can't be overwritten.\n\nIt requires Prometheus >= v2.25.0 or Thanos >= v0.24.0.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "messageVersion" = mkOption {
          description = "The Remote Write message's version to use when writing to the endpoint.\n\n`Version1.0` corresponds to the `prometheus.WriteRequest` protobuf message introduced in Remote Write 1.0.\n`Version2.0` corresponds to the `io.prometheus.write.v2.Request` protobuf message introduced in Remote Write 2.0.\n\nWhen `Version2.0` is selected, Prometheus will automatically be\nconfigured to append the metadata of scraped metrics to the WAL.\n\nBefore setting this field, consult with your remote storage provider\nwhat message version it supports.\n\nIt requires Prometheus >= v2.54.0 or Thanos >= v0.37.0.";
          type = types.nullOr types.str;
        };
        "metadataConfig" = mkOption {
          description = "MetadataConfig configures the sending of series metadata to the remote storage.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteMetadataConfig"
          );
        };
        "name" = mkOption {
          description = "The name of the remote write queue, it must be unique if specified. The\nname is used in metrics and logging in order to differentiate queues.\n\nIt requires Prometheus >= v2.15.0 or Thanos >= 0.24.0.";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "OAuth2 configuration for the URL.\n\nIt requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `sigv4`, `authorization`, `basicAuth`, or `azureAd`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2");
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "queueConfig" = mkOption {
          description = "QueueConfig allows tuning of the remote write queue parameters.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteQueueConfig");
        };
        "remoteTimeout" = mkOption {
          description = "Timeout for requests to the remote write endpoint.";
          type = types.nullOr types.str;
        };
        "roundRobinDNS" = mkOption {
          description = "When enabled:\n    - The remote-write mechanism will resolve the hostname via DNS.\n    - It will randomly select one of the resolved IP addresses and connect to it.\n\nWhen disabled (default behavior):\n    - The Go standard library will handle hostname resolution.\n    - It will attempt connections to each resolved IP address sequentially.\n\nNote: The connection timeout applies to the entire resolution and connection process.\n      If disabled, the timeout is distributed across all connection attempts.\n\nIt requires Prometheus >= v3.1.0 or Thanos >= v0.38.0.";
          type = types.nullOr types.bool;
        };
        "sendExemplars" = mkOption {
          description = "Enables sending of exemplars over remote write. Note that\nexemplar-storage itself must be enabled using the `spec.enableFeatures`\noption for exemplars to be scraped in the first place.\n\nIt requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.";
          type = types.nullOr types.bool;
        };
        "sendNativeHistograms" = mkOption {
          description = "Enables sending of native histograms, also known as sparse histograms\nover remote write.\n\nIt requires Prometheus >= v2.40.0 or Thanos >= v0.30.0.";
          type = types.nullOr types.bool;
        };
        "sigv4" = mkOption {
          description = "Sigv4 allows to configures AWS's Signature Verification 4 for the URL.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `azureAd`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteSigv4");
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use for the URL.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfig");
        };
        "url" = mkOption {
          description = "The URL of the endpoint to send samples to.";
          type = types.str;
        };
        "writeRelabelConfigs" = mkOption {
          description = "The list of remote write relabel configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteWriteRelabelConfigs")
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "azureAd" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerToken" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "headers" = mkOverride 1002 null;
        "messageVersion" = mkOverride 1002 null;
        "metadataConfig" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "queueConfig" = mkOverride 1002 null;
        "remoteTimeout" = mkOverride 1002 null;
        "roundRobinDNS" = mkOverride 1002 null;
        "sendExemplars" = mkOverride 1002 null;
        "sendNativeHistograms" = mkOverride 1002 null;
        "sigv4" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "writeRelabelConfigs" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAd" = {
      options = {
        "cloud" = mkOption {
          description = "The Azure Cloud. Options are 'AzurePublic', 'AzureChina', or 'AzureGovernment'.";
          type = types.nullOr types.str;
        };
        "managedIdentity" = mkOption {
          description = "ManagedIdentity defines the Azure User-assigned Managed identity.\nCannot be set at the same time as `oauth` or `sdk`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdManagedIdentity"
          );
        };
        "oauth" = mkOption {
          description = "OAuth defines the oauth config that is being used to authenticate.\nCannot be set at the same time as `managedIdentity` or `sdk`.\n\nIt requires Prometheus >= v2.48.0 or Thanos >= v0.31.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdOauth");
        };
        "sdk" = mkOption {
          description = "SDK defines the Azure SDK config that is being used to authenticate.\nSee https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication\nCannot be set at the same time as `oauth` or `managedIdentity`.\n\nIt requires Prometheus >= v2.52.0 or Thanos >= v0.36.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdSdk");
        };
      };

      config = {
        "cloud" = mkOverride 1002 null;
        "managedIdentity" = mkOverride 1002 null;
        "oauth" = mkOverride 1002 null;
        "sdk" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdManagedIdentity" = {
      options = {
        "clientId" = mkOption {
          description = "The client id";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdOauth" = {
      options = {
        "clientId" = mkOption {
          description = "`clientID` is the clientId of the Azure Active Directory application that is being used to authenticate.";
          type = types.str;
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the client secret of the Azure Active Directory application that is being used to authenticate.";
          type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdOauthClientSecret";
        };
        "tenantId" = mkOption {
          description = "`tenantId` is the tenant ID of the Azure Active Directory application that is being used to authenticate.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdOauthClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteAzureAdSdk" = {
      options = {
        "tenantId" = mkOption {
          description = "`tenantId` is the tenant ID of the azure active directory application that is being used to authenticate.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "tenantId" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteMetadataConfig" = {
      options = {
        "maxSamplesPerSend" = mkOption {
          description = "MaxSamplesPerSend is the maximum number of metadata samples per send.\n\nIt requires Prometheus >= v2.29.0.";
          type = types.nullOr types.int;
        };
        "send" = mkOption {
          description = "Defines whether metric metadata is sent to the remote storage or not.";
          type = types.nullOr types.bool;
        };
        "sendInterval" = mkOption {
          description = "Defines how frequently metric metadata is sent to the remote storage.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "maxSamplesPerSend" = mkOverride 1002 null;
        "send" = mkOverride 1002 null;
        "sendInterval" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteQueueConfig" = {
      options = {
        "batchSendDeadline" = mkOption {
          description = "BatchSendDeadline is the maximum time a sample will wait in buffer.";
          type = types.nullOr types.str;
        };
        "capacity" = mkOption {
          description = "Capacity is the number of samples to buffer per shard before we start\ndropping them.";
          type = types.nullOr types.int;
        };
        "maxBackoff" = mkOption {
          description = "MaxBackoff is the maximum retry delay.";
          type = types.nullOr types.str;
        };
        "maxRetries" = mkOption {
          description = "MaxRetries is the maximum number of times to retry a batch on recoverable errors.";
          type = types.nullOr types.int;
        };
        "maxSamplesPerSend" = mkOption {
          description = "MaxSamplesPerSend is the maximum number of samples per send.";
          type = types.nullOr types.int;
        };
        "maxShards" = mkOption {
          description = "MaxShards is the maximum number of shards, i.e. amount of concurrency.";
          type = types.nullOr types.int;
        };
        "minBackoff" = mkOption {
          description = "MinBackoff is the initial retry delay. Gets doubled for every retry.";
          type = types.nullOr types.str;
        };
        "minShards" = mkOption {
          description = "MinShards is the minimum number of shards, i.e. amount of concurrency.";
          type = types.nullOr types.int;
        };
        "retryOnRateLimit" = mkOption {
          description = "Retry upon receiving a 429 status code from the remote-write storage.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr types.bool;
        };
        "sampleAgeLimit" = mkOption {
          description = "SampleAgeLimit drops samples older than the limit.\nIt requires Prometheus >= v2.50.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "batchSendDeadline" = mkOverride 1002 null;
        "capacity" = mkOverride 1002 null;
        "maxBackoff" = mkOverride 1002 null;
        "maxRetries" = mkOverride 1002 null;
        "maxSamplesPerSend" = mkOverride 1002 null;
        "maxShards" = mkOverride 1002 null;
        "minBackoff" = mkOverride 1002 null;
        "minShards" = mkOverride 1002 null;
        "retryOnRateLimit" = mkOverride 1002 null;
        "sampleAgeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteSigv4" = {
      options = {
        "accessKey" = mkOption {
          description = "AccessKey is the AWS API key. If not specified, the environment variable\n`AWS_ACCESS_KEY_ID` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteSigv4AccessKey"
          );
        };
        "profile" = mkOption {
          description = "Profile is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "Region is the AWS region. If blank, the region from the default credentials chain used.";
          type = types.nullOr types.str;
        };
        "roleArn" = mkOption {
          description = "RoleArn is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "secretKey" = mkOption {
          description = "SecretKey is the AWS API secret. If not specified, the environment\nvariable `AWS_SECRET_ACCESS_KEY` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteSigv4SecretKey"
          );
        };
      };

      config = {
        "accessKey" = mkOverride 1002 null;
        "profile" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "roleArn" = mkOverride 1002 null;
        "secretKey" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteSigv4AccessKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteSigv4SecretKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCa");
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRemoteWriteWriteRelabelConfigs" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecResourcesClaims" "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRuleNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRuleNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRuleNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRuleSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecRuleSelectorMatchExpressions")
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecRuleSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContext" = {
      options = {
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextAppArmorProfile"
          );
        };
        "fsGroup" = mkOption {
          description = "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "fsGroupChangePolicy" = mkOption {
          description = "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxChangePolicy" = mkOption {
          description = "seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.\nIt has no effect on nodes that do not support SELinux or to volumes does not support SELinux.\nValid values are \"MountOption\" and \"Recursive\".\n\n\"Recursive\" means relabeling of all files on all Pod volumes by the container runtime.\nThis may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.\n\n\"MountOption\" mounts all eligible Pod volumes with `-o context` mount option.\nThis requires all Pods that share the same volume to use the same SELinux label.\nIt is not possible to share the same volume among privileged and unprivileged Pods.\nEligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes\nwhose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their\nCSIDriver instance. Other volumes are always re-labelled recursively.\n\"MountOption\" value is allowed only when SELinuxMount feature gate is enabled.\n\nIf not specified and SELinuxMount feature gate is enabled, \"MountOption\" is used.\nIf not specified and SELinuxMount feature gate is disabled, \"MountOption\" is used for ReadWriteOncePod volumes\nand \"Recursive\" for all other volumes.\n\nThis field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.\n\nAll Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextSeccompProfile"
          );
        };
        "supplementalGroups" = mkOption {
          description = "A list of groups applied to the first process run in each container, in\naddition to the container's primary GID and fsGroup (if specified).  If\nthe SupplementalGroupsPolicy feature is enabled, the\nsupplementalGroupsPolicy field determines whether these are in addition\nto or instead of any group memberships defined in the container image.\nIf unspecified, no additional groups are added, though group memberships\ndefined in the container image may still be used, depending on the\nsupplementalGroupsPolicy field.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (types.listOf types.int);
        };
        "supplementalGroupsPolicy" = mkOption {
          description = "Defines how supplemental groups of the first container processes are calculated.\nValid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used.\n(Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled\nand the container runtime must implement support for this feature.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "sysctls" = mkOption {
          description = "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextSysctls"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "appArmorProfile" = mkOverride 1002 null;
        "fsGroup" = mkOverride 1002 null;
        "fsGroupChangePolicy" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxChangePolicy" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "supplementalGroups" = mkOverride 1002 null;
        "supplementalGroupsPolicy" = mkOverride 1002 null;
        "sysctls" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextSysctls" = {
      options = {
        "name" = mkOption {
          description = "Name of a property to set";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value of a property to set";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorage" = {
      options = {
        "disableMountSubPath" = mkOption {
          description = "Deprecated: subPath usage will be removed in a future release.";
          type = types.nullOr types.bool;
        };
        "emptyDir" = mkOption {
          description = "EmptyDirVolumeSource to be used by the StatefulSet.\nIf specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEmptyDir");
        };
        "ephemeral" = mkOption {
          description = "EphemeralVolumeSource to be used by the StatefulSet.\nThis is a beta field in k8s 1.21 and GA in 1.15.\nFor lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.\nMore info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeral");
        };
        "volumeClaimTemplate" = mkOption {
          description = "Defines the PVC spec to be used by the Prometheus StatefulSets.\nThe easiest way to use a volume that cannot be automatically provisioned\nis to use a label selector alongside manually created PersistentVolumes.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplate"
          );
        };
      };

      config = {
        "disableMountSubPath" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplate" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Defines the desired characteristics of a volume requested by a pod author.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpec"
          );
        };
        "status" = mkOption {
          description = "Deprecated: this field is never set.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateStatus"
          );
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "spec" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateStatus" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the actual access modes the volume backing the PVC has.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "allocatedResourceStatuses" = mkOption {
          description = "allocatedResourceStatuses stores status of resource being resized for the given PVC.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "allocatedResources" = mkOption {
          description = "allocatedResources tracks the resources allocated to a PVC including its capacity.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation\nis requested.\nFor storage quota, the larger value from allocatedResources and PVC.spec.resources is used.\nIf allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.\nIf a volume expansion capacity request is lowered, allocatedResources is only\nlowered if there are no expansion operations in progress and if the actual volume capacity\nis equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "capacity" = mkOption {
          description = "capacity represents the actual resources of the underlying volume.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "conditions" = mkOption {
          description = "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being\nresized then the Condition will be set to 'Resizing'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions"
            )
          );
        };
        "currentVolumeAttributesClassName" = mkOption {
          description = "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.\nWhen unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr types.str;
        };
        "modifyVolumeStatus" = mkOption {
          description = "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.\nWhen this is unset, there is no ModifyVolume operation being attempted.\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus"
          );
        };
        "phase" = mkOption {
          description = "phase represents the current phase of PersistentVolumeClaim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "allocatedResourceStatuses" = mkOverride 1002 null;
        "allocatedResources" = mkOverride 1002 null;
        "capacity" = mkOverride 1002 null;
        "conditions" = mkOverride 1002 null;
        "currentVolumeAttributesClassName" = mkOverride 1002 null;
        "modifyVolumeStatus" = mkOverride 1002 null;
        "phase" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions" = {
      options = {
        "lastProbeTime" = mkOption {
          description = "lastProbeTime is the time we probed the condition.";
          type = types.nullOr types.str;
        };
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time the condition transitioned from one status to another.";
          type = types.nullOr types.str;
        };
        "message" = mkOption {
          description = "message is the human-readable message indicating details about last transition.";
          type = types.nullOr types.str;
        };
        "reason" = mkOption {
          description = "reason is a unique, this should be a short, machine understandable string that gives the reason\nfor condition's last transition. If it reports \"Resizing\" that means the underlying\npersistent volume is being resized.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about";
          type = types.str;
        };
      };

      config = {
        "lastProbeTime" = mkOverride 1002 null;
        "lastTransitionTime" = mkOverride 1002 null;
        "message" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus" = {
      options = {
        "status" = mkOption {
          description = "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.";
          type = types.str;
        };
        "targetVolumeAttributesClassName" = mkOption {
          description = "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled";
          type = types.nullOr types.str;
        };
      };

      config = {
        "targetVolumeAttributesClassName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecTolerations" = {
      options = {
        "effect" = mkOption {
          description = "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.";
          type = types.nullOr types.str;
        };
        "key" = mkOption {
          description = "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.";
          type = types.nullOr types.str;
        };
        "operator" = mkOption {
          description = "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.";
          type = types.nullOr types.str;
        };
        "tolerationSeconds" = mkOption {
          description = "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.";
          type = types.nullOr types.int;
        };
        "value" = mkOption {
          description = "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "effect" = mkOverride 1002 null;
        "key" = mkOverride 1002 null;
        "operator" = mkOverride 1002 null;
        "tolerationSeconds" = mkOverride 1002 null;
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecTopologySpreadConstraints" = {
      options = {
        "labelSelector" = mkOption {
          description = "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecTopologySpreadConstraintsLabelSelector"
          );
        };
        "matchLabelKeys" = mkOption {
          description = "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).";
          type = types.nullOr (types.listOf types.str);
        };
        "maxSkew" = mkOption {
          description = "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |   P   |\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.";
          type = types.int;
        };
        "minDomains" = mkOption {
          description = "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |  P P  |\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.";
          type = types.nullOr types.int;
        };
        "nodeAffinityPolicy" = mkOption {
          description = "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.";
          type = types.nullOr types.str;
        };
        "nodeTaintsPolicy" = mkOption {
          description = "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.";
          type = types.nullOr types.str;
        };
        "topologyKey" = mkOption {
          description = "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each <key, value> as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.";
          type = types.str;
        };
        "whenUnsatisfiable" = mkOption {
          description = "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.";
          type = types.str;
        };
      };

      config = {
        "labelSelector" = mkOverride 1002 null;
        "matchLabelKeys" = mkOverride 1002 null;
        "minDomains" = mkOverride 1002 null;
        "nodeAffinityPolicy" = mkOverride 1002 null;
        "nodeTaintsPolicy" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecTopologySpreadConstraintsLabelSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecTracingConfig" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumes" = {
      options = {
        "awsElasticBlockStore" = mkOption {
          description = "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree\nawsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesAwsElasticBlockStore"
          );
        };
        "azureDisk" = mkOption {
          description = "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\nDeprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type\nare redirected to the disk.csi.azure.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesAzureDisk");
        };
        "azureFile" = mkOption {
          description = "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\nDeprecated: AzureFile is deprecated. All operations for the in-tree azureFile type\nare redirected to the file.csi.azure.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesAzureFile");
        };
        "cephfs" = mkOption {
          description = "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.\nDeprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCephfs");
        };
        "cinder" = mkOption {
          description = "cinder represents a cinder volume attached and mounted on kubelets host machine.\nDeprecated: Cinder is deprecated. All operations for the in-tree cinder type\nare redirected to the cinder.csi.openstack.org CSI driver.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCinder");
        };
        "configMap" = mkOption {
          description = "configMap represents a configMap that should populate this volume";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesConfigMap");
        };
        "csi" = mkOption {
          description = "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCsi");
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI represents downward API about the pod that should populate this volume";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPI");
        };
        "emptyDir" = mkOption {
          description = "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEmptyDir");
        };
        "ephemeral" = mkOption {
          description = "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeral");
        };
        "fc" = mkOption {
          description = "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFc");
        };
        "flexVolume" = mkOption {
          description = "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\nDeprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFlexVolume");
        };
        "flocker" = mkOption {
          description = "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.\nDeprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFlocker");
        };
        "gcePersistentDisk" = mkOption {
          description = "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: GCEPersistentDisk is deprecated. All operations for the in-tree\ngcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesGcePersistentDisk"
          );
        };
        "gitRepo" = mkOption {
          description = "gitRepo represents a git repository at a particular revision.\nDeprecated: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesGitRepo");
        };
        "glusterfs" = mkOption {
          description = "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nDeprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesGlusterfs");
        };
        "hostPath" = mkOption {
          description = "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesHostPath");
        };
        "image" = mkOption {
          description = "image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.\nThe volume is resolved at pod startup depending on which PullPolicy value is provided:\n\n- Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\n- Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\n- IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\n\nThe volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.\nA failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.\nThe types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.\nThe OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.\nThe volume will be mounted read-only (ro) and non-executable files (noexec).\nSub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.\nThe field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesImage");
        };
        "iscsi" = mkOption {
          description = "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesIscsi");
        };
        "name" = mkOption {
          description = "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.str;
        };
        "nfs" = mkOption {
          description = "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesNfs");
        };
        "persistentVolumeClaim" = mkOption {
          description = "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesPersistentVolumeClaim"
          );
        };
        "photonPersistentDisk" = mkOption {
          description = "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.\nDeprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesPhotonPersistentDisk"
          );
        };
        "portworxVolume" = mkOption {
          description = "portworxVolume represents a portworx volume attached and mounted on kubelets host machine.\nDeprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type\nare redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate\nis on.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesPortworxVolume");
        };
        "projected" = mkOption {
          description = "projected items for all in one resources secrets, configmaps, and downward API";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjected");
        };
        "quobyte" = mkOption {
          description = "quobyte represents a Quobyte mount on the host that shares a pod's lifetime.\nDeprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesQuobyte");
        };
        "rbd" = mkOption {
          description = "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nDeprecated: RBD is deprecated and the in-tree rbd type is no longer supported.\nMore info: https://examples.k8s.io/volumes/rbd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesRbd");
        };
        "scaleIO" = mkOption {
          description = "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\nDeprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesScaleIO");
        };
        "secret" = mkOption {
          description = "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesSecret");
        };
        "storageos" = mkOption {
          description = "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\nDeprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesStorageos");
        };
        "vsphereVolume" = mkOption {
          description = "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.\nDeprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type\nare redirected to the csi.vsphere.vmware.com CSI driver.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesVsphereVolume");
        };
      };

      config = {
        "awsElasticBlockStore" = mkOverride 1002 null;
        "azureDisk" = mkOverride 1002 null;
        "azureFile" = mkOverride 1002 null;
        "cephfs" = mkOverride 1002 null;
        "cinder" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "csi" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "fc" = mkOverride 1002 null;
        "flexVolume" = mkOverride 1002 null;
        "flocker" = mkOverride 1002 null;
        "gcePersistentDisk" = mkOverride 1002 null;
        "gitRepo" = mkOverride 1002 null;
        "glusterfs" = mkOverride 1002 null;
        "hostPath" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "iscsi" = mkOverride 1002 null;
        "nfs" = mkOverride 1002 null;
        "persistentVolumeClaim" = mkOverride 1002 null;
        "photonPersistentDisk" = mkOverride 1002 null;
        "portworxVolume" = mkOverride 1002 null;
        "projected" = mkOverride 1002 null;
        "quobyte" = mkOverride 1002 null;
        "rbd" = mkOverride 1002 null;
        "scaleIO" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "storageos" = mkOverride 1002 null;
        "vsphereVolume" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesAwsElasticBlockStore" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesAzureDisk" = {
      options = {
        "cachingMode" = mkOption {
          description = "cachingMode is the Host Caching mode: None, Read Only, Read Write.";
          type = types.nullOr types.str;
        };
        "diskName" = mkOption {
          description = "diskName is the Name of the data disk in the blob storage";
          type = types.str;
        };
        "diskURI" = mkOption {
          description = "diskURI is the URI of data disk in the blob storage";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cachingMode" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesAzureFile" = {
      options = {
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the  name of secret that contains Azure Storage Account Name and Key";
          type = types.str;
        };
        "shareName" = mkOption {
          description = "shareName is the azure share Name";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCephfs" = {
      options = {
        "monitors" = mkOption {
          description = "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "path" = mkOption {
          description = "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretFile" = mkOption {
          description = "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCephfsSecretRef");
        };
        "user" = mkOption {
          description = "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "path" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretFile" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCephfsSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCinder" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCinderSecretRef");
        };
        "volumeID" = mkOption {
          description = "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCinderSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesConfigMap" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesConfigMapItems")
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCsi" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.";
          type = types.nullOr types.str;
        };
        "nodePublishSecretRef" = mkOption {
          description = "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCsiNodePublishSecretRef"
          );
        };
        "readOnly" = mkOption {
          description = "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).";
          type = types.nullOr types.bool;
        };
        "volumeAttributes" = mkOption {
          description = "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "nodePublishSecretRef" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "volumeAttributes" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesCsiNodePublishSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPI" = {
      options = {
        "defaultMode" = mkOption {
          description = "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "Items is a list of downward API volume file";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPIItems")
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPIItemsFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFc" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun is Optional: FC target lun number";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "targetWWNs" = mkOption {
          description = "targetWWNs is Optional: FC target worldwide names (WWNs)";
          type = types.nullOr (types.listOf types.str);
        };
        "wwids" = mkOption {
          description = "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "lun" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "targetWWNs" = mkOverride 1002 null;
        "wwids" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFlexVolume" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the driver to use for this volume.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.";
          type = types.nullOr types.str;
        };
        "options" = mkOption {
          description = "options is Optional: this field holds extra command options if any.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFlexVolumeSecretRef"
          );
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFlexVolumeSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesFlocker" = {
      options = {
        "datasetName" = mkOption {
          description = "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as deprecated";
          type = types.nullOr types.str;
        };
        "datasetUUID" = mkOption {
          description = "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset";
          type = types.nullOr types.str;
        };
      };

      config = {
        "datasetName" = mkOverride 1002 null;
        "datasetUUID" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesGcePersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.int;
        };
        "pdName" = mkOption {
          description = "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesGitRepo" = {
      options = {
        "directory" = mkOption {
          description = "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.";
          type = types.nullOr types.str;
        };
        "repository" = mkOption {
          description = "repository is the URL";
          type = types.str;
        };
        "revision" = mkOption {
          description = "revision is the commit hash for the specified revision.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "directory" = mkOverride 1002 null;
        "revision" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesGlusterfs" = {
      options = {
        "endpoints" = mkOption {
          description = "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "path" = mkOption {
          description = "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesHostPath" = {
      options = {
        "path" = mkOption {
          description = "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.str;
        };
        "type" = mkOption {
          description = "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr types.str;
        };
      };

      config = {
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesImage" = {
      options = {
        "pullPolicy" = mkOption {
          description = "Policy for pulling OCI objects. Possible values are:\nAlways: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\nNever: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\nIfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.";
          type = types.nullOr types.str;
        };
        "reference" = mkOption {
          description = "Required: Image or artifact reference to be used.\nBehaves in the same way as pod.spec.containers[*].image.\nPull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "pullPolicy" = mkOverride 1002 null;
        "reference" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesIscsi" = {
      options = {
        "chapAuthDiscovery" = mkOption {
          description = "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication";
          type = types.nullOr types.bool;
        };
        "chapAuthSession" = mkOption {
          description = "chapAuthSession defines whether support iSCSI Session CHAP authentication";
          type = types.nullOr types.bool;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi";
          type = types.nullOr types.str;
        };
        "initiatorName" = mkOption {
          description = "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.";
          type = types.nullOr types.str;
        };
        "iqn" = mkOption {
          description = "iqn is the target iSCSI Qualified Name.";
          type = types.str;
        };
        "iscsiInterface" = mkOption {
          description = "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun represents iSCSI Target Lun number.";
          type = types.int;
        };
        "portals" = mkOption {
          description = "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.nullOr (types.listOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is the CHAP Secret for iSCSI target and initiator authentication";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesIscsiSecretRef");
        };
        "targetPortal" = mkOption {
          description = "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.str;
        };
      };

      config = {
        "chapAuthDiscovery" = mkOverride 1002 null;
        "chapAuthSession" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "initiatorName" = mkOverride 1002 null;
        "iscsiInterface" = mkOverride 1002 null;
        "portals" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesIscsiSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesNfs" = {
      options = {
        "path" = mkOption {
          description = "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr types.bool;
        };
        "server" = mkOption {
          description = "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesPersistentVolumeClaim" = {
      options = {
        "claimName" = mkOption {
          description = "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesPhotonPersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "pdID" = mkOption {
          description = "pdID is the ID that identifies Photon Controller persistent disk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesPortworxVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID uniquely identifies a Portworx volume";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjected" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "sources" = mkOption {
          description = "sources is the list of volume projections. Each entry in this list\nhandles one source.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSources")
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "sources" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSources" = {
      options = {
        "clusterTrustBundle" = mkOption {
          description = "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle"
          );
        };
        "configMap" = mkOption {
          description = "configMap information about the configMap data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesConfigMap"
          );
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI information about the downwardAPI data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPI"
          );
        };
        "secret" = mkOption {
          description = "secret information about the secret data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesSecret"
          );
        };
        "serviceAccountToken" = mkOption {
          description = "serviceAccountToken is information about the serviceAccountToken data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken"
          );
        };
      };

      config = {
        "clusterTrustBundle" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "serviceAccountToken" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle" = {
      options = {
        "labelSelector" = mkOption {
          description = "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector"
          );
        };
        "name" = mkOption {
          description = "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.";
          type = types.nullOr types.bool;
        };
        "path" = mkOption {
          description = "Relative path from the volume root to write the bundle.";
          type = types.str;
        };
        "signerName" = mkOption {
          description = "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "labelSelector" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "signerName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesConfigMap" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesConfigMapItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPI" = {
      options = {
        "items" = mkOption {
          description = "Items is a list of DownwardAPIVolume file";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems"
            )
          );
        };
      };

      config = {
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef" =
      {
        options = {
          "containerName" = mkOption {
            description = "Container name: required for volumes, optional for env vars";
            type = types.nullOr types.str;
          };
          "divisor" = mkOption {
            description = "Specifies the output format of the exposed resources, defaults to \"1\"";
            type = types.nullOr (types.either types.int types.str);
          };
          "resource" = mkOption {
            description = "Required: resource to select";
            type = types.str;
          };
        };

        config = {
          "containerName" = mkOverride 1002 null;
          "divisor" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesSecret" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesSecretItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken" = {
      options = {
        "audience" = mkOption {
          description = "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.";
          type = types.nullOr types.str;
        };
        "expirationSeconds" = mkOption {
          description = "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the path relative to the mount point of the file to project the\ntoken into.";
          type = types.str;
        };
      };

      config = {
        "audience" = mkOverride 1002 null;
        "expirationSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesQuobyte" = {
      options = {
        "group" = mkOption {
          description = "group to map volume access to\nDefault is no group";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "registry" = mkOption {
          description = "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes";
          type = types.str;
        };
        "tenant" = mkOption {
          description = "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "user to map volume access to\nDefaults to serivceaccount user";
          type = types.nullOr types.str;
        };
        "volume" = mkOption {
          description = "volume is a string that references an already created Quobyte volume by name.";
          type = types.str;
        };
      };

      config = {
        "group" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "tenant" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesRbd" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd";
          type = types.nullOr types.str;
        };
        "image" = mkOption {
          description = "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.str;
        };
        "keyring" = mkOption {
          description = "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "monitors" = mkOption {
          description = "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "pool" = mkOption {
          description = "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesRbdSecretRef");
        };
        "user" = mkOption {
          description = "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "keyring" = mkOverride 1002 null;
        "pool" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesRbdSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesScaleIO" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".";
          type = types.nullOr types.str;
        };
        "gateway" = mkOption {
          description = "gateway is the host address of the ScaleIO API Gateway.";
          type = types.str;
        };
        "protectionDomain" = mkOption {
          description = "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.";
          type = submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesScaleIOSecretRef";
        };
        "sslEnabled" = mkOption {
          description = "sslEnabled Flag enable/disable SSL communication with Gateway, default false";
          type = types.nullOr types.bool;
        };
        "storageMode" = mkOption {
          description = "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.";
          type = types.nullOr types.str;
        };
        "storagePool" = mkOption {
          description = "storagePool is the ScaleIO Storage Pool associated with the protection domain.";
          type = types.nullOr types.str;
        };
        "system" = mkOption {
          description = "system is the name of the storage system as configured in ScaleIO.";
          type = types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "protectionDomain" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "sslEnabled" = mkOverride 1002 null;
        "storageMode" = mkOverride 1002 null;
        "storagePool" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesScaleIOSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesSecret" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesSecretItems")
          );
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its keys must be defined";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr types.str;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "secretName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesStorageos" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecVolumesStorageosSecretRef"
          );
        };
        "volumeName" = mkOption {
          description = "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.";
          type = types.nullOr types.str;
        };
        "volumeNamespace" = mkOption {
          description = "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
        "volumeNamespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesStorageosSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecVolumesVsphereVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "storagePolicyID" = mkOption {
          description = "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.";
          type = types.nullOr types.str;
        };
        "storagePolicyName" = mkOption {
          description = "storagePolicyName is the storage Policy Based Management (SPBM) profile name.";
          type = types.nullOr types.str;
        };
        "volumePath" = mkOption {
          description = "volumePath is the path that identifies vSphere volume vmdk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "storagePolicyID" = mkOverride 1002 null;
        "storagePolicyName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWeb" = {
      options = {
        "httpConfig" = mkOption {
          description = "Defines HTTP parameters for web server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebHttpConfig");
        };
        "tlsConfig" = mkOption {
          description = "Defines the TLS parameters for HTTPS.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfig");
        };
      };

      config = {
        "httpConfig" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebHttpConfig" = {
      options = {
        "headers" = mkOption {
          description = "List of headers that can be added to HTTP responses.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebHttpConfigHeaders");
        };
        "http2" = mkOption {
          description = "Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.\nWhen TLSConfig is not configured, HTTP/2 will be disabled.\nWhenever the value of the field changes, a rolling update will be triggered.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "headers" = mkOverride 1002 null;
        "http2" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebHttpConfigHeaders" = {
      options = {
        "contentSecurityPolicy" = mkOption {
          description = "Set the Content-Security-Policy header to HTTP responses.\nUnset if blank.";
          type = types.nullOr types.str;
        };
        "strictTransportSecurity" = mkOption {
          description = "Set the Strict-Transport-Security header to HTTP responses.\nUnset if blank.\nPlease make sure that you use this with care as this header might force\nbrowsers to load Prometheus and the other applications hosted on the same\ndomain and subdomains over HTTPS.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security";
          type = types.nullOr types.str;
        };
        "xContentTypeOptions" = mkOption {
          description = "Set the X-Content-Type-Options header to HTTP responses.\nUnset if blank. Accepted value is nosniff.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options";
          type = types.nullOr types.str;
        };
        "xFrameOptions" = mkOption {
          description = "Set the X-Frame-Options header to HTTP responses.\nUnset if blank. Accepted values are deny and sameorigin.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options";
          type = types.nullOr types.str;
        };
        "xXSSProtection" = mkOption {
          description = "Set the X-XSS-Protection header to all responses.\nUnset if blank.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection";
          type = types.nullOr types.str;
        };
      };

      config = {
        "contentSecurityPolicy" = mkOverride 1002 null;
        "strictTransportSecurity" = mkOverride 1002 null;
        "xContentTypeOptions" = mkOverride 1002 null;
        "xFrameOptions" = mkOverride 1002 null;
        "xXSSProtection" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfig" = {
      options = {
        "cert" = mkOption {
          description = "Secret or ConfigMap containing the TLS certificate for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `certFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigCert");
        };
        "certFile" = mkOption {
          description = "Path to the TLS certificate file in the container for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `cert`.";
          type = types.nullOr types.str;
        };
        "cipherSuites" = mkOption {
          description = "List of supported cipher suites for TLS versions up to TLS 1.2.\n\nIf not defined, the Go default cipher suites are used.\nAvailable cipher suites are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#pkg-constants";
          type = types.nullOr (types.listOf types.str);
        };
        "clientAuthType" = mkOption {
          description = "The server policy for client TLS authentication.\n\nFor more detail on clientAuth options:\nhttps://golang.org/pkg/crypto/tls/#ClientAuthType";
          type = types.nullOr types.str;
        };
        "clientCAFile" = mkOption {
          description = "Path to the CA certificate file for client certificate authentication to\nthe server.\n\nIt is mutually exclusive with `client_ca`.";
          type = types.nullOr types.str;
        };
        "client_ca" = mkOption {
          description = "Secret or ConfigMap containing the CA certificate for client certificate\nauthentication to the server.\n\nIt is mutually exclusive with `clientCAFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigClient_ca");
        };
        "curvePreferences" = mkOption {
          description = "Elliptic curves that will be used in an ECDHE handshake, in preference\norder.\n\nAvailable curves are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#CurveID";
          type = types.nullOr (types.listOf types.str);
        };
        "keyFile" = mkOption {
          description = "Path to the TLS private key file in the container for the web server.\n\nIf defined, either `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keySecret`.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the TLS private key for the web server.\n\nEither `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keyFile`.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigKeySecret");
        };
        "maxVersion" = mkOption {
          description = "Maximum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "preferServerCipherSuites" = mkOption {
          description = "Controls whether the server selects the client's most preferred cipher\nsuite, or the server's most preferred cipher suite.\n\nIf true then the server's preference, as expressed in\nthe order of elements in cipherSuites, is used.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "cipherSuites" = mkOverride 1002 null;
        "clientAuthType" = mkOverride 1002 null;
        "clientCAFile" = mkOverride 1002 null;
        "client_ca" = mkOverride 1002 null;
        "curvePreferences" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "preferServerCipherSuites" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigCertSecret");
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigClient_ca" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigClient_caConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigClient_caSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigClient_caConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigClient_caSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerSpecWebTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerStatus" = {
      options = {
        "availableReplicas" = mkOption {
          description = "Total number of available pods (ready for at least minReadySeconds)\ntargeted by this ThanosRuler deployment.";
          type = types.int;
        };
        "conditions" = mkOption {
          description = "The current state of the ThanosRuler object.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1.ThanosRulerStatusConditions")
          );
        };
        "paused" = mkOption {
          description = "Represents whether any actions on the underlying managed objects are\nbeing performed. Only delete actions will be performed.";
          type = types.bool;
        };
        "replicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this ThanosRuler deployment\n(their labels match the selector).";
          type = types.int;
        };
        "unavailableReplicas" = mkOption {
          description = "Total number of unavailable pods targeted by this ThanosRuler deployment.";
          type = types.int;
        };
        "updatedReplicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this ThanosRuler deployment\nthat have the desired version spec.";
          type = types.int;
        };
      };

      config = {
        "conditions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1.ThanosRulerStatusConditions" = {
      options = {
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time of the last update to the current status property.";
          type = types.str;
        };
        "message" = mkOption {
          description = "Human-readable message indicating details for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "observedGeneration" = mkOption {
          description = "ObservedGeneration represents the .metadata.generation that the\ncondition was set based upon. For instance, if `.metadata.generation` is\ncurrently 12, but the `.status.conditions[].observedGeneration` is 9, the\ncondition is out of date with respect to the current state of the\ninstance.";
          type = types.nullOr types.int;
        };
        "reason" = mkOption {
          description = "Reason for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status of the condition.";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type of the condition being reported.";
          type = types.str;
        };
      };

      config = {
        "message" = mkOverride 1002 null;
        "observedGeneration" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgent" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Specification of the desired behavior of the Prometheus agent. More info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpec";
        };
        "status" = mkOption {
          description = "Most recent observed status of the Prometheus cluster. Read-only.\nMore info:\nhttps://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentStatus");
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpec" = {
      options = {
        "additionalArgs" = mkOption {
          description = "AdditionalArgs allows setting additional arguments for the 'prometheus' container.\n\nIt is intended for e.g. activating hidden flags which are not supported by\nthe dedicated configuration options yet. The arguments are passed as-is to the\nPrometheus container which may cause issues if they are invalid or not supported\nby the given Prometheus version.\n\nIn case of an argument conflict (e.g. an argument which is already set by the\noperator itself) or when providing an invalid argument, the reconciliation will\nfail and an error will be logged.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAdditionalArgs"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "additionalScrapeConfigs" = mkOption {
          description = "AdditionalScrapeConfigs allows specifying a key of a Secret containing\nadditional Prometheus scrape configurations. Scrape configurations\nspecified are appended to the configurations generated by the Prometheus\nOperator. Job configurations specified must have the form as specified\nin the official Prometheus documentation:\nhttps://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config.\nAs scrape configs are appended, the user is responsible to make sure it\nis valid. Note that using this feature may expose the possibility to\nbreak upgrades of Prometheus. It is advised to review Prometheus release\nnotes to ensure that no incompatible scrape configs are going to break\nPrometheus after the upgrade.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAdditionalScrapeConfigs"
          );
        };
        "affinity" = mkOption {
          description = "Defines the Pods' affinity scheduling rules if specified.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinity");
        };
        "apiserverConfig" = mkOption {
          description = "APIServerConfig allows specifying a host and auth methods to access the\nKuberntees API server.\nIf null, Prometheus is assumed to run inside of the cluster: it will\ndiscover the API servers automatically and use the Pod's CA certificate\nand bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfig"
          );
        };
        "arbitraryFSAccessThroughSMs" = mkOption {
          description = "When true, ServiceMonitor, PodMonitor and Probe object are forbidden to\nreference arbitrary files on the file system of the 'prometheus'\ncontainer.\nWhen a ServiceMonitor's endpoint specifies a `bearerTokenFile` value\n(e.g.  '/var/run/secrets/kubernetes.io/serviceaccount/token'), a\nmalicious target can get access to the Prometheus service account's\ntoken in the Prometheus' scrape request. Setting\n`spec.arbitraryFSAccessThroughSM` to 'true' would prevent the attack.\nUsers should instead provide the credentials using the\n`spec.bearerTokenSecret` field.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecArbitraryFSAccessThroughSMs"
          );
        };
        "automountServiceAccountToken" = mkOption {
          description = "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in the pod.\nIf the field isn't set, the operator mounts the service account token by default.\n\n**Warning:** be aware that by default, Prometheus requires the service account token for Kubernetes service discovery.\nIt is possible to use strategic merge patch to project the service account token into the 'prometheus' container.";
          type = types.nullOr types.bool;
        };
        "bodySizeLimit" = mkOption {
          description = "BodySizeLimit defines per-scrape on response body size.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedBodySizeLimit.";
          type = types.nullOr types.str;
        };
        "configMaps" = mkOption {
          description = "ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus\nobject, which shall be mounted into the Prometheus Pods.\nEach ConfigMap is added to the StatefulSet definition as a volume named `configmap-<configmap-name>`.\nThe ConfigMaps are mounted into /etc/prometheus/configmaps/<configmap-name> in the 'prometheus' container.";
          type = types.nullOr (types.listOf types.str);
        };
        "containers" = mkOption {
          description = "Containers allows injecting additional containers or modifying operator\ngenerated containers. This can be used to allow adding an authentication\nproxy to the Pods or to change the behavior of an operator generated\ncontainer. Containers described here modify an operator generated\ncontainer if they share the same name and modifications are done via a\nstrategic merge patch.\n\nThe names of containers managed by the operator are:\n* `prometheus`\n* `config-reloader`\n* `thanos-sidecar`\n\nOverriding containers is entirely outside the scope of what the\nmaintainers will support and by doing so, you accept that this behaviour\nmay break at any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainers"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "convertClassicHistogramsToNHCB" = mkOption {
          description = "Whether to convert all scraped classic histograms into a native\nhistogram with custom buckets.\n\nIt requires Prometheus >= v3.4.0.";
          type = types.nullOr types.bool;
        };
        "dnsConfig" = mkOption {
          description = "Defines the DNS configuration for the pods.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecDnsConfig");
        };
        "dnsPolicy" = mkOption {
          description = "Defines the DNS policy for the pods.";
          type = types.nullOr types.str;
        };
        "enableFeatures" = mkOption {
          description = "Enable access to Prometheus feature flags. By default, no features are enabled.\n\nEnabling features which are disabled by default is entirely outside the\nscope of what the maintainers will support and by doing so, you accept\nthat this behaviour may break at any time without notice.\n\nFor more information see https://prometheus.io/docs/prometheus/latest/feature_flags/";
          type = types.nullOr (types.listOf types.str);
        };
        "enableOTLPReceiver" = mkOption {
          description = "Enable Prometheus to be used as a receiver for the OTLP Metrics protocol.\n\nNote that the OTLP receiver endpoint is automatically enabled if `.spec.otlpConfig` is defined.\n\nIt requires Prometheus >= v2.47.0.";
          type = types.nullOr types.bool;
        };
        "enableRemoteWriteReceiver" = mkOption {
          description = "Enable Prometheus to be used as a receiver for the Prometheus remote\nwrite protocol.\n\nWARNING: This is not considered an efficient way of ingesting samples.\nUse it with caution for specific low-volume use cases.\nIt is not suitable for replacing the ingestion via scraping and turning\nPrometheus into a push-based metrics collection system.\nFor more information see https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver\n\nIt requires Prometheus >= v2.33.0.";
          type = types.nullOr types.bool;
        };
        "enableServiceLinks" = mkOption {
          description = "Indicates whether information about services should be injected into pod's environment variables";
          type = types.nullOr types.bool;
        };
        "enforcedBodySizeLimit" = mkOption {
          description = "When defined, enforcedBodySizeLimit specifies a global limit on the size\nof uncompressed response body that will be accepted by Prometheus.\nTargets responding with a body larger than this many bytes will cause\nthe scrape to fail.\n\nIt requires Prometheus >= v2.28.0.\n\nWhen both `enforcedBodySizeLimit` and `bodySizeLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined bodySizeLimit value will inherit the global bodySizeLimit value (Prometheus >= 2.45.0) or the enforcedBodySizeLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedBodySizeLimit` is greater than the `bodySizeLimit`, the `bodySizeLimit` will be set to `enforcedBodySizeLimit`.\n* Scrape objects with a bodySizeLimit value less than or equal to enforcedBodySizeLimit keep their specific value.\n* Scrape objects with a bodySizeLimit value greater than enforcedBodySizeLimit are set to enforcedBodySizeLimit.";
          type = types.nullOr types.str;
        };
        "enforcedKeepDroppedTargets" = mkOption {
          description = "When defined, enforcedKeepDroppedTargets specifies a global limit on the number of targets\ndropped by relabeling that will be kept in memory. The value overrides\nany `spec.keepDroppedTargets` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.keepDroppedTargets` is\ngreater than zero and less than `spec.enforcedKeepDroppedTargets`.\n\nIt requires Prometheus >= v2.47.0.\n\nWhen both `enforcedKeepDroppedTargets` and `keepDroppedTargets` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined keepDroppedTargets value will inherit the global keepDroppedTargets value (Prometheus >= 2.45.0) or the enforcedKeepDroppedTargets value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedKeepDroppedTargets` is greater than the `keepDroppedTargets`, the `keepDroppedTargets` will be set to `enforcedKeepDroppedTargets`.\n* Scrape objects with a keepDroppedTargets value less than or equal to enforcedKeepDroppedTargets keep their specific value.\n* Scrape objects with a keepDroppedTargets value greater than enforcedKeepDroppedTargets are set to enforcedKeepDroppedTargets.";
          type = types.nullOr types.int;
        };
        "enforcedLabelLimit" = mkOption {
          description = "When defined, enforcedLabelLimit specifies a global limit on the number\nof labels per sample. The value overrides any `spec.labelLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.labelLimit` is\ngreater than zero and less than `spec.enforcedLabelLimit`.\n\nIt requires Prometheus >= v2.27.0.\n\nWhen both `enforcedLabelLimit` and `labelLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined labelLimit value will inherit the global labelLimit value (Prometheus >= 2.45.0) or the enforcedLabelLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedLabelLimit` is greater than the `labelLimit`, the `labelLimit` will be set to `enforcedLabelLimit`.\n* Scrape objects with a labelLimit value less than or equal to enforcedLabelLimit keep their specific value.\n* Scrape objects with a labelLimit value greater than enforcedLabelLimit are set to enforcedLabelLimit.";
          type = types.nullOr types.int;
        };
        "enforcedLabelNameLengthLimit" = mkOption {
          description = "When defined, enforcedLabelNameLengthLimit specifies a global limit on the length\nof labels name per sample. The value overrides any `spec.labelNameLengthLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.labelNameLengthLimit` is\ngreater than zero and less than `spec.enforcedLabelNameLengthLimit`.\n\nIt requires Prometheus >= v2.27.0.\n\nWhen both `enforcedLabelNameLengthLimit` and `labelNameLengthLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined labelNameLengthLimit value will inherit the global labelNameLengthLimit value (Prometheus >= 2.45.0) or the enforcedLabelNameLengthLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedLabelNameLengthLimit` is greater than the `labelNameLengthLimit`, the `labelNameLengthLimit` will be set to `enforcedLabelNameLengthLimit`.\n* Scrape objects with a labelNameLengthLimit value less than or equal to enforcedLabelNameLengthLimit keep their specific value.\n* Scrape objects with a labelNameLengthLimit value greater than enforcedLabelNameLengthLimit are set to enforcedLabelNameLengthLimit.";
          type = types.nullOr types.int;
        };
        "enforcedLabelValueLengthLimit" = mkOption {
          description = "When not null, enforcedLabelValueLengthLimit defines a global limit on the length\nof labels value per sample. The value overrides any `spec.labelValueLengthLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.labelValueLengthLimit` is\ngreater than zero and less than `spec.enforcedLabelValueLengthLimit`.\n\nIt requires Prometheus >= v2.27.0.\n\nWhen both `enforcedLabelValueLengthLimit` and `labelValueLengthLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined labelValueLengthLimit value will inherit the global labelValueLengthLimit value (Prometheus >= 2.45.0) or the enforcedLabelValueLengthLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedLabelValueLengthLimit` is greater than the `labelValueLengthLimit`, the `labelValueLengthLimit` will be set to `enforcedLabelValueLengthLimit`.\n* Scrape objects with a labelValueLengthLimit value less than or equal to enforcedLabelValueLengthLimit keep their specific value.\n* Scrape objects with a labelValueLengthLimit value greater than enforcedLabelValueLengthLimit are set to enforcedLabelValueLengthLimit.";
          type = types.nullOr types.int;
        };
        "enforcedNamespaceLabel" = mkOption {
          description = "When not empty, a label will be added to:\n\n1. All metrics scraped from `ServiceMonitor`, `PodMonitor`, `Probe` and `ScrapeConfig` objects.\n2. All metrics generated from recording rules defined in `PrometheusRule` objects.\n3. All alerts generated from alerting rules defined in `PrometheusRule` objects.\n4. All vector selectors of PromQL expressions defined in `PrometheusRule` objects.\n\nThe label will not added for objects referenced in `spec.excludedFromEnforcement`.\n\nThe label's name is this field's value.\nThe label's value is the namespace of the `ServiceMonitor`,\n`PodMonitor`, `Probe`, `PrometheusRule` or `ScrapeConfig` object.";
          type = types.nullOr types.str;
        };
        "enforcedSampleLimit" = mkOption {
          description = "When defined, enforcedSampleLimit specifies a global limit on the number\nof scraped samples that will be accepted. This overrides any\n`spec.sampleLimit` set by ServiceMonitor, PodMonitor, Probe objects\nunless `spec.sampleLimit` is greater than zero and less than\n`spec.enforcedSampleLimit`.\n\nIt is meant to be used by admins to keep the overall number of\nsamples/series under a desired limit.\n\nWhen both `enforcedSampleLimit` and `sampleLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined sampleLimit value will inherit the global sampleLimit value (Prometheus >= 2.45.0) or the enforcedSampleLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedSampleLimit` is greater than the `sampleLimit`, the `sampleLimit` will be set to `enforcedSampleLimit`.\n* Scrape objects with a sampleLimit value less than or equal to enforcedSampleLimit keep their specific value.\n* Scrape objects with a sampleLimit value greater than enforcedSampleLimit are set to enforcedSampleLimit.";
          type = types.nullOr types.int;
        };
        "enforcedTargetLimit" = mkOption {
          description = "When defined, enforcedTargetLimit specifies a global limit on the number\nof scraped targets. The value overrides any `spec.targetLimit` set by\nServiceMonitor, PodMonitor, Probe objects unless `spec.targetLimit` is\ngreater than zero and less than `spec.enforcedTargetLimit`.\n\nIt is meant to be used by admins to to keep the overall number of\ntargets under a desired limit.\n\nWhen both `enforcedTargetLimit` and `targetLimit` are defined and greater than zero, the following rules apply:\n* Scrape objects without a defined targetLimit value will inherit the global targetLimit value (Prometheus >= 2.45.0) or the enforcedTargetLimit value (Prometheus < v2.45.0).\n  If Prometheus version is >= 2.45.0 and the `enforcedTargetLimit` is greater than the `targetLimit`, the `targetLimit` will be set to `enforcedTargetLimit`.\n* Scrape objects with a targetLimit value less than or equal to enforcedTargetLimit keep their specific value.\n* Scrape objects with a targetLimit value greater than enforcedTargetLimit are set to enforcedTargetLimit.";
          type = types.nullOr types.int;
        };
        "excludedFromEnforcement" = mkOption {
          description = "List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule objects\nto be excluded from enforcing a namespace label of origin.\n\nIt is only applicable if `spec.enforcedNamespaceLabel` set to true.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecExcludedFromEnforcement"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "externalLabels" = mkOption {
          description = "The labels to add to any time series or alerts when communicating with\nexternal systems (federation, remote storage, Alertmanager).\nLabels defined by `spec.replicaExternalLabelName` and\n`spec.prometheusExternalLabelName` take precedence over this list.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "externalUrl" = mkOption {
          description = "The external URL under which the Prometheus service is externally\navailable. This is necessary to generate correct URLs (for instance if\nPrometheus is accessible behind an Ingress resource).";
          type = types.nullOr types.str;
        };
        "hostAliases" = mkOption {
          description = "Optional list of hosts and IPs that will be injected into the Pod's\nhosts file if specified.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecHostAliases")
          );
        };
        "hostNetwork" = mkOption {
          description = "Use the host's network namespace if true.\n\nMake sure to understand the security implications if you want to enable\nit (https://kubernetes.io/docs/concepts/configuration/overview/).\n\nWhen hostNetwork is enabled, this will set the DNS policy to\n`ClusterFirstWithHostNet` automatically (unless `.spec.DNSPolicy` is set\nto a different value).";
          type = types.nullOr types.bool;
        };
        "ignoreNamespaceSelectors" = mkOption {
          description = "When true, `spec.namespaceSelector` from all PodMonitor, ServiceMonitor\nand Probe objects will be ignored. They will only discover targets\nwithin the namespace of the PodMonitor, ServiceMonitor and Probe\nobject.";
          type = types.nullOr types.bool;
        };
        "image" = mkOption {
          description = "Container image name for Prometheus. If specified, it takes precedence\nover the `spec.baseImage`, `spec.tag` and `spec.sha` fields.\n\nSpecifying `spec.version` is still necessary to ensure the Prometheus\nOperator knows which version of Prometheus is being configured.\n\nIf neither `spec.image` nor `spec.baseImage` are defined, the operator\nwill use the latest upstream version of Prometheus available at the time\nwhen the operator was released.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy for the 'prometheus', 'init-config-reloader' and 'config-reloader' containers.\nSee https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.";
          type = types.nullOr types.str;
        };
        "imagePullSecrets" = mkOption {
          description = "An optional list of references to Secrets in the same namespace\nto use for pulling images from registries.\nSee http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecImagePullSecrets"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "initContainers" = mkOption {
          description = "InitContainers allows injecting initContainers to the Pod definition. Those\ncan be used to e.g.  fetch secrets for injection into the Prometheus\nconfiguration from external sources. Any errors during the execution of\nan initContainer will lead to a restart of the Pod. More info:\nhttps://kubernetes.io/docs/concepts/workloads/pods/init-containers/\nInitContainers described here modify an operator generated init\ncontainers if they share the same name and modifications are done via a\nstrategic merge patch.\n\nThe names of init container name managed by the operator are:\n* `init-config-reloader`.\n\nOverriding init containers is entirely outside the scope of what the\nmaintainers will support and by doing so, you accept that this behaviour\nmay break at any time without notice.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainers"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "keepDroppedTargets" = mkOption {
          description = "Per-scrape limit on the number of targets dropped by relabeling\nthat will be kept in memory. 0 means no limit.\n\nIt requires Prometheus >= v2.47.0.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedKeepDroppedTargets.";
          type = types.nullOr types.int;
        };
        "labelLimit" = mkOption {
          description = "Per-scrape limit on number of labels that will be accepted for a sample.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelLimit.";
          type = types.nullOr types.int;
        };
        "labelNameLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels name that will be accepted for a sample.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelNameLengthLimit.";
          type = types.nullOr types.int;
        };
        "labelValueLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels value that will be accepted for a sample.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedLabelValueLengthLimit.";
          type = types.nullOr types.int;
        };
        "listenLocal" = mkOption {
          description = "When true, the Prometheus server listens on the loopback address\ninstead of the Pod IP's address.";
          type = types.nullOr types.bool;
        };
        "logFormat" = mkOption {
          description = "Log format for Log level for Prometheus and the config-reloader sidecar.";
          type = types.nullOr types.str;
        };
        "logLevel" = mkOption {
          description = "Log level for Prometheus and the config-reloader sidecar.";
          type = types.nullOr types.str;
        };
        "maximumStartupDurationSeconds" = mkOption {
          description = "Defines the maximum time that the `prometheus` container's startup probe will wait before being considered failed. The startup probe will return success after the WAL replay is complete.\nIf set, the value should be greater than 60 (seconds). Otherwise it will be equal to 600 seconds (15 minutes).";
          type = types.nullOr types.int;
        };
        "minReadySeconds" = mkOption {
          description = "Minimum number of seconds for which a newly created Pod should be ready\nwithout any of its container crashing for it to be considered available.\nDefaults to 0 (pod will be considered available as soon as it is ready)\n\nThis is an alpha field from kubernetes 1.22 until 1.24 which requires\nenabling the StatefulSetMinReadySeconds feature gate.";
          type = types.nullOr types.int;
        };
        "mode" = mkOption {
          description = "Mode defines how the Prometheus operator deploys the PrometheusAgent pod(s).\n\n(Alpha) Using this field requires the `PrometheusAgentDaemonSet` feature gate to be enabled.";
          type = types.nullOr types.str;
        };
        "nameEscapingScheme" = mkOption {
          description = "Specifies the character escaping scheme that will be requested when scraping\nfor metric and label names that do not conform to the legacy Prometheus\ncharacter set.\n\nIt requires Prometheus >= v3.4.0.";
          type = types.nullOr types.str;
        };
        "nameValidationScheme" = mkOption {
          description = "Specifies the validation scheme for metric and label names.\n\nIt requires Prometheus >= v2.55.0.";
          type = types.nullOr types.str;
        };
        "nodeSelector" = mkOption {
          description = "Defines on which Nodes the Pods are scheduled.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "otlp" = mkOption {
          description = "Settings related to the OTLP receiver feature.\nIt requires Prometheus >= v2.55.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecOtlp");
        };
        "overrideHonorLabels" = mkOption {
          description = "When true, Prometheus resolves label conflicts by renaming the labels in the scraped data\n to u201cexported_u201d for all targets created from ServiceMonitor, PodMonitor and\nScrapeConfig objects. Otherwise the HonorLabels field of the service or pod monitor applies.\nIn practice,`overrideHonorLaels:true` enforces `honorLabels:false`\nfor all ServiceMonitor, PodMonitor and ScrapeConfig objects.";
          type = types.nullOr types.bool;
        };
        "overrideHonorTimestamps" = mkOption {
          description = "When true, Prometheus ignores the timestamps for all the targets created\nfrom service and pod monitors.\nOtherwise the HonorTimestamps field of the service or pod monitor applies.";
          type = types.nullOr types.bool;
        };
        "paused" = mkOption {
          description = "When a Prometheus deployment is paused, no actions except for deletion\nwill be performed on the underlying objects.";
          type = types.nullOr types.bool;
        };
        "persistentVolumeClaimRetentionPolicy" = mkOption {
          description = "The field controls if and how PVCs are deleted during the lifecycle of a StatefulSet.\nThe default behavior is all PVCs are retained.\nThis is an alpha field from kubernetes 1.23 until 1.26 and a beta field from 1.26.\nIt requires enabling the StatefulSetAutoDeletePVC feature gate.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPersistentVolumeClaimRetentionPolicy"
          );
        };
        "podMetadata" = mkOption {
          description = "PodMetadata configures labels and annotations which are propagated to the Prometheus pods.\n\nThe following items are reserved and cannot be overridden:\n* \"prometheus\" label, set to the name of the Prometheus object.\n* \"app.kubernetes.io/instance\" label, set to the name of the Prometheus object.\n* \"app.kubernetes.io/managed-by\" label, set to \"prometheus-operator\".\n* \"app.kubernetes.io/name\" label, set to \"prometheus\".\n* \"app.kubernetes.io/version\" label, set to the Prometheus version.\n* \"operator.prometheus.io/name\" label, set to the name of the Prometheus object.\n* \"operator.prometheus.io/shard\" label, set to the shard number of the Prometheus object.\n* \"kubectl.kubernetes.io/default-container\" annotation, set to \"prometheus\".";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMetadata");
        };
        "podMonitorNamespaceSelector" = mkOption {
          description = "Namespaces to match for PodMonitors discovery. An empty label selector\nmatches all namespaces. A null label selector (default value) matches the current\nnamespace only.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorNamespaceSelector"
          );
        };
        "podMonitorSelector" = mkOption {
          description = "PodMonitors to be selected for target discovery. An empty label selector\nmatches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorSelector"
          );
        };
        "podTargetLabels" = mkOption {
          description = "PodTargetLabels are appended to the `spec.podTargetLabels` field of all\nPodMonitor and ServiceMonitor objects.";
          type = types.nullOr (types.listOf types.str);
        };
        "portName" = mkOption {
          description = "Port name used for the pods and governing service.\nDefault: \"web\"";
          type = types.nullOr types.str;
        };
        "priorityClassName" = mkOption {
          description = "Priority class assigned to the Pods.";
          type = types.nullOr types.str;
        };
        "probeNamespaceSelector" = mkOption {
          description = "Namespaces to match for Probe discovery. An empty label\nselector matches all namespaces. A null label selector matches the\ncurrent namespace only.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeNamespaceSelector"
          );
        };
        "probeSelector" = mkOption {
          description = "Probes to be selected for target discovery. An empty label selector\nmatches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeSelector");
        };
        "prometheusExternalLabelName" = mkOption {
          description = "Name of Prometheus external label used to denote the Prometheus instance\nname. The external label will _not_ be added when the field is set to\nthe empty string (`\"\"`).\n\nDefault: \"prometheus\"";
          type = types.nullOr types.str;
        };
        "reloadStrategy" = mkOption {
          description = "Defines the strategy used to reload the Prometheus configuration.\nIf not specified, the configuration is reloaded using the /-/reload HTTP endpoint.";
          type = types.nullOr types.str;
        };
        "remoteWrite" = mkOption {
          description = "Defines the list of remote write configurations.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWrite"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "remoteWriteReceiverMessageVersions" = mkOption {
          description = "List of the protobuf message versions to accept when receiving the\nremote writes.\n\nIt requires Prometheus >= v2.54.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "replicaExternalLabelName" = mkOption {
          description = "Name of Prometheus external label used to denote the replica name.\nThe external label will _not_ be added when the field is set to the\nempty string (`\"\"`).\n\nDefault: \"prometheus_replica\"";
          type = types.nullOr types.str;
        };
        "replicas" = mkOption {
          description = "Number of replicas of each shard to deploy for a Prometheus deployment.\n`spec.replicas` multiplied by `spec.shards` is the total number of Pods\ncreated.\n\nDefault: 1";
          type = types.nullOr types.int;
        };
        "resources" = mkOption {
          description = "Defines the resources requests and limits of the 'prometheus' container.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecResources");
        };
        "routePrefix" = mkOption {
          description = "The route prefix Prometheus registers HTTP handlers for.\n\nThis is useful when using `spec.externalURL`, and a proxy is rewriting\nHTTP routes of a request, and the actual ExternalURL is still true, but\nthe server serves requests under a different route prefix. For example\nfor use with `kubectl proxy`.";
          type = types.nullOr types.str;
        };
        "runtime" = mkOption {
          description = "RuntimeConfig configures the values for the Prometheus process behavior";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRuntime");
        };
        "sampleLimit" = mkOption {
          description = "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedSampleLimit.";
          type = types.nullOr types.int;
        };
        "scrapeClasses" = mkOption {
          description = "List of scrape classes to expose to scraping objects such as\nPodMonitors, ServiceMonitors, Probes and ScrapeConfigs.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClasses"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "scrapeConfigNamespaceSelector" = mkOption {
          description = "Namespaces to match for ScrapeConfig discovery. An empty label selector\nmatches all namespaces. A null label selector matches the current\nnamespace only.\n\nNote that the ScrapeConfig custom resource definition is currently at Alpha level.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigNamespaceSelector"
          );
        };
        "scrapeConfigSelector" = mkOption {
          description = "ScrapeConfigs to be selected for target discovery. An empty label\nselector matches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.\n\nNote that the ScrapeConfig custom resource definition is currently at Alpha level.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigSelector"
          );
        };
        "scrapeFailureLogFile" = mkOption {
          description = "File to which scrape failures are logged.\nReloading the configuration will reopen the file.\n\nIf the filename has an empty path, e.g. 'file.log', The Prometheus Pods\nwill mount the file into an emptyDir volume at `/var/log/prometheus`.\nIf a full path is provided, e.g. '/var/log/prometheus/file.log', you\nmust mount a volume in the specified directory and it must be writable.\nIt requires Prometheus >= v2.55.0.";
          type = types.nullOr types.str;
        };
        "scrapeInterval" = mkOption {
          description = "Interval between consecutive scrapes.\n\nDefault: \"30s\"";
          type = types.nullOr types.str;
        };
        "scrapeProtocols" = mkOption {
          description = "The protocols to negotiate during a scrape. It tells clients the\nprotocols supported by Prometheus in order of preference (from most to least preferred).\n\nIf unset, Prometheus uses its default value.\n\nIt requires Prometheus >= v2.49.0.\n\n`PrometheusText1.0.0` requires Prometheus >= v3.0.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "scrapeTimeout" = mkOption {
          description = "Number of seconds to wait until a scrape request times out.\nThe value cannot be greater than the scrape interval otherwise the operator will reject the resource.";
          type = types.nullOr types.str;
        };
        "secrets" = mkOption {
          description = "Secrets is a list of Secrets in the same namespace as the Prometheus\nobject, which shall be mounted into the Prometheus Pods.\nEach Secret is added to the StatefulSet definition as a volume named `secret-<secret-name>`.\nThe Secrets are mounted into /etc/prometheus/secrets/<secret-name> in the 'prometheus' container.";
          type = types.nullOr (types.listOf types.str);
        };
        "securityContext" = mkOption {
          description = "SecurityContext holds pod-level security attributes and common container settings.\nThis defaults to the default PodSecurityContext.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContext"
          );
        };
        "serviceAccountName" = mkOption {
          description = "ServiceAccountName is the name of the ServiceAccount to use to run the\nPrometheus Pods.";
          type = types.nullOr types.str;
        };
        "serviceDiscoveryRole" = mkOption {
          description = "Defines the service discovery role used to discover targets from\n`ServiceMonitor` objects and Alertmanager endpoints.\n\nIf set, the value should be either \"Endpoints\" or \"EndpointSlice\".\nIf unset, the operator assumes the \"Endpoints\" role.";
          type = types.nullOr types.str;
        };
        "serviceMonitorNamespaceSelector" = mkOption {
          description = "Namespaces to match for ServicedMonitors discovery. An empty label selector\nmatches all namespaces. A null label selector (default value) matches the current\nnamespace only.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorNamespaceSelector"
          );
        };
        "serviceMonitorSelector" = mkOption {
          description = "ServiceMonitors to be selected for target discovery. An empty label\nselector matches all objects. A null label selector matches no objects.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector`, `spec.probeSelector`\nand `spec.scrapeConfigSelector` are null, the Prometheus configuration is unmanaged.\nThe Prometheus operator will ensure that the Prometheus configuration's\nSecret exists, but it is the responsibility of the user to provide the raw\ngzipped Prometheus configuration under the `prometheus.yaml.gz` key.\nThis behavior is *deprecated* and will be removed in the next major version\nof the custom resource definition. It is recommended to use\n`spec.additionalScrapeConfigs` instead.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorSelector"
          );
        };
        "serviceName" = mkOption {
          description = "The name of the service name used by the underlying StatefulSet(s) as the governing service.\nIf defined, the Service  must be created before the Prometheus/PrometheusAgent resource in the same namespace and it must define a selector that matches the pod labels.\nIf empty, the operator will create and manage a headless service named `prometheus-operated` for Prometheus resources,\nor `prometheus-agent-operated` for PrometheusAgent resources.\nWhen deploying multiple Prometheus/PrometheusAgent resources in the same namespace, it is recommended to specify a different value for each.\nSee https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#stable-network-id for more details.";
          type = types.nullOr types.str;
        };
        "shards" = mkOption {
          description = "Number of shards to distribute the scraped targets onto.\n\n`spec.replicas` multiplied by `spec.shards` is the total number of Pods\nbeing created.\n\nWhen not defined, the operator assumes only one shard.\n\nNote that scaling down shards will not reshard data onto the remaining\ninstances, it must be manually moved. Increasing shards will not reshard\ndata either but it will continue to be available from the same\ninstances. To query globally, use either\n* Thanos sidecar + querier for query federation and Thanos Ruler for rules.\n* Remote-write to send metrics to a central location.\n\nBy default, the sharding of targets is performed on:\n* The `__address__` target's metadata label for PodMonitor,\nServiceMonitor and ScrapeConfig resources.\n* The `__param_target__` label for Probe resources.\n\nUsers can define their own sharding implementation by setting the\n`__tmp_hash` label during the target discovery with relabeling\nconfiguration (either in the monitoring resources or via scrape class).\n\nYou can also disable sharding on a specific target by setting the\n`__tmp_disable_sharding` label with relabeling configuration. When\nthe label value isn't empty, all Prometheus shards will scrape the target.";
          type = types.nullOr types.int;
        };
        "storage" = mkOption {
          description = "Storage defines the storage used by Prometheus.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorage");
        };
        "targetLimit" = mkOption {
          description = "TargetLimit defines a limit on the number of scraped targets that will be accepted.\nOnly valid in Prometheus versions 2.45.0 and newer.\n\nNote that the global limit only applies to scrape objects that don't specify an explicit limit value.\nIf you want to enforce a maximum limit for all scrape objects, refer to enforcedTargetLimit.";
          type = types.nullOr types.int;
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down) which may lead to data corruption.\n\nDefaults to 600 seconds.";
          type = types.nullOr types.int;
        };
        "tolerations" = mkOption {
          description = "Defines the Pods' tolerations if specified.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTolerations")
          );
        };
        "topologySpreadConstraints" = mkOption {
          description = "Defines the pod's topology spread constraints if specified.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTopologySpreadConstraints"
            )
          );
        };
        "tracingConfig" = mkOption {
          description = "TracingConfig configures tracing in Prometheus.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfig");
        };
        "tsdb" = mkOption {
          description = "Defines the runtime reloadable configuration of the timeseries database(TSDB).\nIt requires Prometheus >= v2.39.0 or PrometheusAgent >= v2.54.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTsdb");
        };
        "version" = mkOption {
          description = "Version of Prometheus being deployed. The operator uses this information\nto generate the Prometheus StatefulSet + configuration files.\n\nIf not specified, the operator assumes the latest upstream version of\nPrometheus available at the time when the version of the operator was\nreleased.";
          type = types.nullOr types.str;
        };
        "volumeMounts" = mkOption {
          description = "VolumeMounts allows the configuration of additional VolumeMounts.\n\nVolumeMounts will be appended to other VolumeMounts in the 'prometheus'\ncontainer, that are generated as a result of StorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumeMounts"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "volumes" = mkOption {
          description = "Volumes allows the configuration of additional volumes on the output\nStatefulSet definition. Volumes specified will be appended to other\nvolumes that are generated as a result of StorageSpec objects.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumes"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "walCompression" = mkOption {
          description = "Configures compression of the write-ahead log (WAL) using Snappy.\n\nWAL compression is enabled by default for Prometheus >= 2.20.0\n\nRequires Prometheus v2.11.0 and above.";
          type = types.nullOr types.bool;
        };
        "web" = mkOption {
          description = "Defines the configuration of the Prometheus web server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWeb");
        };
      };

      config = {
        "additionalArgs" = mkOverride 1002 null;
        "additionalScrapeConfigs" = mkOverride 1002 null;
        "affinity" = mkOverride 1002 null;
        "apiserverConfig" = mkOverride 1002 null;
        "arbitraryFSAccessThroughSMs" = mkOverride 1002 null;
        "automountServiceAccountToken" = mkOverride 1002 null;
        "bodySizeLimit" = mkOverride 1002 null;
        "configMaps" = mkOverride 1002 null;
        "containers" = mkOverride 1002 null;
        "convertClassicHistogramsToNHCB" = mkOverride 1002 null;
        "dnsConfig" = mkOverride 1002 null;
        "dnsPolicy" = mkOverride 1002 null;
        "enableFeatures" = mkOverride 1002 null;
        "enableOTLPReceiver" = mkOverride 1002 null;
        "enableRemoteWriteReceiver" = mkOverride 1002 null;
        "enableServiceLinks" = mkOverride 1002 null;
        "enforcedBodySizeLimit" = mkOverride 1002 null;
        "enforcedKeepDroppedTargets" = mkOverride 1002 null;
        "enforcedLabelLimit" = mkOverride 1002 null;
        "enforcedLabelNameLengthLimit" = mkOverride 1002 null;
        "enforcedLabelValueLengthLimit" = mkOverride 1002 null;
        "enforcedNamespaceLabel" = mkOverride 1002 null;
        "enforcedSampleLimit" = mkOverride 1002 null;
        "enforcedTargetLimit" = mkOverride 1002 null;
        "excludedFromEnforcement" = mkOverride 1002 null;
        "externalLabels" = mkOverride 1002 null;
        "externalUrl" = mkOverride 1002 null;
        "hostAliases" = mkOverride 1002 null;
        "hostNetwork" = mkOverride 1002 null;
        "ignoreNamespaceSelectors" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "imagePullSecrets" = mkOverride 1002 null;
        "initContainers" = mkOverride 1002 null;
        "keepDroppedTargets" = mkOverride 1002 null;
        "labelLimit" = mkOverride 1002 null;
        "labelNameLengthLimit" = mkOverride 1002 null;
        "labelValueLengthLimit" = mkOverride 1002 null;
        "listenLocal" = mkOverride 1002 null;
        "logFormat" = mkOverride 1002 null;
        "logLevel" = mkOverride 1002 null;
        "maximumStartupDurationSeconds" = mkOverride 1002 null;
        "minReadySeconds" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "nameEscapingScheme" = mkOverride 1002 null;
        "nameValidationScheme" = mkOverride 1002 null;
        "nodeSelector" = mkOverride 1002 null;
        "otlp" = mkOverride 1002 null;
        "overrideHonorLabels" = mkOverride 1002 null;
        "overrideHonorTimestamps" = mkOverride 1002 null;
        "paused" = mkOverride 1002 null;
        "persistentVolumeClaimRetentionPolicy" = mkOverride 1002 null;
        "podMetadata" = mkOverride 1002 null;
        "podMonitorNamespaceSelector" = mkOverride 1002 null;
        "podMonitorSelector" = mkOverride 1002 null;
        "podTargetLabels" = mkOverride 1002 null;
        "portName" = mkOverride 1002 null;
        "priorityClassName" = mkOverride 1002 null;
        "probeNamespaceSelector" = mkOverride 1002 null;
        "probeSelector" = mkOverride 1002 null;
        "prometheusExternalLabelName" = mkOverride 1002 null;
        "reloadStrategy" = mkOverride 1002 null;
        "remoteWrite" = mkOverride 1002 null;
        "remoteWriteReceiverMessageVersions" = mkOverride 1002 null;
        "replicaExternalLabelName" = mkOverride 1002 null;
        "replicas" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "routePrefix" = mkOverride 1002 null;
        "runtime" = mkOverride 1002 null;
        "sampleLimit" = mkOverride 1002 null;
        "scrapeClasses" = mkOverride 1002 null;
        "scrapeConfigNamespaceSelector" = mkOverride 1002 null;
        "scrapeConfigSelector" = mkOverride 1002 null;
        "scrapeFailureLogFile" = mkOverride 1002 null;
        "scrapeInterval" = mkOverride 1002 null;
        "scrapeProtocols" = mkOverride 1002 null;
        "scrapeTimeout" = mkOverride 1002 null;
        "secrets" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "serviceAccountName" = mkOverride 1002 null;
        "serviceDiscoveryRole" = mkOverride 1002 null;
        "serviceMonitorNamespaceSelector" = mkOverride 1002 null;
        "serviceMonitorSelector" = mkOverride 1002 null;
        "serviceName" = mkOverride 1002 null;
        "shards" = mkOverride 1002 null;
        "storage" = mkOverride 1002 null;
        "targetLimit" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "tolerations" = mkOverride 1002 null;
        "topologySpreadConstraints" = mkOverride 1002 null;
        "tracingConfig" = mkOverride 1002 null;
        "tsdb" = mkOverride 1002 null;
        "version" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "volumes" = mkOverride 1002 null;
        "walCompression" = mkOverride 1002 null;
        "web" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAdditionalArgs" = {
      options = {
        "name" = mkOption {
          description = "Name of the argument, e.g. \"scrape.discovery-reload-interval\".";
          type = types.str;
        };
        "value" = mkOption {
          description = "Argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAdditionalScrapeConfigs" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinity" = {
      options = {
        "nodeAffinity" = mkOption {
          description = "Describes node affinity scheduling rules for the pod.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinity"
          );
        };
        "podAffinity" = mkOption {
          description = "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinity"
          );
        };
        "podAntiAffinity" = mkOption {
          description = "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinity"
          );
        };
      };

      config = {
        "nodeAffinity" = mkOverride 1002 null;
        "podAffinity" = mkOverride 1002 null;
        "podAntiAffinity" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node matches the corresponding matchExpressions; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to an update), the system\nmay or may not try to eventually evict the pod from its node.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution"
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "preference" = mkOption {
            description = "A node selector term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference";
          };
          "weight" = mkOption {
            description = "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "nodeSelectorTerms" = mkOption {
            description = "Required. A list of node selector terms. The terms are ORed.";
            type = types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms"
            );
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "A list of node selector requirements by node's labels.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions"
              )
            );
          };
          "matchFields" = mkOption {
            description = "A list of node selector requirements by node's fields.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields"
              )
            );
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchFields" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields" =
      {
        options = {
          "key" = mkOption {
            description = "The label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "Represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.";
            type = types.str;
          };
          "values" = mkOption {
            description = "An array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. If the operator is Gt or Lt, the values\narray must have a single element, which will be interpreted as an integer.\nThis array is replaced during a strategic merge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinity" = {
      options = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "The scheduler will prefer to schedule pods to nodes that satisfy\nthe anti-affinity expressions specified by this field, but it may choose\na node that violates one or more of the expressions. The node that is\nmost preferred is the one with the greatest sum of weights, i.e.\nfor each node that meets all of the scheduling requirements (resource\nrequest, requiredDuringScheduling anti-affinity expressions, etc.),\ncompute a sum by iterating through the elements of this field and adding\n\"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the\nnode(s) with the highest sum are the most preferred.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOption {
          description = "If the anti-affinity requirements specified by this field are not met at\nscheduling time, the pod will not be scheduled onto the node.\nIf the anti-affinity requirements specified by this field cease to be met\nat some point during pod execution (e.g. due to a pod label update), the\nsystem may or may not try to eventually evict the pod from its node.\nWhen there are multiple elements, the lists of nodes corresponding to each\npodAffinityTerm are intersected, i.e. all terms must be satisfied.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution"
            )
          );
        };
      };

      config = {
        "preferredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
        "requiredDuringSchedulingIgnoredDuringExecution" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "podAffinityTerm" = mkOption {
            description = "Required. A pod affinity term, associated with the corresponding weight.";
            type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm";
          };
          "weight" = mkOption {
            description = "weight associated with matching the corresponding podAffinityTerm,\nin the range 1-100.";
            type = types.int;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution" =
      {
        options = {
          "labelSelector" = mkOption {
            description = "A label query over a set of resources, in this case pods.\nIf it's null, this PodAffinityTerm matches with no Pods.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector"
            );
          };
          "matchLabelKeys" = mkOption {
            description = "MatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key in (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both matchLabelKeys and labelSelector.\nAlso, matchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "mismatchLabelKeys" = mkOption {
            description = "MismatchLabelKeys is a set of pod label keys to select which pods will\nbe taken into consideration. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are merged with `labelSelector` as `key notin (value)`\nto select the group of existing pods which pods will be taken into consideration\nfor the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming\npod labels will be ignored. The default value is empty.\nThe same key is forbidden to exist in both mismatchLabelKeys and labelSelector.\nAlso, mismatchLabelKeys cannot be set when labelSelector isn't set.";
            type = types.nullOr (types.listOf types.str);
          };
          "namespaceSelector" = mkOption {
            description = "A label query over the set of namespaces that the term applies to.\nThe term is applied to the union of the namespaces selected by this field\nand the ones listed in the namespaces field.\nnull selector and null or empty namespaces list means \"this pod's namespace\".\nAn empty selector ({}) matches all namespaces.";
            type = types.nullOr (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector"
            );
          };
          "namespaces" = mkOption {
            description = "namespaces specifies a static list of namespace names that the term applies to.\nThe term is applied to the union of the namespaces listed in this field\nand the ones selected by namespaceSelector.\nnull or empty namespaces list and null namespaceSelector means \"this pod's namespace\".";
            type = types.nullOr (types.listOf types.str);
          };
          "topologyKey" = mkOption {
            description = "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching\nthe labelSelector in the specified namespaces, where co-located is defined as running on a node\nwhose value of the label with key topologyKey matches that of any node on which any of the\nselected pods is running.\nEmpty topologyKey is not allowed.";
            type = types.str;
          };
        };

        config = {
          "labelSelector" = mkOverride 1002 null;
          "matchLabelKeys" = mkOverride 1002 null;
          "mismatchLabelKeys" = mkOverride 1002 null;
          "namespaceSelector" = mkOverride 1002 null;
          "namespaces" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfig" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization section for the API server.\n\nCannot be set at the same time as `basicAuth`, `bearerToken`, or\n`bearerTokenFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth configuration for the API server.\n\nCannot be set at the same time as `authorization`, `bearerToken`, or\n`bearerTokenFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigBasicAuth"
          );
        };
        "bearerToken" = mkOption {
          description = "*Warning: this field shouldn't be used because the token value appears\nin clear-text. Prefer using `authorization`.*\n\nDeprecated: this will be removed in a future release.";
          type = types.nullOr types.str;
        };
        "bearerTokenFile" = mkOption {
          description = "File to read bearer token for accessing apiserver.\n\nCannot be set at the same time as `basicAuth`, `authorization`, or `bearerToken`.\n\nDeprecated: this will be removed in a future release. Prefer using `authorization`.";
          type = types.nullOr types.str;
        };
        "host" = mkOption {
          description = "Kubernetes API address consisting of a hostname or IP address followed\nby an optional port number.";
          type = types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use for the API server.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerToken" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCa"
          );
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecApiserverConfigTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecArbitraryFSAccessThroughSMs" = {
      options = {
        "deny" = mkOption {
          description = "";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "deny" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnv"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecycle"
          );
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbe"
          );
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersPorts"
              "name"
              [
                "containerPort"
                "protocol"
              ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbe"
          );
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersResizePolicy"
            )
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersResources"
          );
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbe"
          );
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFrom"
          );
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartHttpGetHttpHeaders" =
      {
        options = {
          "name" = mkOption {
            description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
            type = types.str;
          };
          "value" = mkOption {
            description = "The header field value";
            type = types.str;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecDnsConfig" = {
      options = {
        "nameservers" = mkOption {
          description = "A list of DNS name server IP addresses.\nThis will be appended to the base nameservers generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
        "options" = mkOption {
          description = "A list of DNS resolver options.\nThis will be merged with the base options generated from DNSPolicy.\nResolution options given in Options\nwill override those that appear in the base DNSPolicy.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecDnsConfigOptions"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "searches" = mkOption {
          description = "A list of DNS search domains for host-name lookup.\nThis will be appended to the base search paths generated from DNSPolicy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "nameservers" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "searches" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecDnsConfigOptions" = {
      options = {
        "name" = mkOption {
          description = "Name is required and must be unique.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value is optional.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecExcludedFromEnforcement" = {
      options = {
        "group" = mkOption {
          description = "Group of the referent. When not specified, it defaults to `monitoring.coreos.com`";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "Name of the referent. When not set, all resources in the namespace are matched.";
          type = types.nullOr types.str;
        };
        "namespace" = mkOption {
          description = "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/";
          type = types.str;
        };
        "resource" = mkOption {
          description = "Resource of the referent.";
          type = types.str;
        };
      };

      config = {
        "group" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecHostAliases" = {
      options = {
        "hostnames" = mkOption {
          description = "Hostnames for the above IP address.";
          type = types.listOf types.str;
        };
        "ip" = mkOption {
          description = "IP address of the host file entry.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecImagePullSecrets" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainers" = {
      options = {
        "args" = mkOption {
          description = "Arguments to the entrypoint.\nThe container image's CMD is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "command" = mkOption {
          description = "Entrypoint array. Not executed within a shell.\nThe container image's ENTRYPOINT is used if this is not provided.\nVariable references $(VAR_NAME) are expanded using the container's environment. If a variable\ncannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will\nproduce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless\nof whether the variable exists or not. Cannot be updated.\nMore info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell";
          type = types.nullOr (types.listOf types.str);
        };
        "env" = mkOption {
          description = "List of environment variables to set in the container.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnv"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "envFrom" = mkOption {
          description = "List of sources to populate environment variables in the container.\nThe keys defined within a source must be a C_IDENTIFIER. All invalid keys\nwill be reported as an event when the container is starting. When a key exists in multiple\nsources, the value associated with the last source will take precedence.\nValues defined by an Env with a duplicate key will take precedence.\nCannot be updated.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvFrom")
          );
        };
        "image" = mkOption {
          description = "Container image name.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
        "imagePullPolicy" = mkOption {
          description = "Image pull policy.\nOne of Always, Never, IfNotPresent.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/containers/images#updating-images";
          type = types.nullOr types.str;
        };
        "lifecycle" = mkOption {
          description = "Actions that the management system should take in response to container lifecycle events.\nCannot be updated.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecycle"
          );
        };
        "livenessProbe" = mkOption {
          description = "Periodic probe of container liveness.\nContainer will be restarted if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbe"
          );
        };
        "name" = mkOption {
          description = "Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.";
          type = types.str;
        };
        "ports" = mkOption {
          description = "List of ports to expose from the container. Not specifying a port here\nDOES NOT prevent that port from being exposed. Any port which is\nlistening on the default \"0.0.0.0\" address inside a container will be\naccessible from the network.\nModifying this array with strategic merge patch may corrupt the data.\nFor more information See https://github.com/kubernetes/kubernetes/issues/108255.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersPorts"
              "name"
              [
                "containerPort"
                "protocol"
              ]
          );
          apply = attrsToList;
        };
        "readinessProbe" = mkOption {
          description = "Periodic probe of container service readiness.\nContainer will be removed from service endpoints if the probe fails.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbe"
          );
        };
        "resizePolicy" = mkOption {
          description = "Resources resize policy for the container.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersResizePolicy"
            )
          );
        };
        "resources" = mkOption {
          description = "Compute Resources required by this container.\nCannot be updated.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersResources"
          );
        };
        "restartPolicy" = mkOption {
          description = "RestartPolicy defines the restart behavior of individual containers in a pod.\nThis field may only be set for init containers, and the only allowed value is \"Always\".\nFor non-init containers or when this field is not specified,\nthe restart behavior is defined by the Pod's restart policy and the container type.\nSetting the RestartPolicy as \"Always\" for the init container will have the following effect:\nthis init container will be continually restarted on\nexit until all regular containers have terminated. Once all regular\ncontainers have completed, all init containers with restartPolicy \"Always\"\nwill be shut down. This lifecycle differs from normal init containers and\nis often referred to as a \"sidecar\" container. Although this init\ncontainer still starts in the init container sequence, it does not wait\nfor the container to complete before proceeding to the next init\ncontainer. Instead, the next init container starts immediately after this\ninit container is started, or after any startupProbe has successfully\ncompleted.";
          type = types.nullOr types.str;
        };
        "securityContext" = mkOption {
          description = "SecurityContext defines the security options the container should be run with.\nIf set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.\nMore info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContext"
          );
        };
        "startupProbe" = mkOption {
          description = "StartupProbe indicates that the Pod has successfully initialized.\nIf specified, no other probes are executed until this completes successfully.\nIf this probe fails, the Pod will be restarted, just as if the livenessProbe failed.\nThis can be used to provide different probe parameters at the beginning of a Pod's lifecycle,\nwhen it might take a long time to load data or warm a cache, than during steady-state operation.\nThis cannot be updated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbe"
          );
        };
        "stdin" = mkOption {
          description = "Whether this container should allocate a buffer for stdin in the container runtime. If this\nis not set, reads from stdin in the container will always result in EOF.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "stdinOnce" = mkOption {
          description = "Whether the container runtime should close the stdin channel after it has been opened by\na single attach. When stdin is true the stdin stream will remain open across multiple attach\nsessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the\nfirst client attaches to stdin, and then remains open and accepts data until the client disconnects,\nat which time stdin is closed and remains closed until the container is restarted. If this\nflag is false, a container processes that reads from stdin will never receive an EOF.\nDefault is false";
          type = types.nullOr types.bool;
        };
        "terminationMessagePath" = mkOption {
          description = "Optional: Path at which the file to which the container's termination message\nwill be written is mounted into the container's filesystem.\nMessage written is intended to be brief final status, such as an assertion failure message.\nWill be truncated by the node if greater than 4096 bytes. The total message length across\nall containers will be limited to 12kb.\nDefaults to /dev/termination-log.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "terminationMessagePolicy" = mkOption {
          description = "Indicate how the termination message should be populated. File will use the contents of\nterminationMessagePath to populate the container status message on both success and failure.\nFallbackToLogsOnError will use the last chunk of container log output if the termination\nmessage file is empty and the container exited with an error.\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller.\nDefaults to File.\nCannot be updated.";
          type = types.nullOr types.str;
        };
        "tty" = mkOption {
          description = "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.\nDefault is false.";
          type = types.nullOr types.bool;
        };
        "volumeDevices" = mkOption {
          description = "volumeDevices is the list of block devices to be used by the container.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersVolumeDevices"
              "name"
              [ "devicePath" ]
          );
          apply = attrsToList;
        };
        "volumeMounts" = mkOption {
          description = "Pod volumes to mount into the container's filesystem.\nCannot be updated.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersVolumeMounts"
              "name"
              [ "mountPath" ]
          );
          apply = attrsToList;
        };
        "workingDir" = mkOption {
          description = "Container's working directory.\nIf not specified, the container runtime's default will be used, which\nmight be configured in the container image.\nCannot be updated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "args" = mkOverride 1002 null;
        "command" = mkOverride 1002 null;
        "env" = mkOverride 1002 null;
        "envFrom" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "imagePullPolicy" = mkOverride 1002 null;
        "lifecycle" = mkOverride 1002 null;
        "livenessProbe" = mkOverride 1002 null;
        "ports" = mkOverride 1002 null;
        "readinessProbe" = mkOverride 1002 null;
        "resizePolicy" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "restartPolicy" = mkOverride 1002 null;
        "securityContext" = mkOverride 1002 null;
        "startupProbe" = mkOverride 1002 null;
        "stdin" = mkOverride 1002 null;
        "stdinOnce" = mkOverride 1002 null;
        "terminationMessagePath" = mkOverride 1002 null;
        "terminationMessagePolicy" = mkOverride 1002 null;
        "tty" = mkOverride 1002 null;
        "volumeDevices" = mkOverride 1002 null;
        "volumeMounts" = mkOverride 1002 null;
        "workingDir" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnv" = {
      options = {
        "name" = mkOption {
          description = "Name of the environment variable. Must be a C_IDENTIFIER.";
          type = types.str;
        };
        "value" = mkOption {
          description = "Variable references $(VAR_NAME) are expanded\nusing the previously defined environment variables in the container and\nany service environment variables. If a variable cannot be resolved,\nthe reference in the input string will be unchanged. Double $$ are reduced\nto a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.\n\"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".\nEscaped references will never be expanded, regardless of whether the variable\nexists or not.\nDefaults to \"\".";
          type = types.nullOr types.str;
        };
        "valueFrom" = mkOption {
          description = "Source for the environment variable's value. Cannot be used if value is not empty.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFrom"
          );
        };
      };

      config = {
        "value" = mkOverride 1002 null;
        "valueFrom" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvFrom" = {
      options = {
        "configMapRef" = mkOption {
          description = "The ConfigMap to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvFromConfigMapRef"
          );
        };
        "prefix" = mkOption {
          description = "Optional text to prepend to the name of each environment variable. Must be a C_IDENTIFIER.";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "The Secret to select from";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvFromSecretRef"
          );
        };
      };

      config = {
        "configMapRef" = mkOverride 1002 null;
        "prefix" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvFromConfigMapRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvFromSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFrom" = {
      options = {
        "configMapKeyRef" = mkOption {
          description = "Selects a key of a ConfigMap.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromConfigMapKeyRef"
          );
        };
        "fieldRef" = mkOption {
          description = "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,\nspec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromFieldRef"
          );
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromResourceFieldRef"
          );
        };
        "secretKeyRef" = mkOption {
          description = "Selects a key of a secret in the pod's namespace";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromSecretKeyRef"
          );
        };
      };

      config = {
        "configMapKeyRef" = mkOverride 1002 null;
        "fieldRef" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
        "secretKeyRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromConfigMapKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersEnvValueFromSecretKeyRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecycle" = {
      options = {
        "postStart" = mkOption {
          description = "PostStart is called immediately after a container is created. If the handler fails,\nthe container is terminated and restarted according to its restart policy.\nOther management of the container blocks until the hook completes.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStart"
          );
        };
        "preStop" = mkOption {
          description = "PreStop is called immediately before a container is terminated due to an\nAPI request or management event such as liveness/startup probe failure,\npreemption, resource contention, etc. The handler is not called if the\ncontainer crashes or exits. The Pod's termination grace period countdown begins before the\nPreStop hook is executed. Regardless of the outcome of the handler, the\ncontainer will eventually terminate within the Pod's termination grace\nperiod (unless delayed by finalizers). Other management of the container blocks until the hook completes\nor until the termination grace period is reached.\nMore info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStop"
          );
        };
        "stopSignal" = mkOption {
          description = "StopSignal defines which signal will be sent to a container when it is being stopped.\nIf not specified, the default is defined by the container runtime in use.\nStopSignal can only be set for Pods with a non-empty .spec.os.name";
          type = types.nullOr types.str;
        };
      };

      config = {
        "postStart" = mkOverride 1002 null;
        "preStop" = mkOverride 1002 null;
        "stopSignal" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStart" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartHttpGetHttpHeaders" =
      {
        options = {
          "name" = mkOption {
            description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
            type = types.str;
          };
          "value" = mkOption {
            description = "The header field value";
            type = types.str;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePostStartTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStop" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopExec"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopHttpGet"
          );
        };
        "sleep" = mkOption {
          description = "Sleep represents a duration that the container should sleep.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopSleep"
          );
        };
        "tcpSocket" = mkOption {
          description = "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept\nfor backward compatibility. There is no validation of this field and\nlifecycle hooks will fail at runtime when it is specified.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopTcpSocket"
          );
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "sleep" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopHttpGetHttpHeaders" =
      {
        options = {
          "name" = mkOption {
            description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
            type = types.str;
          };
          "value" = mkOption {
            description = "The header field value";
            type = types.str;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopSleep" = {
      options = {
        "seconds" = mkOption {
          description = "Seconds is the number of seconds to sleep.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLifecyclePreStopTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeHttpGetHttpHeaders" =
      {
        options = {
          "name" = mkOption {
            description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
            type = types.str;
          };
          "value" = mkOption {
            description = "The header field value";
            type = types.str;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersLivenessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersPorts" = {
      options = {
        "containerPort" = mkOption {
          description = "Number of port to expose on the pod's IP address.\nThis must be a valid port number, 0 < x < 65536.";
          type = types.int;
        };
        "hostIP" = mkOption {
          description = "What host IP to bind the external port to.";
          type = types.nullOr types.str;
        };
        "hostPort" = mkOption {
          description = "Number of port to expose on the host.\nIf specified, this must be a valid port number, 0 < x < 65536.\nIf HostNetwork is specified, this must match ContainerPort.\nMost containers do not need this.";
          type = types.nullOr types.int;
        };
        "name" = mkOption {
          description = "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each\nnamed port in a pod must have a unique name. Name for the port that can be\nreferred to by services.";
          type = types.nullOr types.str;
        };
        "protocol" = mkOption {
          description = "Protocol for port. Must be UDP, TCP, or SCTP.\nDefaults to \"TCP\".";
          type = types.nullOr types.str;
        };
      };

      config = {
        "hostIP" = mkOverride 1002 null;
        "hostPort" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "protocol" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeHttpGetHttpHeaders" =
      {
        options = {
          "name" = mkOption {
            description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
            type = types.str;
          };
          "value" = mkOption {
            description = "The header field value";
            type = types.str;
          };
        };

        config = { };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersReadinessProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersResizePolicy" = {
      options = {
        "resourceName" = mkOption {
          description = "Name of the resource to which this resource resize policy applies.\nSupported values: cpu, memory.";
          type = types.str;
        };
        "restartPolicy" = mkOption {
          description = "Restart policy to apply when specified resource is resized.\nIf not specified, it defaults to NotRequired.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContext" = {
      options = {
        "allowPrivilegeEscalation" = mkOption {
          description = "AllowPrivilegeEscalation controls whether a process can gain more\nprivileges than its parent process. This bool directly controls if\nthe no_new_privs flag will be set on the container process.\nAllowPrivilegeEscalation is true always when the container is:\n1) run as Privileged\n2) has CAP_SYS_ADMIN\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by this container. If set, this profile\noverrides the pod's appArmorProfile.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextAppArmorProfile"
          );
        };
        "capabilities" = mkOption {
          description = "The capabilities to add/drop when running containers.\nDefaults to the default set of capabilities granted by the container runtime.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextCapabilities"
          );
        };
        "privileged" = mkOption {
          description = "Run container in privileged mode.\nProcesses in privileged containers are essentially equivalent to root on the host.\nDefaults to false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "procMount" = mkOption {
          description = "procMount denotes the type of proc mount to use for the containers.\nThe default value is Default which uses the container runtime defaults for\nreadonly paths and masked paths.\nThis requires the ProcMountType feature flag to be enabled.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "readOnlyRootFilesystem" = mkOption {
          description = "Whether this container has a read-only root filesystem.\nDefault is false.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.bool;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to the container.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in PodSecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by this container. If seccomp options are\nprovided at both the pod & container level, the container options\noverride the pod options.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextSeccompProfile"
          );
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options from the PodSecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "allowPrivilegeEscalation" = mkOverride 1002 null;
        "appArmorProfile" = mkOverride 1002 null;
        "capabilities" = mkOverride 1002 null;
        "privileged" = mkOverride 1002 null;
        "procMount" = mkOverride 1002 null;
        "readOnlyRootFilesystem" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextCapabilities" = {
      options = {
        "add" = mkOption {
          description = "Added capabilities";
          type = types.nullOr (types.listOf types.str);
        };
        "drop" = mkOption {
          description = "Removed capabilities";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "add" = mkOverride 1002 null;
        "drop" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbe" = {
      options = {
        "exec" = mkOption {
          description = "Exec specifies a command to execute in the container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeExec"
          );
        };
        "failureThreshold" = mkOption {
          description = "Minimum consecutive failures for the probe to be considered failed after having succeeded.\nDefaults to 3. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "grpc" = mkOption {
          description = "GRPC specifies a GRPC HealthCheckRequest.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeGrpc"
          );
        };
        "httpGet" = mkOption {
          description = "HTTPGet specifies an HTTP GET request to perform.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeHttpGet"
          );
        };
        "initialDelaySeconds" = mkOption {
          description = "Number of seconds after the container has started before liveness probes are initiated.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
        "periodSeconds" = mkOption {
          description = "How often (in seconds) to perform the probe.\nDefault to 10 seconds. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "successThreshold" = mkOption {
          description = "Minimum consecutive successes for the probe to be considered successful after having failed.\nDefaults to 1. Must be 1 for liveness and startup. Minimum value is 1.";
          type = types.nullOr types.int;
        };
        "tcpSocket" = mkOption {
          description = "TCPSocket specifies a connection to a TCP port.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeTcpSocket"
          );
        };
        "terminationGracePeriodSeconds" = mkOption {
          description = "Optional duration in seconds the pod needs to terminate gracefully upon probe failure.\nThe grace period is the duration in seconds after the processes running in the pod are sent\na termination signal and the time when the processes are forcibly halted with a kill signal.\nSet this value longer than the expected cleanup time for your process.\nIf this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this\nvalue overrides the value provided by the pod spec.\nValue must be non-negative integer. The value zero indicates stop immediately via\nthe kill signal (no opportunity to shut down).\nThis is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.\nMinimum value is 1. spec.terminationGracePeriodSeconds is used if unset.";
          type = types.nullOr types.int;
        };
        "timeoutSeconds" = mkOption {
          description = "Number of seconds after which the probe times out.\nDefaults to 1 second. Minimum value is 1.\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes";
          type = types.nullOr types.int;
        };
      };

      config = {
        "exec" = mkOverride 1002 null;
        "failureThreshold" = mkOverride 1002 null;
        "grpc" = mkOverride 1002 null;
        "httpGet" = mkOverride 1002 null;
        "initialDelaySeconds" = mkOverride 1002 null;
        "periodSeconds" = mkOverride 1002 null;
        "successThreshold" = mkOverride 1002 null;
        "tcpSocket" = mkOverride 1002 null;
        "terminationGracePeriodSeconds" = mkOverride 1002 null;
        "timeoutSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeExec" = {
      options = {
        "command" = mkOption {
          description = "Command is the command line to execute inside the container, the working directory for the\ncommand  is root ('/') in the container's filesystem. The command is simply exec'd, it is\nnot run inside a shell, so traditional shell instructions ('|', etc) won't work. To use\na shell, you need to explicitly call out to that shell.\nExit status of 0 is treated as live/healthy and non-zero is unhealthy.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "command" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeGrpc" = {
      options = {
        "port" = mkOption {
          description = "Port number of the gRPC service. Number must be in the range 1 to 65535.";
          type = types.int;
        };
        "service" = mkOption {
          description = "Service is the name of the service to place in the gRPC HealthCheckRequest\n(see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "service" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeHttpGet" = {
      options = {
        "host" = mkOption {
          description = "Host name to connect to, defaults to the pod IP. You probably want to set\n\"Host\" in httpHeaders instead.";
          type = types.nullOr types.str;
        };
        "httpHeaders" = mkOption {
          description = "Custom headers to set in the request. HTTP allows repeated headers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeHttpGetHttpHeaders"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "path" = mkOption {
          description = "Path to access on the HTTP server.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Name or number of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
        "scheme" = mkOption {
          description = "Scheme to use for connecting to the host.\nDefaults to HTTP.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
        "httpHeaders" = mkOverride 1002 null;
        "path" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeHttpGetHttpHeaders" = {
      options = {
        "name" = mkOption {
          description = "The header field name.\nThis will be canonicalized upon output, so case-variant names will be understood as the same header.";
          type = types.str;
        };
        "value" = mkOption {
          description = "The header field value";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersStartupProbeTcpSocket" = {
      options = {
        "host" = mkOption {
          description = "Optional: Host name to connect to, defaults to the pod IP.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "Number or name of the port to access on the container.\nNumber must be in the range 1 to 65535.\nName must be an IANA_SVC_NAME.";
          type = types.either types.int types.str;
        };
      };

      config = {
        "host" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersVolumeDevices" = {
      options = {
        "devicePath" = mkOption {
          description = "devicePath is the path inside of the container that the device will be mapped to.";
          type = types.str;
        };
        "name" = mkOption {
          description = "name must match the name of a persistentVolumeClaim in the pod";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecInitContainersVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecOtlp" = {
      options = {
        "convertHistogramsToNHCB" = mkOption {
          description = "Configures optional translation of OTLP explicit bucket histograms into native histograms with custom buckets.\nIt requires Prometheus >= v3.4.0.";
          type = types.nullOr types.bool;
        };
        "keepIdentifyingResourceAttributes" = mkOption {
          description = "Enables adding `service.name`, `service.namespace` and `service.instance.id`\nresource attributes to the `target_info` metric, on top of converting them into the `instance` and `job` labels.\n\nIt requires Prometheus >= v3.1.0.";
          type = types.nullOr types.bool;
        };
        "promoteResourceAttributes" = mkOption {
          description = "List of OpenTelemetry Attributes that should be promoted to metric labels, defaults to none.";
          type = types.nullOr (types.listOf types.str);
        };
        "translationStrategy" = mkOption {
          description = "Configures how the OTLP receiver endpoint translates the incoming metrics.\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "convertHistogramsToNHCB" = mkOverride 1002 null;
        "keepIdentifyingResourceAttributes" = mkOverride 1002 null;
        "promoteResourceAttributes" = mkOverride 1002 null;
        "translationStrategy" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPersistentVolumeClaimRetentionPolicy" = {
      options = {
        "whenDeleted" = mkOption {
          description = "WhenDeleted specifies what happens to PVCs created from StatefulSet\nVolumeClaimTemplates when the StatefulSet is deleted. The default policy\nof `Retain` causes PVCs to not be affected by StatefulSet deletion. The\n`Delete` policy causes those PVCs to be deleted.";
          type = types.nullOr types.str;
        };
        "whenScaled" = mkOption {
          description = "WhenScaled specifies what happens to PVCs created from StatefulSet\nVolumeClaimTemplates when the StatefulSet is scaled down. The default\npolicy of `Retain` causes PVCs to not be affected by a scaledown. The\n`Delete` policy causes the associated PVCs for any excess pods above\nthe replica count to be deleted.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "whenDeleted" = mkOverride 1002 null;
        "whenScaled" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMetadata" = {
      options = {
        "annotations" = mkOption {
          description = "Annotations is an unstructured key value map stored with a resource that may be\nset by external tools to store and retrieve arbitrary metadata. They are not\nqueryable and should be preserved when modifying objects.\nMore info: http://kubernetes.io/docs/user-guide/annotations";
          type = types.nullOr (types.attrsOf types.str);
        };
        "labels" = mkOption {
          description = "Map of string keys and values that can be used to organize and categorize\n(scope and select) objects. May match selectors of replication controllers\nand services.\nMore info: http://kubernetes.io/docs/user-guide/labels";
          type = types.nullOr (types.attrsOf types.str);
        };
        "name" = mkOption {
          description = "Name must be unique within a namespace. Is required when creating resources, although\nsome resources may allow a client to request the generation of an appropriate name\nautomatically. Name is primarily intended for creation idempotence and configuration\ndefinition.\nCannot be updated.\nMore info: http://kubernetes.io/docs/user-guide/identifiers#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "annotations" = mkOverride 1002 null;
        "labels" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecPodMonitorSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeNamespaceSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecProbeSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWrite" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization section for the URL.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `sigv4`, `basicAuth`, `oauth2`, or `azureAd`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAuthorization"
          );
        };
        "azureAd" = mkOption {
          description = "AzureAD for the URL.\n\nIt requires Prometheus >= v2.45.0 or Thanos >= v0.31.0.\n\nCannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `sigv4`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAd"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth configuration for the URL.\n\nCannot be set at the same time as `sigv4`, `authorization`, `oauth2`, or `azureAd`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteBasicAuth"
          );
        };
        "bearerToken" = mkOption {
          description = "*Warning: this field shouldn't be used because the token value appears\nin clear-text. Prefer using `authorization`.*\n\nDeprecated: this will be removed in a future release.";
          type = types.nullOr types.str;
        };
        "bearerTokenFile" = mkOption {
          description = "File from which to read bearer token for the URL.\n\nDeprecated: this will be removed in a future release. Prefer using `authorization`.";
          type = types.nullOr types.str;
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.";
          type = types.nullOr types.bool;
        };
        "headers" = mkOption {
          description = "Custom HTTP headers to be sent along with each remote write request.\nBe aware that headers that are set by Prometheus itself can't be overwritten.\n\nIt requires Prometheus >= v2.25.0 or Thanos >= v0.24.0.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "messageVersion" = mkOption {
          description = "The Remote Write message's version to use when writing to the endpoint.\n\n`Version1.0` corresponds to the `prometheus.WriteRequest` protobuf message introduced in Remote Write 1.0.\n`Version2.0` corresponds to the `io.prometheus.write.v2.Request` protobuf message introduced in Remote Write 2.0.\n\nWhen `Version2.0` is selected, Prometheus will automatically be\nconfigured to append the metadata of scraped metrics to the WAL.\n\nBefore setting this field, consult with your remote storage provider\nwhat message version it supports.\n\nIt requires Prometheus >= v2.54.0 or Thanos >= v0.37.0.";
          type = types.nullOr types.str;
        };
        "metadataConfig" = mkOption {
          description = "MetadataConfig configures the sending of series metadata to the remote storage.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteMetadataConfig"
          );
        };
        "name" = mkOption {
          description = "The name of the remote write queue, it must be unique if specified. The\nname is used in metrics and logging in order to differentiate queues.\n\nIt requires Prometheus >= v2.15.0 or Thanos >= 0.24.0.";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "OAuth2 configuration for the URL.\n\nIt requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `sigv4`, `authorization`, `basicAuth`, or `azureAd`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2"
          );
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "queueConfig" = mkOption {
          description = "QueueConfig allows tuning of the remote write queue parameters.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteQueueConfig"
          );
        };
        "remoteTimeout" = mkOption {
          description = "Timeout for requests to the remote write endpoint.";
          type = types.nullOr types.str;
        };
        "roundRobinDNS" = mkOption {
          description = "When enabled:\n    - The remote-write mechanism will resolve the hostname via DNS.\n    - It will randomly select one of the resolved IP addresses and connect to it.\n\nWhen disabled (default behavior):\n    - The Go standard library will handle hostname resolution.\n    - It will attempt connections to each resolved IP address sequentially.\n\nNote: The connection timeout applies to the entire resolution and connection process.\n      If disabled, the timeout is distributed across all connection attempts.\n\nIt requires Prometheus >= v3.1.0 or Thanos >= v0.38.0.";
          type = types.nullOr types.bool;
        };
        "sendExemplars" = mkOption {
          description = "Enables sending of exemplars over remote write. Note that\nexemplar-storage itself must be enabled using the `spec.enableFeatures`\noption for exemplars to be scraped in the first place.\n\nIt requires Prometheus >= v2.27.0 or Thanos >= v0.24.0.";
          type = types.nullOr types.bool;
        };
        "sendNativeHistograms" = mkOption {
          description = "Enables sending of native histograms, also known as sparse histograms\nover remote write.\n\nIt requires Prometheus >= v2.40.0 or Thanos >= v0.30.0.";
          type = types.nullOr types.bool;
        };
        "sigv4" = mkOption {
          description = "Sigv4 allows to configures AWS's Signature Verification 4 for the URL.\n\nIt requires Prometheus >= v2.26.0 or Thanos >= v0.24.0.\n\nCannot be set at the same time as `authorization`, `basicAuth`, `oauth2`, or `azureAd`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteSigv4"
          );
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use for the URL.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfig"
          );
        };
        "url" = mkOption {
          description = "The URL of the endpoint to send samples to.";
          type = types.str;
        };
        "writeRelabelConfigs" = mkOption {
          description = "The list of remote write relabel configurations.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteWriteRelabelConfigs"
            )
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "azureAd" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "bearerToken" = mkOverride 1002 null;
        "bearerTokenFile" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "headers" = mkOverride 1002 null;
        "messageVersion" = mkOverride 1002 null;
        "metadataConfig" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "queueConfig" = mkOverride 1002 null;
        "remoteTimeout" = mkOverride 1002 null;
        "roundRobinDNS" = mkOverride 1002 null;
        "sendExemplars" = mkOverride 1002 null;
        "sendNativeHistograms" = mkOverride 1002 null;
        "sigv4" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "writeRelabelConfigs" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAd" = {
      options = {
        "cloud" = mkOption {
          description = "The Azure Cloud. Options are 'AzurePublic', 'AzureChina', or 'AzureGovernment'.";
          type = types.nullOr types.str;
        };
        "managedIdentity" = mkOption {
          description = "ManagedIdentity defines the Azure User-assigned Managed identity.\nCannot be set at the same time as `oauth` or `sdk`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdManagedIdentity"
          );
        };
        "oauth" = mkOption {
          description = "OAuth defines the oauth config that is being used to authenticate.\nCannot be set at the same time as `managedIdentity` or `sdk`.\n\nIt requires Prometheus >= v2.48.0 or Thanos >= v0.31.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdOauth"
          );
        };
        "sdk" = mkOption {
          description = "SDK defines the Azure SDK config that is being used to authenticate.\nSee https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication\nCannot be set at the same time as `oauth` or `managedIdentity`.\n\nIt requires Prometheus >= v2.52.0 or Thanos >= v0.36.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdSdk"
          );
        };
      };

      config = {
        "cloud" = mkOverride 1002 null;
        "managedIdentity" = mkOverride 1002 null;
        "oauth" = mkOverride 1002 null;
        "sdk" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdManagedIdentity" = {
      options = {
        "clientId" = mkOption {
          description = "The client id";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdOauth" = {
      options = {
        "clientId" = mkOption {
          description = "`clientID` is the clientId of the Azure Active Directory application that is being used to authenticate.";
          type = types.str;
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the client secret of the Azure Active Directory application that is being used to authenticate.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdOauthClientSecret";
        };
        "tenantId" = mkOption {
          description = "`tenantId` is the tenant ID of the Azure Active Directory application that is being used to authenticate.";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdOauthClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteAzureAdSdk" = {
      options = {
        "tenantId" = mkOption {
          description = "`tenantId` is the tenant ID of the azure active directory application that is being used to authenticate.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "tenantId" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteMetadataConfig" = {
      options = {
        "maxSamplesPerSend" = mkOption {
          description = "MaxSamplesPerSend is the maximum number of metadata samples per send.\n\nIt requires Prometheus >= v2.29.0.";
          type = types.nullOr types.int;
        };
        "send" = mkOption {
          description = "Defines whether metric metadata is sent to the remote storage or not.";
          type = types.nullOr types.bool;
        };
        "sendInterval" = mkOption {
          description = "Defines how frequently metric metadata is sent to the remote storage.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "maxSamplesPerSend" = mkOverride 1002 null;
        "send" = mkOverride 1002 null;
        "sendInterval" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteQueueConfig" = {
      options = {
        "batchSendDeadline" = mkOption {
          description = "BatchSendDeadline is the maximum time a sample will wait in buffer.";
          type = types.nullOr types.str;
        };
        "capacity" = mkOption {
          description = "Capacity is the number of samples to buffer per shard before we start\ndropping them.";
          type = types.nullOr types.int;
        };
        "maxBackoff" = mkOption {
          description = "MaxBackoff is the maximum retry delay.";
          type = types.nullOr types.str;
        };
        "maxRetries" = mkOption {
          description = "MaxRetries is the maximum number of times to retry a batch on recoverable errors.";
          type = types.nullOr types.int;
        };
        "maxSamplesPerSend" = mkOption {
          description = "MaxSamplesPerSend is the maximum number of samples per send.";
          type = types.nullOr types.int;
        };
        "maxShards" = mkOption {
          description = "MaxShards is the maximum number of shards, i.e. amount of concurrency.";
          type = types.nullOr types.int;
        };
        "minBackoff" = mkOption {
          description = "MinBackoff is the initial retry delay. Gets doubled for every retry.";
          type = types.nullOr types.str;
        };
        "minShards" = mkOption {
          description = "MinShards is the minimum number of shards, i.e. amount of concurrency.";
          type = types.nullOr types.int;
        };
        "retryOnRateLimit" = mkOption {
          description = "Retry upon receiving a 429 status code from the remote-write storage.\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.";
          type = types.nullOr types.bool;
        };
        "sampleAgeLimit" = mkOption {
          description = "SampleAgeLimit drops samples older than the limit.\nIt requires Prometheus >= v2.50.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "batchSendDeadline" = mkOverride 1002 null;
        "capacity" = mkOverride 1002 null;
        "maxBackoff" = mkOverride 1002 null;
        "maxRetries" = mkOverride 1002 null;
        "maxSamplesPerSend" = mkOverride 1002 null;
        "maxShards" = mkOverride 1002 null;
        "minBackoff" = mkOverride 1002 null;
        "minShards" = mkOverride 1002 null;
        "retryOnRateLimit" = mkOverride 1002 null;
        "sampleAgeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteSigv4" = {
      options = {
        "accessKey" = mkOption {
          description = "AccessKey is the AWS API key. If not specified, the environment variable\n`AWS_ACCESS_KEY_ID` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteSigv4AccessKey"
          );
        };
        "profile" = mkOption {
          description = "Profile is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "Region is the AWS region. If blank, the region from the default credentials chain used.";
          type = types.nullOr types.str;
        };
        "roleArn" = mkOption {
          description = "RoleArn is the named AWS profile used to authenticate.";
          type = types.nullOr types.str;
        };
        "secretKey" = mkOption {
          description = "SecretKey is the AWS API secret. If not specified, the environment\nvariable `AWS_SECRET_ACCESS_KEY` is used.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteSigv4SecretKey"
          );
        };
      };

      config = {
        "accessKey" = mkOverride 1002 null;
        "profile" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "roleArn" = mkOverride 1002 null;
        "secretKey" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteSigv4AccessKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteSigv4SecretKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCa"
          );
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRemoteWriteWriteRelabelConfigs" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecResources" = {
      options = {
        "claims" = mkOption {
          description = "Claims lists the names of resources, defined in spec.resourceClaims,\nthat are used by this container.\n\nThis is an alpha field and requires enabling the\nDynamicResourceAllocation feature gate.\n\nThis field is immutable. It can only be set for containers.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecResourcesClaims"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "claims" = mkOverride 1002 null;
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecResourcesClaims" = {
      options = {
        "name" = mkOption {
          description = "Name must match the name of one entry in pod.spec.resourceClaims of\nthe Pod where this field is used. It makes that resource available\ninside a container.";
          type = types.str;
        };
        "request" = mkOption {
          description = "Request is the name chosen for a request in the referenced claim.\nIf empty, everything from the claim is made available, otherwise\nonly the result of this request.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "request" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecRuntime" = {
      options = {
        "goGC" = mkOption {
          description = "The Go garbage collection target percentage. Lowering this number may increase the CPU usage.\nSee: https://tip.golang.org/doc/gc-guide#GOGC";
          type = types.nullOr types.int;
        };
      };

      config = {
        "goGC" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClasses" = {
      options = {
        "attachMetadata" = mkOption {
          description = "AttachMetadata configures additional metadata to the discovered targets.\nWhen the scrape object defines its own configuration, it takes\nprecedence over the scrape class configuration.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesAttachMetadata"
          );
        };
        "authorization" = mkOption {
          description = "Authorization section for the ScrapeClass.\nIt will only apply if the scrape resource doesn't specify any Authorization.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesAuthorization"
          );
        };
        "default" = mkOption {
          description = "Default indicates that the scrape applies to all scrape objects that\ndon't configure an explicit scrape class name.\n\nOnly one scrape class can be set as the default.";
          type = types.nullOr types.bool;
        };
        "fallbackScrapeProtocol" = mkOption {
          description = "The protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.\nIt will only apply if the scrape resource doesn't specify any FallbackScrapeProtocol\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
        "metricRelabelings" = mkOption {
          description = "MetricRelabelings configures the relabeling rules to apply to all samples before ingestion.\n\nThe Operator adds the scrape class metric relabelings defined here.\nThen the Operator adds the target-specific metric relabelings defined in ServiceMonitors, PodMonitors, Probes and ScrapeConfigs.\nThen the Operator adds namespace enforcement relabeling rule, specified in '.spec.enforcedNamespaceLabel'.\n\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesMetricRelabelings"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the scrape class.";
          type = types.str;
        };
        "relabelings" = mkOption {
          description = "Relabelings configures the relabeling rules to apply to all scrape targets.\n\nThe Operator automatically adds relabelings for a few standard Kubernetes fields\nlike `__meta_kubernetes_namespace` and `__meta_kubernetes_service_name`.\nThen the Operator adds the scrape class relabelings defined here.\nThen the Operator adds the target-specific relabelings defined in the scrape object.\n\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesRelabelings"
            )
          );
        };
        "tlsConfig" = mkOption {
          description = "TLSConfig defines the TLS settings to use for the scrape. When the\nscrape objects define their own CA, certificate and/or key, they take\nprecedence over the corresponding scrape class fields.\n\nFor now only the `caFile`, `certFile` and `keyFile` fields are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfig"
          );
        };
      };

      config = {
        "attachMetadata" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "default" = mkOverride 1002 null;
        "fallbackScrapeProtocol" = mkOverride 1002 null;
        "metricRelabelings" = mkOverride 1002 null;
        "relabelings" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesAttachMetadata" = {
      options = {
        "node" = mkOption {
          description = "When set to true, Prometheus attaches node metadata to the discovered\ntargets.\n\nThe Prometheus service account must have the `list` and `watch`\npermissions on the `Nodes` objects.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "node" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesAuthorizationCredentials"
          );
        };
        "credentialsFile" = mkOption {
          description = "File to read a secret from, mutually exclusive with `credentials`.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "credentialsFile" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesMetricRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCa"
          );
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeClassesTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecScrapeConfigSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContext" = {
      options = {
        "appArmorProfile" = mkOption {
          description = "appArmorProfile is the AppArmor options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextAppArmorProfile"
          );
        };
        "fsGroup" = mkOption {
          description = "A special supplemental group that applies to all containers in a pod.\nSome volume types allow the Kubelet to change the ownership of that volume\nto be owned by the pod:\n\n1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "fsGroupChangePolicy" = mkOption {
          description = "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume\nbefore being exposed inside Pod. This field will only apply to\nvolume types which support fsGroup based ownership(and permissions).\nIt will have no effect on ephemeral volume types such as: secret, configmaps\nand emptydir.\nValid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "runAsGroup" = mkOption {
          description = "The GID to run the entrypoint of the container process.\nUses runtime default if unset.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "runAsNonRoot" = mkOption {
          description = "Indicates that the container must run as a non-root user.\nIf true, the Kubelet will validate the image at runtime to ensure that it\ndoes not run as UID 0 (root) and fail to start the container if it does.\nIf unset or false, no such validation will be performed.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.bool;
        };
        "runAsUser" = mkOption {
          description = "The UID to run the entrypoint of the container process.\nDefaults to user specified in image metadata if unspecified.\nMay also be set in SecurityContext.  If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence\nfor that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.int;
        };
        "seLinuxChangePolicy" = mkOption {
          description = "seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.\nIt has no effect on nodes that do not support SELinux or to volumes does not support SELinux.\nValid values are \"MountOption\" and \"Recursive\".\n\n\"Recursive\" means relabeling of all files on all Pod volumes by the container runtime.\nThis may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.\n\n\"MountOption\" mounts all eligible Pod volumes with `-o context` mount option.\nThis requires all Pods that share the same volume to use the same SELinux label.\nIt is not possible to share the same volume among privileged and unprivileged Pods.\nEligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes\nwhose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their\nCSIDriver instance. Other volumes are always re-labelled recursively.\n\"MountOption\" value is allowed only when SELinuxMount feature gate is enabled.\n\nIf not specified and SELinuxMount feature gate is enabled, \"MountOption\" is used.\nIf not specified and SELinuxMount feature gate is disabled, \"MountOption\" is used for ReadWriteOncePod volumes\nand \"Recursive\" for all other volumes.\n\nThis field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.\n\nAll Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "seLinuxOptions" = mkOption {
          description = "The SELinux context to be applied to all containers.\nIf unspecified, the container runtime will allocate a random SELinux context for each\ncontainer.  May also be set in SecurityContext.  If set in\nboth SecurityContext and PodSecurityContext, the value specified in SecurityContext\ntakes precedence for that container.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextSeLinuxOptions"
          );
        };
        "seccompProfile" = mkOption {
          description = "The seccomp options to use by the containers in this pod.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextSeccompProfile"
          );
        };
        "supplementalGroups" = mkOption {
          description = "A list of groups applied to the first process run in each container, in\naddition to the container's primary GID and fsGroup (if specified).  If\nthe SupplementalGroupsPolicy feature is enabled, the\nsupplementalGroupsPolicy field determines whether these are in addition\nto or instead of any group memberships defined in the container image.\nIf unspecified, no additional groups are added, though group memberships\ndefined in the container image may still be used, depending on the\nsupplementalGroupsPolicy field.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (types.listOf types.int);
        };
        "supplementalGroupsPolicy" = mkOption {
          description = "Defines how supplemental groups of the first container processes are calculated.\nValid values are \"Merge\" and \"Strict\". If not specified, \"Merge\" is used.\n(Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled\nand the container runtime must implement support for this feature.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr types.str;
        };
        "sysctls" = mkOption {
          description = "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported\nsysctls (by the container runtime) might fail to launch.\nNote that this field cannot be set when spec.os.name is windows.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextSysctls"
              "name"
              [ ]
          );
          apply = attrsToList;
        };
        "windowsOptions" = mkOption {
          description = "The Windows specific settings applied to all containers.\nIf unspecified, the options within a container's SecurityContext will be used.\nIf set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.\nNote that this field cannot be set when spec.os.name is linux.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextWindowsOptions"
          );
        };
      };

      config = {
        "appArmorProfile" = mkOverride 1002 null;
        "fsGroup" = mkOverride 1002 null;
        "fsGroupChangePolicy" = mkOverride 1002 null;
        "runAsGroup" = mkOverride 1002 null;
        "runAsNonRoot" = mkOverride 1002 null;
        "runAsUser" = mkOverride 1002 null;
        "seLinuxChangePolicy" = mkOverride 1002 null;
        "seLinuxOptions" = mkOverride 1002 null;
        "seccompProfile" = mkOverride 1002 null;
        "supplementalGroups" = mkOverride 1002 null;
        "supplementalGroupsPolicy" = mkOverride 1002 null;
        "sysctls" = mkOverride 1002 null;
        "windowsOptions" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextAppArmorProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile loaded on the node that should be used.\nThe profile must be preconfigured on the node to work.\nMust match the loaded name of the profile.\nMust be set if and only if type is \"Localhost\".";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of AppArmor profile will be applied.\nValid options are:\n  Localhost - a profile pre-loaded on the node.\n  RuntimeDefault - the container runtime's default profile.\n  Unconfined - no AppArmor enforcement.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextSeLinuxOptions" = {
      options = {
        "level" = mkOption {
          description = "Level is SELinux level label that applies to the container.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role is a SELinux role label that applies to the container.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "Type is a SELinux type label that applies to the container.";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "User is a SELinux user label that applies to the container.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "level" = mkOverride 1002 null;
        "role" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextSeccompProfile" = {
      options = {
        "localhostProfile" = mkOption {
          description = "localhostProfile indicates a profile defined in a file on the node should be used.\nThe profile must be preconfigured on the node to work.\nMust be a descending path, relative to the kubelet's configured seccomp profile location.\nMust be set if type is \"Localhost\". Must NOT be set for any other type.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "type indicates which kind of seccomp profile will be applied.\nValid options are:\n\nLocalhost - a profile defined in a file on the node should be used.\nRuntimeDefault - the container runtime default profile should be used.\nUnconfined - no profile should be applied.";
          type = types.str;
        };
      };

      config = {
        "localhostProfile" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextSysctls" = {
      options = {
        "name" = mkOption {
          description = "Name of a property to set";
          type = types.str;
        };
        "value" = mkOption {
          description = "Value of a property to set";
          type = types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecSecurityContextWindowsOptions" = {
      options = {
        "gmsaCredentialSpec" = mkOption {
          description = "GMSACredentialSpec is where the GMSA admission webhook\n(https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the\nGMSA credential spec named by the GMSACredentialSpecName field.";
          type = types.nullOr types.str;
        };
        "gmsaCredentialSpecName" = mkOption {
          description = "GMSACredentialSpecName is the name of the GMSA credential spec to use.";
          type = types.nullOr types.str;
        };
        "hostProcess" = mkOption {
          description = "HostProcess determines if a container should be run as a 'Host Process' container.\nAll of a Pod's containers must have the same effective HostProcess value\n(it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).\nIn addition, if HostProcess is true then HostNetwork must also be set to true.";
          type = types.nullOr types.bool;
        };
        "runAsUserName" = mkOption {
          description = "The UserName in Windows to run the entrypoint of the container process.\nDefaults to the user specified in image metadata if unspecified.\nMay also be set in PodSecurityContext. If set in both SecurityContext and\nPodSecurityContext, the value specified in SecurityContext takes precedence.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "gmsaCredentialSpec" = mkOverride 1002 null;
        "gmsaCredentialSpecName" = mkOverride 1002 null;
        "hostProcess" = mkOverride 1002 null;
        "runAsUserName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorNamespaceSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorNamespaceSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorNamespaceSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecServiceMonitorSelectorMatchExpressions" = {
      options = {
        "key" = mkOption {
          description = "key is the label key that the selector applies to.";
          type = types.str;
        };
        "operator" = mkOption {
          description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
          type = types.str;
        };
        "values" = mkOption {
          description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "values" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorage" = {
      options = {
        "disableMountSubPath" = mkOption {
          description = "Deprecated: subPath usage will be removed in a future release.";
          type = types.nullOr types.bool;
        };
        "emptyDir" = mkOption {
          description = "EmptyDirVolumeSource to be used by the StatefulSet.\nIf specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEmptyDir"
          );
        };
        "ephemeral" = mkOption {
          description = "EphemeralVolumeSource to be used by the StatefulSet.\nThis is a beta field in k8s 1.21 and GA in 1.15.\nFor lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.\nMore info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeral"
          );
        };
        "volumeClaimTemplate" = mkOption {
          description = "Defines the PVC spec to be used by the Prometheus StatefulSets.\nThe easiest way to use a volume that cannot be automatically provisioned\nis to use a label selector alongside manually created PersistentVolumes.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplate"
          );
        };
      };

      config = {
        "disableMountSubPath" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecDataSource" =
      {
        options = {
          "apiGroup" = mkOption {
            description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
            type = types.nullOr types.str;
          };
          "kind" = mkOption {
            description = "Kind is the type of resource being referenced";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name is the name of resource being referenced";
            type = types.str;
          };
        };

        config = {
          "apiGroup" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef" =
      {
        options = {
          "apiGroup" = mkOption {
            description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
            type = types.nullOr types.str;
          };
          "kind" = mkOption {
            description = "Kind is the type of resource being referenced";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name is the name of resource being referenced";
            type = types.str;
          };
          "namespace" = mkOption {
            description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
            type = types.nullOr types.str;
          };
        };

        config = {
          "apiGroup" = mkOverride 1002 null;
          "namespace" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecResources" =
      {
        options = {
          "limits" = mkOption {
            description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
            type = types.nullOr (types.attrsOf (types.either types.int types.str));
          };
          "requests" = mkOption {
            description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
            type = types.nullOr (types.attrsOf (types.either types.int types.str));
          };
        };

        config = {
          "limits" = mkOverride 1002 null;
          "requests" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplate" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "Defines the desired characteristics of a volume requested by a pod author.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpec"
          );
        };
        "status" = mkOption {
          description = "Deprecated: this field is never set.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateStatus"
          );
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
        "spec" = mkOverride 1002 null;
        "status" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecDataSource" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecDataSourceRef" = {
      options = {
        "apiGroup" = mkOption {
          description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is the type of resource being referenced";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name is the name of resource being referenced";
          type = types.str;
        };
        "namespace" = mkOption {
          description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiGroup" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecResources" = {
      options = {
        "limits" = mkOption {
          description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "requests" = mkOption {
          description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
      };

      config = {
        "limits" = mkOverride 1002 null;
        "requests" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateStatus" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the actual access modes the volume backing the PVC has.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "allocatedResourceStatuses" = mkOption {
          description = "allocatedResourceStatuses stores status of resource being resized for the given PVC.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nClaimResourceStatus can be in any of following states:\n\t- ControllerResizeInProgress:\n\t\tState set when resize controller starts resizing the volume in control-plane.\n\t- ControllerResizeFailed:\n\t\tState set when resize has failed in resize controller with a terminal error.\n\t- NodeResizePending:\n\t\tState set when resize controller has finished resizing the volume but further resizing of\n\t\tvolume is needed on the node.\n\t- NodeResizeInProgress:\n\t\tState set when kubelet starts resizing the volume.\n\t- NodeResizeFailed:\n\t\tState set when resizing has failed in kubelet with a terminal error. Transient errors don't set\n\t\tNodeResizeFailed.\nFor example: if expanding a PVC for more capacity - this field can be one of the following states:\n\t- pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"\n     - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\"\nWhen this field is not set, it means that no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "allocatedResources" = mkOption {
          description = "allocatedResources tracks the resources allocated to a PVC including its capacity.\nKey names follow standard Kubernetes label syntax. Valid values are either:\n\t* Un-prefixed keys:\n\t\t- storage - the capacity of the volume.\n\t* Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\nApart from above values - keys that are unprefixed or have kubernetes.io prefix are considered\nreserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation\nis requested.\nFor storage quota, the larger value from allocatedResources and PVC.spec.resources is used.\nIf allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.\nIf a volume expansion capacity request is lowered, allocatedResources is only\nlowered if there are no expansion operations in progress and if the actual volume capacity\nis equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown resourceName\nshould ignore the update for the purpose it was designed. For example - a controller that\nonly is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid\nresources associated with PVC.\n\nThis is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "capacity" = mkOption {
          description = "capacity represents the actual resources of the underlying volume.";
          type = types.nullOr (types.attrsOf (types.either types.int types.str));
        };
        "conditions" = mkOption {
          description = "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being\nresized then the Condition will be set to 'Resizing'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateStatusConditions"
            )
          );
        };
        "currentVolumeAttributesClassName" = mkOption {
          description = "currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.\nWhen unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr types.str;
        };
        "modifyVolumeStatus" = mkOption {
          description = "ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.\nWhen this is unset, there is no ModifyVolume operation being attempted.\nThis is a beta field and requires enabling VolumeAttributesClass feature (off by default).";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus"
          );
        };
        "phase" = mkOption {
          description = "phase represents the current phase of PersistentVolumeClaim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "allocatedResourceStatuses" = mkOverride 1002 null;
        "allocatedResources" = mkOverride 1002 null;
        "capacity" = mkOverride 1002 null;
        "conditions" = mkOverride 1002 null;
        "currentVolumeAttributesClassName" = mkOverride 1002 null;
        "modifyVolumeStatus" = mkOverride 1002 null;
        "phase" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateStatusConditions" = {
      options = {
        "lastProbeTime" = mkOption {
          description = "lastProbeTime is the time we probed the condition.";
          type = types.nullOr types.str;
        };
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time the condition transitioned from one status to another.";
          type = types.nullOr types.str;
        };
        "message" = mkOption {
          description = "message is the human-readable message indicating details about last transition.";
          type = types.nullOr types.str;
        };
        "reason" = mkOption {
          description = "reason is a unique, this should be a short, machine understandable string that gives the reason\nfor condition's last transition. If it reports \"Resizing\" that means the underlying\npersistent volume is being resized.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status is the status of the condition.\nCan be True, False, Unknown.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type is the type of the condition.\nMore info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about";
          type = types.str;
        };
      };

      config = {
        "lastProbeTime" = mkOverride 1002 null;
        "lastTransitionTime" = mkOverride 1002 null;
        "message" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus" =
      {
        options = {
          "status" = mkOption {
            description = "status is the status of the ControllerModifyVolume operation. It can be in any of following states:\n - Pending\n   Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as\n   the specified VolumeAttributesClass not existing.\n - InProgress\n   InProgress indicates that the volume is being modified.\n - Infeasible\n  Infeasible indicates that the request has been rejected as invalid by the CSI driver. To\n\t  resolve the error, a valid VolumeAttributesClass needs to be specified.\nNote: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.";
            type = types.str;
          };
          "targetVolumeAttributesClassName" = mkOption {
            description = "targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled";
            type = types.nullOr types.str;
          };
        };

        config = {
          "targetVolumeAttributesClassName" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTolerations" = {
      options = {
        "effect" = mkOption {
          description = "Effect indicates the taint effect to match. Empty means match all taint effects.\nWhen specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.";
          type = types.nullOr types.str;
        };
        "key" = mkOption {
          description = "Key is the taint key that the toleration applies to. Empty means match all taint keys.\nIf the key is empty, operator must be Exists; this combination means to match all values and all keys.";
          type = types.nullOr types.str;
        };
        "operator" = mkOption {
          description = "Operator represents a key's relationship to the value.\nValid operators are Exists and Equal. Defaults to Equal.\nExists is equivalent to wildcard for value, so that a pod can\ntolerate all taints of a particular category.";
          type = types.nullOr types.str;
        };
        "tolerationSeconds" = mkOption {
          description = "TolerationSeconds represents the period of time the toleration (which must be\nof effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,\nit is not set, which means tolerate the taint forever (do not evict). Zero and\nnegative values will be treated as 0 (evict immediately) by the system.";
          type = types.nullOr types.int;
        };
        "value" = mkOption {
          description = "Value is the taint value the toleration matches to.\nIf the operator is Exists, the value should be empty, otherwise just a regular string.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "effect" = mkOverride 1002 null;
        "key" = mkOverride 1002 null;
        "operator" = mkOverride 1002 null;
        "tolerationSeconds" = mkOverride 1002 null;
        "value" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTopologySpreadConstraints" = {
      options = {
        "additionalLabelSelectors" = mkOption {
          description = "Defines what Prometheus Operator managed labels should be added to labelSelector on the topologySpreadConstraint.";
          type = types.nullOr types.str;
        };
        "labelSelector" = mkOption {
          description = "LabelSelector is used to find matching pods.\nPods that match this label selector are counted to determine the number of pods\nin their corresponding topology domain.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTopologySpreadConstraintsLabelSelector"
          );
        };
        "matchLabelKeys" = mkOption {
          description = "MatchLabelKeys is a set of pod label keys to select the pods over which\nspreading will be calculated. The keys are used to lookup values from the\nincoming pod labels, those key-value labels are ANDed with labelSelector\nto select the group of existing pods over which spreading will be calculated\nfor the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.\nMatchLabelKeys cannot be set when LabelSelector isn't set.\nKeys that don't exist in the incoming pod labels will\nbe ignored. A null or empty list means only match against labelSelector.\n\nThis is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).";
          type = types.nullOr (types.listOf types.str);
        };
        "maxSkew" = mkOption {
          description = "MaxSkew describes the degree to which pods may be unevenly distributed.\nWhen `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference\nbetween the number of matching pods in the target topology and the global minimum.\nThe global minimum is the minimum number of matching pods in an eligible domain\nor zero if the number of eligible domains is less than MinDomains.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 2/2/1:\nIn this case, the global minimum is 1.\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |   P   |\n- if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;\nscheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)\nviolate MaxSkew(1).\n- if MaxSkew is 2, incoming pod can be scheduled onto any zone.\nWhen `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence\nto topologies that satisfy it.\nIt's a required field. Default value is 1 and 0 is not allowed.";
          type = types.int;
        };
        "minDomains" = mkOption {
          description = "MinDomains indicates a minimum number of eligible domains.\nWhen the number of eligible domains with matching topology keys is less than minDomains,\nPod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed.\nAnd when the number of eligible domains with matching topology keys equals or greater than minDomains,\nthis value has no effect on scheduling.\nAs a result, when the number of eligible domains is less than minDomains,\nscheduler won't schedule more than maxSkew Pods to those domains.\nIf value is nil, the constraint behaves as if MinDomains is equal to 1.\nValid values are integers greater than 0.\nWhen value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same\nlabelSelector spread as 2/2/2:\n| zone1 | zone2 | zone3 |\n|  P P  |  P P  |  P P  |\nThe number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0.\nIn this situation, new pod with the same labelSelector cannot be scheduled,\nbecause computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,\nit will violate MaxSkew.";
          type = types.nullOr types.int;
        };
        "nodeAffinityPolicy" = mkOption {
          description = "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector\nwhen calculating pod topology spread skew. Options are:\n- Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.\n- Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy.";
          type = types.nullOr types.str;
        };
        "nodeTaintsPolicy" = mkOption {
          description = "NodeTaintsPolicy indicates how we will treat node taints when calculating\npod topology spread skew. Options are:\n- Honor: nodes without taints, along with tainted nodes for which the incoming pod\nhas a toleration, are included.\n- Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy.";
          type = types.nullOr types.str;
        };
        "topologyKey" = mkOption {
          description = "TopologyKey is the key of node labels. Nodes that have a label with this key\nand identical values are considered to be in the same topology.\nWe consider each <key, value> as a \"bucket\", and try to put balanced number\nof pods into each bucket.\nWe define a domain as a particular instance of a topology.\nAlso, we define an eligible domain as a domain whose nodes meet the requirements of\nnodeAffinityPolicy and nodeTaintsPolicy.\ne.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology.\nAnd, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology.\nIt's a required field.";
          type = types.str;
        };
        "whenUnsatisfiable" = mkOption {
          description = "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy\nthe spread constraint.\n- DoNotSchedule (default) tells the scheduler not to schedule it.\n- ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod\nif and only if every possible node assignment for that pod would violate\n\"MaxSkew\" on some topology.\nFor example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same\nlabelSelector spread as 3/1/1:\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\nIf WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled\nto zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies\nMaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler\nwon't make it *more* imbalanced.\nIt's a required field.";
          type = types.str;
        };
      };

      config = {
        "additionalLabelSelectors" = mkOverride 1002 null;
        "labelSelector" = mkOverride 1002 null;
        "matchLabelKeys" = mkOverride 1002 null;
        "minDomains" = mkOverride 1002 null;
        "nodeAffinityPolicy" = mkOverride 1002 null;
        "nodeTaintsPolicy" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTopologySpreadConstraintsLabelSelector" = {
      options = {
        "matchExpressions" = mkOption {
          description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTopologySpreadConstraintsLabelSelectorMatchExpressions"
            )
          );
        };
        "matchLabels" = mkOption {
          description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "matchExpressions" = mkOverride 1002 null;
        "matchLabels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTopologySpreadConstraintsLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfig" = {
      options = {
        "clientType" = mkOption {
          description = "Client used to export the traces. Supported values are `http` or `grpc`.";
          type = types.nullOr types.str;
        };
        "compression" = mkOption {
          description = "Compression key for supported compression types. The only supported value is `gzip`.";
          type = types.nullOr types.str;
        };
        "endpoint" = mkOption {
          description = "Endpoint to send the traces to. Should be provided in format <host>:<port>.";
          type = types.str;
        };
        "headers" = mkOption {
          description = "Key-value pairs to be used as headers associated with gRPC or HTTP requests.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "insecure" = mkOption {
          description = "If disabled, the client will use a secure connection.";
          type = types.nullOr types.bool;
        };
        "samplingFraction" = mkOption {
          description = "Sets the probability a given trace will be sampled. Must be a float from 0 through 1.";
          type = types.nullOr (types.either types.int types.str);
        };
        "timeout" = mkOption {
          description = "Maximum time the exporter will wait for each batch export.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS Config to use when sending traces.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfig"
          );
        };
      };

      config = {
        "clientType" = mkOverride 1002 null;
        "compression" = mkOverride 1002 null;
        "headers" = mkOverride 1002 null;
        "insecure" = mkOverride 1002 null;
        "samplingFraction" = mkOverride 1002 null;
        "timeout" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCa"
          );
        };
        "caFile" = mkOption {
          description = "Path to the CA cert in the Prometheus container to use for the targets.";
          type = types.nullOr types.str;
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the client cert file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keyFile" = mkOption {
          description = "Path to the client key file in the Prometheus container for the targets.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "caFile" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTracingConfigTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecTsdb" = {
      options = {
        "outOfOrderTimeWindow" = mkOption {
          description = "Configures how old an out-of-order/out-of-bounds sample can be with\nrespect to the TSDB max time.\n\nAn out-of-order/out-of-bounds sample is ingested into the TSDB as long as\nthe timestamp of the sample is >= (TSDB.MaxTime - outOfOrderTimeWindow).\n\nThis is an *experimental feature*, it may change in any upcoming release\nin a breaking way.\n\nIt requires Prometheus >= v2.39.0 or PrometheusAgent >= v2.54.0.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "outOfOrderTimeWindow" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumeMounts" = {
      options = {
        "mountPath" = mkOption {
          description = "Path within the container at which the volume should be mounted.  Must\nnot contain ':'.";
          type = types.str;
        };
        "mountPropagation" = mkOption {
          description = "mountPropagation determines how mounts are propagated from the host\nto container and the other way around.\nWhen not set, MountPropagationNone is used.\nThis field is beta in 1.10.\nWhen RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified\n(which defaults to None).";
          type = types.nullOr types.str;
        };
        "name" = mkOption {
          description = "This must match the Name of a Volume.";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "recursiveReadOnly" = mkOption {
          description = "RecursiveReadOnly specifies whether read-only mounts should be handled\nrecursively.\n\nIf ReadOnly is false, this field has no meaning and must be unspecified.\n\nIf ReadOnly is true, and this field is set to Disabled, the mount is not made\nrecursively read-only.  If this field is set to IfPossible, the mount is made\nrecursively read-only, if it is supported by the container runtime.  If this\nfield is set to Enabled, the mount is made recursively read-only if it is\nsupported by the container runtime, otherwise the pod will not be started and\nan error will be generated to indicate the reason.\n\nIf this field is set to IfPossible or Enabled, MountPropagation must be set to\nNone (or be unspecified, which defaults to None).\n\nIf this field is not specified, it is treated as an equivalent of Disabled.";
          type = types.nullOr types.str;
        };
        "subPath" = mkOption {
          description = "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).";
          type = types.nullOr types.str;
        };
        "subPathExpr" = mkOption {
          description = "Expanded path within the volume from which the container's volume should be mounted.\nBehaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.\nDefaults to \"\" (volume's root).\nSubPathExpr and SubPath are mutually exclusive.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "mountPropagation" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "recursiveReadOnly" = mkOverride 1002 null;
        "subPath" = mkOverride 1002 null;
        "subPathExpr" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumes" = {
      options = {
        "awsElasticBlockStore" = mkOption {
          description = "awsElasticBlockStore represents an AWS Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree\nawsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesAwsElasticBlockStore"
          );
        };
        "azureDisk" = mkOption {
          description = "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.\nDeprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type\nare redirected to the disk.csi.azure.com CSI driver.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesAzureDisk"
          );
        };
        "azureFile" = mkOption {
          description = "azureFile represents an Azure File Service mount on the host and bind mount to the pod.\nDeprecated: AzureFile is deprecated. All operations for the in-tree azureFile type\nare redirected to the file.csi.azure.com CSI driver.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesAzureFile"
          );
        };
        "cephfs" = mkOption {
          description = "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.\nDeprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCephfs");
        };
        "cinder" = mkOption {
          description = "cinder represents a cinder volume attached and mounted on kubelets host machine.\nDeprecated: Cinder is deprecated. All operations for the in-tree cinder type\nare redirected to the cinder.csi.openstack.org CSI driver.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCinder");
        };
        "configMap" = mkOption {
          description = "configMap represents a configMap that should populate this volume";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesConfigMap"
          );
        };
        "csi" = mkOption {
          description = "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCsi");
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI represents downward API about the pod that should populate this volume";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPI"
          );
        };
        "emptyDir" = mkOption {
          description = "emptyDir represents a temporary directory that shares a pod's lifetime.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEmptyDir"
          );
        };
        "ephemeral" = mkOption {
          description = "ephemeral represents a volume that is handled by a cluster storage driver.\nThe volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,\nand deleted when the pod is removed.\n\nUse this if:\na) the volume is only needed while the pod runs,\nb) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and\nd) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific\nAPIs for volumes that persist for longer than the lifecycle\nof an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to\nbe used that way - see the documentation of the driver for\nmore information.\n\nA pod can use both types of ephemeral volumes and\npersistent volumes at the same time.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeral"
          );
        };
        "fc" = mkOption {
          description = "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFc");
        };
        "flexVolume" = mkOption {
          description = "flexVolume represents a generic volume resource that is\nprovisioned/attached using an exec based plugin.\nDeprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFlexVolume"
          );
        };
        "flocker" = mkOption {
          description = "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.\nDeprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFlocker"
          );
        };
        "gcePersistentDisk" = mkOption {
          description = "gcePersistentDisk represents a GCE Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nDeprecated: GCEPersistentDisk is deprecated. All operations for the in-tree\ngcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesGcePersistentDisk"
          );
        };
        "gitRepo" = mkOption {
          description = "gitRepo represents a git repository at a particular revision.\nDeprecated: GitRepo is deprecated. To provision a container with a git repo, mount an\nEmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir\ninto the Pod's container.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesGitRepo"
          );
        };
        "glusterfs" = mkOption {
          description = "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.\nDeprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesGlusterfs"
          );
        };
        "hostPath" = mkOption {
          description = "hostPath represents a pre-existing file or directory on the host\nmachine that is directly exposed to the container. This is generally\nused for system agents or other privileged things that are allowed\nto see the host machine. Most containers will NOT need this.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesHostPath"
          );
        };
        "image" = mkOption {
          description = "image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.\nThe volume is resolved at pod startup depending on which PullPolicy value is provided:\n\n- Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\n- Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\n- IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\n\nThe volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.\nA failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.\nThe types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.\nThe OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.\nThe volume will be mounted read-only (ro) and non-executable files (noexec).\nSub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath) before 1.33.\nThe field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesImage");
        };
        "iscsi" = mkOption {
          description = "iscsi represents an ISCSI Disk resource that is attached to a\nkubelet's host machine and then exposed to the pod.\nMore info: https://examples.k8s.io/volumes/iscsi/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesIscsi");
        };
        "name" = mkOption {
          description = "name of the volume.\nMust be a DNS_LABEL and unique within the pod.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.str;
        };
        "nfs" = mkOption {
          description = "nfs represents an NFS mount on the host that shares a pod's lifetime\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesNfs");
        };
        "persistentVolumeClaim" = mkOption {
          description = "persistentVolumeClaimVolumeSource represents a reference to a\nPersistentVolumeClaim in the same namespace.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesPersistentVolumeClaim"
          );
        };
        "photonPersistentDisk" = mkOption {
          description = "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.\nDeprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesPhotonPersistentDisk"
          );
        };
        "portworxVolume" = mkOption {
          description = "portworxVolume represents a portworx volume attached and mounted on kubelets host machine.\nDeprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type\nare redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate\nis on.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesPortworxVolume"
          );
        };
        "projected" = mkOption {
          description = "projected items for all in one resources secrets, configmaps, and downward API";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjected"
          );
        };
        "quobyte" = mkOption {
          description = "quobyte represents a Quobyte mount on the host that shares a pod's lifetime.\nDeprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesQuobyte"
          );
        };
        "rbd" = mkOption {
          description = "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.\nDeprecated: RBD is deprecated and the in-tree rbd type is no longer supported.\nMore info: https://examples.k8s.io/volumes/rbd/README.md";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesRbd");
        };
        "scaleIO" = mkOption {
          description = "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.\nDeprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesScaleIO"
          );
        };
        "secret" = mkOption {
          description = "secret represents a secret that should populate this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesSecret");
        };
        "storageos" = mkOption {
          description = "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.\nDeprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesStorageos"
          );
        };
        "vsphereVolume" = mkOption {
          description = "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.\nDeprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type\nare redirected to the csi.vsphere.vmware.com CSI driver.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesVsphereVolume"
          );
        };
      };

      config = {
        "awsElasticBlockStore" = mkOverride 1002 null;
        "azureDisk" = mkOverride 1002 null;
        "azureFile" = mkOverride 1002 null;
        "cephfs" = mkOverride 1002 null;
        "cinder" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "csi" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "emptyDir" = mkOverride 1002 null;
        "ephemeral" = mkOverride 1002 null;
        "fc" = mkOverride 1002 null;
        "flexVolume" = mkOverride 1002 null;
        "flocker" = mkOverride 1002 null;
        "gcePersistentDisk" = mkOverride 1002 null;
        "gitRepo" = mkOverride 1002 null;
        "glusterfs" = mkOverride 1002 null;
        "hostPath" = mkOverride 1002 null;
        "image" = mkOverride 1002 null;
        "iscsi" = mkOverride 1002 null;
        "nfs" = mkOverride 1002 null;
        "persistentVolumeClaim" = mkOverride 1002 null;
        "photonPersistentDisk" = mkOverride 1002 null;
        "portworxVolume" = mkOverride 1002 null;
        "projected" = mkOverride 1002 null;
        "quobyte" = mkOverride 1002 null;
        "rbd" = mkOverride 1002 null;
        "scaleIO" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "storageos" = mkOverride 1002 null;
        "vsphereVolume" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesAwsElasticBlockStore" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly value true will force the readOnly setting in VolumeMounts.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesAzureDisk" = {
      options = {
        "cachingMode" = mkOption {
          description = "cachingMode is the Host Caching mode: None, Read Only, Read Write.";
          type = types.nullOr types.str;
        };
        "diskName" = mkOption {
          description = "diskName is the Name of the data disk in the blob storage";
          type = types.str;
        };
        "diskURI" = mkOption {
          description = "diskURI is the URI of data disk in the blob storage";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is Filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cachingMode" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesAzureFile" = {
      options = {
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the  name of secret that contains Azure Storage Account Name and Key";
          type = types.str;
        };
        "shareName" = mkOption {
          description = "shareName is the azure share Name";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCephfs" = {
      options = {
        "monitors" = mkOption {
          description = "monitors is Required: Monitors is a collection of Ceph monitors\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "path" = mkOption {
          description = "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretFile" = mkOption {
          description = "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCephfsSecretRef"
          );
        };
        "user" = mkOption {
          description = "user is optional: User is the rados user name, default is admin\nMore info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "path" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretFile" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCephfsSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCinder" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is optional: points to a secret object containing parameters used to connect\nto OpenStack.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCinderSecretRef"
          );
        };
        "volumeID" = mkOption {
          description = "volumeID used to identify the volume in cinder.\nMore info: https://examples.k8s.io/mysql-cinder-pd/README.md";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCinderSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesConfigMap" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesConfigMapItems")
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCsi" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the CSI driver that handles this volume.\nConsult with your admin for the correct name as registered in the cluster.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\".\nIf not provided, the empty value is passed to the associated CSI driver\nwhich will determine the default filesystem to apply.";
          type = types.nullOr types.str;
        };
        "nodePublishSecretRef" = mkOption {
          description = "nodePublishSecretRef is a reference to the secret object containing\nsensitive information to pass to the CSI driver to complete the CSI\nNodePublishVolume and NodeUnpublishVolume calls.\nThis field is optional, and  may be empty if no secret is required. If the\nsecret object contains more than one secret, all secret references are passed.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCsiNodePublishSecretRef"
          );
        };
        "readOnly" = mkOption {
          description = "readOnly specifies a read-only configuration for the volume.\nDefaults to false (read/write).";
          type = types.nullOr types.bool;
        };
        "volumeAttributes" = mkOption {
          description = "volumeAttributes stores driver-specific properties that are passed to the CSI\ndriver. Consult your driver's documentation for supported values.";
          type = types.nullOr (types.attrsOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "nodePublishSecretRef" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "volumeAttributes" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesCsiNodePublishSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPI" = {
      options = {
        "defaultMode" = mkOption {
          description = "Optional: mode bits to use on created files by default. Must be a\nOptional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDefaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "Items is a list of downward API volume file";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPIItems"
            )
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPIItemsFieldRef" = {
      options = {
        "apiVersion" = mkOption {
          description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
          type = types.nullOr types.str;
        };
        "fieldPath" = mkOption {
          description = "Path of the field to select in the specified API version.";
          type = types.str;
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesDownwardAPIItemsResourceFieldRef" = {
      options = {
        "containerName" = mkOption {
          description = "Container name: required for volumes, optional for env vars";
          type = types.nullOr types.str;
        };
        "divisor" = mkOption {
          description = "Specifies the output format of the exposed resources, defaults to \"1\"";
          type = types.nullOr (types.either types.int types.str);
        };
        "resource" = mkOption {
          description = "Required: resource to select";
          type = types.str;
        };
      };

      config = {
        "containerName" = mkOverride 1002 null;
        "divisor" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEmptyDir" = {
      options = {
        "medium" = mkOption {
          description = "medium represents what type of storage medium should back this directory.\nThe default is \"\" which means to use the node's default medium.\nMust be an empty string (default) or Memory.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr types.str;
        };
        "sizeLimit" = mkOption {
          description = "sizeLimit is the total amount of local storage required for this EmptyDir volume.\nThe size limit is also applicable for memory medium.\nThe maximum usage on memory medium EmptyDir would be the minimum value between\nthe SizeLimit specified here and the sum of memory limits of all containers in a pod.\nThe default is nil which means that the limit is undefined.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir";
          type = types.nullOr (types.either types.int types.str);
        };
      };

      config = {
        "medium" = mkOverride 1002 null;
        "sizeLimit" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeral" = {
      options = {
        "volumeClaimTemplate" = mkOption {
          description = "Will be used to create a stand-alone PVC to provision the volume.\nThe pod in which this EphemeralVolumeSource is embedded will be the\nowner of the PVC, i.e. the PVC will be deleted together with the\npod.  The name of the PVC will be `<pod name>-<volume name>` where\n`<volume name>` is the name from the `PodSpec.Volumes` array\nentry. Pod validation will reject the pod if the concatenated name\nis not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod\nwill *not* be used for the pod to avoid using an unrelated\nvolume by mistake. Starting the pod is then blocked until\nthe unrelated PVC is removed. If such a pre-created PVC is\nmeant to be used by the pod, the PVC has to updated with an\nowner reference to the pod once the pod exists. Normally\nthis should not be necessary, but it may be useful when\nmanually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes\nto the PVC after it has been created.\n\nRequired, must not be nil.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplate"
          );
        };
      };

      config = {
        "volumeClaimTemplate" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplate" = {
      options = {
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "The specification for the PersistentVolumeClaim. The entire content is\ncopied unchanged into the PVC that gets created from this\ntemplate. The same fields as in a PersistentVolumeClaim\nare also valid here.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpec";
        };
      };

      config = {
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpec" = {
      options = {
        "accessModes" = mkOption {
          description = "accessModes contains the desired access modes the volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1";
          type = types.nullOr (types.listOf types.str);
        };
        "dataSource" = mkOption {
          description = "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource"
          );
        };
        "dataSourceRef" = mkOption {
          description = "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef"
          );
        };
        "resources" = mkOption {
          description = "resources represents the minimum resources the volume should have.\nIf RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements\nthat are lower than previous value but must still be higher than capacity recorded in the\nstatus field of the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecResources"
          );
        };
        "selector" = mkOption {
          description = "selector is a label query over volumes to consider for binding.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecSelector"
          );
        };
        "storageClassName" = mkOption {
          description = "storageClassName is the name of the StorageClass required by the claim.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1";
          type = types.nullOr types.str;
        };
        "volumeAttributesClassName" = mkOption {
          description = "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).";
          type = types.nullOr types.str;
        };
        "volumeMode" = mkOption {
          description = "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.";
          type = types.nullOr types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the binding reference to the PersistentVolume backing this claim.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "accessModes" = mkOverride 1002 null;
        "dataSource" = mkOverride 1002 null;
        "dataSourceRef" = mkOverride 1002 null;
        "resources" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "storageClassName" = mkOverride 1002 null;
        "volumeAttributesClassName" = mkOverride 1002 null;
        "volumeMode" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource" =
      {
        options = {
          "apiGroup" = mkOption {
            description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
            type = types.nullOr types.str;
          };
          "kind" = mkOption {
            description = "Kind is the type of resource being referenced";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name is the name of resource being referenced";
            type = types.str;
          };
        };

        config = {
          "apiGroup" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef" =
      {
        options = {
          "apiGroup" = mkOption {
            description = "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.";
            type = types.nullOr types.str;
          };
          "kind" = mkOption {
            description = "Kind is the type of resource being referenced";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name is the name of resource being referenced";
            type = types.str;
          };
          "namespace" = mkOption {
            description = "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.";
            type = types.nullOr types.str;
          };
        };

        config = {
          "apiGroup" = mkOverride 1002 null;
          "namespace" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecResources" =
      {
        options = {
          "limits" = mkOption {
            description = "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
            type = types.nullOr (types.attrsOf (types.either types.int types.str));
          };
          "requests" = mkOption {
            description = "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/";
            type = types.nullOr (types.attrsOf (types.either types.int types.str));
          };
        };

        config = {
          "limits" = mkOverride 1002 null;
          "requests" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFc" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun is Optional: FC target lun number";
          type = types.nullOr types.int;
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "targetWWNs" = mkOption {
          description = "targetWWNs is Optional: FC target worldwide names (WWNs)";
          type = types.nullOr (types.listOf types.str);
        };
        "wwids" = mkOption {
          description = "wwids Optional: FC volume world wide identifiers (wwids)\nEither wwids or combination of targetWWNs and lun must be set, but not both simultaneously.";
          type = types.nullOr (types.listOf types.str);
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "lun" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "targetWWNs" = mkOverride 1002 null;
        "wwids" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFlexVolume" = {
      options = {
        "driver" = mkOption {
          description = "driver is the name of the driver to use for this volume.";
          type = types.str;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.";
          type = types.nullOr types.str;
        };
        "options" = mkOption {
          description = "options is Optional: this field holds extra command options if any.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly is Optional: defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is Optional: secretRef is reference to the secret object containing\nsensitive information to pass to the plugin scripts. This may be\nempty if no secret object is specified. If the secret object\ncontains more than one secret, all secrets are passed to the plugin\nscripts.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFlexVolumeSecretRef"
          );
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "options" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFlexVolumeSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesFlocker" = {
      options = {
        "datasetName" = mkOption {
          description = "datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker\nshould be considered as deprecated";
          type = types.nullOr types.str;
        };
        "datasetUUID" = mkOption {
          description = "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset";
          type = types.nullOr types.str;
        };
      };

      config = {
        "datasetName" = mkOverride 1002 null;
        "datasetUUID" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesGcePersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.str;
        };
        "partition" = mkOption {
          description = "partition is the partition in the volume that you want to mount.\nIf omitted, the default is to mount by volume name.\nExamples: For volume /dev/sda1, you specify the partition as \"1\".\nSimilarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.int;
        };
        "pdName" = mkOption {
          description = "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesGitRepo" = {
      options = {
        "directory" = mkOption {
          description = "directory is the target directory name.\nMust not contain or start with '..'.  If '.' is supplied, the volume directory will be the\ngit repository.  Otherwise, if specified, the volume will contain the git repository in\nthe subdirectory with the given name.";
          type = types.nullOr types.str;
        };
        "repository" = mkOption {
          description = "repository is the URL";
          type = types.str;
        };
        "revision" = mkOption {
          description = "revision is the commit hash for the specified revision.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "directory" = mkOverride 1002 null;
        "revision" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesGlusterfs" = {
      options = {
        "endpoints" = mkOption {
          description = "endpoints is the endpoint name that details Glusterfs topology.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "path" = mkOption {
          description = "path is the Glusterfs volume path.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Glusterfs volume to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesHostPath" = {
      options = {
        "path" = mkOption {
          description = "path of the directory on the host.\nIf the path is a symlink, it will follow the link to the real path.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.str;
        };
        "type" = mkOption {
          description = "type for HostPath Volume\nDefaults to \"\"\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath";
          type = types.nullOr types.str;
        };
      };

      config = {
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesImage" = {
      options = {
        "pullPolicy" = mkOption {
          description = "Policy for pulling OCI objects. Possible values are:\nAlways: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.\nNever: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.\nIfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.\nDefaults to Always if :latest tag is specified, or IfNotPresent otherwise.";
          type = types.nullOr types.str;
        };
        "reference" = mkOption {
          description = "Required: Image or artifact reference to be used.\nBehaves in the same way as pod.spec.containers[*].image.\nPull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.\nMore info: https://kubernetes.io/docs/concepts/containers/images\nThis field is optional to allow higher level config management to default or override\ncontainer images in workload controllers like Deployments and StatefulSets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "pullPolicy" = mkOverride 1002 null;
        "reference" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesIscsi" = {
      options = {
        "chapAuthDiscovery" = mkOption {
          description = "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication";
          type = types.nullOr types.bool;
        };
        "chapAuthSession" = mkOption {
          description = "chapAuthSession defines whether support iSCSI Session CHAP authentication";
          type = types.nullOr types.bool;
        };
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi";
          type = types.nullOr types.str;
        };
        "initiatorName" = mkOption {
          description = "initiatorName is the custom iSCSI Initiator Name.\nIf initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface\n<target portal>:<volume name> will be created for the connection.";
          type = types.nullOr types.str;
        };
        "iqn" = mkOption {
          description = "iqn is the target iSCSI Qualified Name.";
          type = types.str;
        };
        "iscsiInterface" = mkOption {
          description = "iscsiInterface is the interface Name that uses an iSCSI transport.\nDefaults to 'default' (tcp).";
          type = types.nullOr types.str;
        };
        "lun" = mkOption {
          description = "lun represents iSCSI Target Lun number.";
          type = types.int;
        };
        "portals" = mkOption {
          description = "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.nullOr (types.listOf types.str);
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is the CHAP Secret for iSCSI target and initiator authentication";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesIscsiSecretRef"
          );
        };
        "targetPortal" = mkOption {
          description = "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port\nis other than default (typically TCP ports 860 and 3260).";
          type = types.str;
        };
      };

      config = {
        "chapAuthDiscovery" = mkOverride 1002 null;
        "chapAuthSession" = mkOverride 1002 null;
        "fsType" = mkOverride 1002 null;
        "initiatorName" = mkOverride 1002 null;
        "iscsiInterface" = mkOverride 1002 null;
        "portals" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesIscsiSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesNfs" = {
      options = {
        "path" = mkOption {
          description = "path that is exported by the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the NFS export to be mounted with read-only permissions.\nDefaults to false.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.nullOr types.bool;
        };
        "server" = mkOption {
          description = "server is the hostname or IP address of the NFS server.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#nfs";
          type = types.str;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesPersistentVolumeClaim" = {
      options = {
        "claimName" = mkOption {
          description = "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims";
          type = types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Will force the ReadOnly setting in VolumeMounts.\nDefault false.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesPhotonPersistentDisk" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "pdID" = mkOption {
          description = "pdID is the ID that identifies Photon Controller persistent disk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesPortworxVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fSType represents the filesystem type to mount\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "volumeID" = mkOption {
          description = "volumeID uniquely identifies a Portworx volume";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjected" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode are the mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "sources" = mkOption {
          description = "sources is the list of volume projections. Each entry in this list\nhandles one source.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSources"
            )
          );
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "sources" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSources" = {
      options = {
        "clusterTrustBundle" = mkOption {
          description = "ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field\nof ClusterTrustBundle objects in an auto-updating file.\n\nAlpha, gated by the ClusterTrustBundleProjection feature gate.\n\nClusterTrustBundle objects can either be selected by name, or by the\ncombination of signer name and a label selector.\n\nKubelet performs aggressive normalization of the PEM contents written\ninto the pod filesystem.  Esoteric PEM features such as inter-block\ncomments and block headers are stripped.  Certificates are deduplicated.\nThe ordering of certificates within the file is arbitrary, and Kubelet\nmay change the order over time.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesClusterTrustBundle"
          );
        };
        "configMap" = mkOption {
          description = "configMap information about the configMap data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesConfigMap"
          );
        };
        "downwardAPI" = mkOption {
          description = "downwardAPI information about the downwardAPI data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPI"
          );
        };
        "secret" = mkOption {
          description = "secret information about the secret data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesSecret"
          );
        };
        "serviceAccountToken" = mkOption {
          description = "serviceAccountToken is information about the serviceAccountToken data to project";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesServiceAccountToken"
          );
        };
      };

      config = {
        "clusterTrustBundle" = mkOverride 1002 null;
        "configMap" = mkOverride 1002 null;
        "downwardAPI" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
        "serviceAccountToken" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesClusterTrustBundle" = {
      options = {
        "labelSelector" = mkOption {
          description = "Select all ClusterTrustBundles that match this label selector.  Only has\neffect if signerName is set.  Mutually-exclusive with name.  If unset,\ninterpreted as \"match nothing\".  If set but empty, interpreted as \"match\neverything\".";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector"
          );
        };
        "name" = mkOption {
          description = "Select a single ClusterTrustBundle by object name.  Mutually-exclusive\nwith signerName and labelSelector.";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "If true, don't block pod startup if the referenced ClusterTrustBundle(s)\naren't available.  If using name, then the named ClusterTrustBundle is\nallowed not to exist.  If using signerName, then the combination of\nsignerName and labelSelector is allowed to match zero\nClusterTrustBundles.";
          type = types.nullOr types.bool;
        };
        "path" = mkOption {
          description = "Relative path from the volume root to write the bundle.";
          type = types.str;
        };
        "signerName" = mkOption {
          description = "Select all ClusterTrustBundles that match this signer name.\nMutually-exclusive with name.  The contents of all selected\nClusterTrustBundles will be unified and deduplicated.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "labelSelector" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "signerName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector" =
      {
        options = {
          "matchExpressions" = mkOption {
            description = "matchExpressions is a list of label selector requirements. The requirements are ANDed.";
            type = types.nullOr (
              types.listOf (
                submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions"
              )
            );
          };
          "matchLabels" = mkOption {
            description = "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.";
            type = types.nullOr (types.attrsOf types.str);
          };
        };

        config = {
          "matchExpressions" = mkOverride 1002 null;
          "matchLabels" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions" =
      {
        options = {
          "key" = mkOption {
            description = "key is the label key that the selector applies to.";
            type = types.str;
          };
          "operator" = mkOption {
            description = "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.";
            type = types.str;
          };
          "values" = mkOption {
            description = "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.";
            type = types.nullOr (types.listOf types.str);
          };
        };

        config = {
          "values" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesConfigMap" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesConfigMapItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional specify whether the ConfigMap or its keys must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesConfigMapItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPI" = {
      options = {
        "items" = mkOption {
          description = "Items is a list of DownwardAPIVolume file";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPIItems"
            )
          );
        };
      };

      config = {
        "items" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPIItems" = {
      options = {
        "fieldRef" = mkOption {
          description = "Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef"
          );
        };
        "mode" = mkOption {
          description = "Optional: mode bits used to set permissions on this file, must be an octal value\nbetween 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'";
          type = types.str;
        };
        "resourceFieldRef" = mkOption {
          description = "Selects a resource of the container: only resources limits and requests\n(limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef"
          );
        };
      };

      config = {
        "fieldRef" = mkOverride 1002 null;
        "mode" = mkOverride 1002 null;
        "resourceFieldRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef" =
      {
        options = {
          "apiVersion" = mkOption {
            description = "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".";
            type = types.nullOr types.str;
          };
          "fieldPath" = mkOption {
            description = "Path of the field to select in the specified API version.";
            type = types.str;
          };
        };

        config = {
          "apiVersion" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef" =
      {
        options = {
          "containerName" = mkOption {
            description = "Container name: required for volumes, optional for env vars";
            type = types.nullOr types.str;
          };
          "divisor" = mkOption {
            description = "Specifies the output format of the exposed resources, defaults to \"1\"";
            type = types.nullOr (types.either types.int types.str);
          };
          "resource" = mkOption {
            description = "Required: resource to select";
            type = types.str;
          };
        };

        config = {
          "containerName" = mkOverride 1002 null;
          "divisor" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesSecret" = {
      options = {
        "items" = mkOption {
          description = "items if unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesSecretItems"
            )
          );
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "items" = mkOverride 1002 null;
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesProjectedSourcesServiceAccountToken" = {
      options = {
        "audience" = mkOption {
          description = "audience is the intended audience of the token. A recipient of a token\nmust identify itself with an identifier specified in the audience of the\ntoken, and otherwise should reject the token. The audience defaults to the\nidentifier of the apiserver.";
          type = types.nullOr types.str;
        };
        "expirationSeconds" = mkOption {
          description = "expirationSeconds is the requested duration of validity of the service\naccount token. As the token approaches expiration, the kubelet volume\nplugin will proactively rotate the service account token. The kubelet will\nstart trying to rotate the token if the token is older than 80 percent of\nits time to live or if the token is older than 24 hours.Defaults to 1 hour\nand must be at least 10 minutes.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the path relative to the mount point of the file to project the\ntoken into.";
          type = types.str;
        };
      };

      config = {
        "audience" = mkOverride 1002 null;
        "expirationSeconds" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesQuobyte" = {
      options = {
        "group" = mkOption {
          description = "group to map volume access to\nDefault is no group";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the Quobyte volume to be mounted with read-only permissions.\nDefaults to false.";
          type = types.nullOr types.bool;
        };
        "registry" = mkOption {
          description = "registry represents a single or multiple Quobyte Registry services\nspecified as a string as host:port pair (multiple entries are separated with commas)\nwhich acts as the central registry for volumes";
          type = types.str;
        };
        "tenant" = mkOption {
          description = "tenant owning the given Quobyte volume in the Backend\nUsed with dynamically provisioned Quobyte volumes, value is set by the plugin";
          type = types.nullOr types.str;
        };
        "user" = mkOption {
          description = "user to map volume access to\nDefaults to serivceaccount user";
          type = types.nullOr types.str;
        };
        "volume" = mkOption {
          description = "volume is a string that references an already created Quobyte volume by name.";
          type = types.str;
        };
      };

      config = {
        "group" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "tenant" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesRbd" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type of the volume that you want to mount.\nTip: Ensure that the filesystem type is supported by the host operating system.\nExamples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#rbd";
          type = types.nullOr types.str;
        };
        "image" = mkOption {
          description = "image is the rados image name.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.str;
        };
        "keyring" = mkOption {
          description = "keyring is the path to key ring for RBDUser.\nDefault is /etc/ceph/keyring.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "monitors" = mkOption {
          description = "monitors is a collection of Ceph monitors.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.listOf types.str;
        };
        "pool" = mkOption {
          description = "pool is the rados pool name.\nDefault is rbd.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly here will force the ReadOnly setting in VolumeMounts.\nDefaults to false.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef is name of the authentication secret for RBDUser. If provided\noverrides keyring.\nDefault is nil.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesRbdSecretRef"
          );
        };
        "user" = mkOption {
          description = "user is the rados user name.\nDefault is admin.\nMore info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "keyring" = mkOverride 1002 null;
        "pool" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "user" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesRbdSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesScaleIO" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\".\nDefault is \"xfs\".";
          type = types.nullOr types.str;
        };
        "gateway" = mkOption {
          description = "gateway is the host address of the ScaleIO API Gateway.";
          type = types.str;
        };
        "protectionDomain" = mkOption {
          description = "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly Defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef references to the secret for ScaleIO user and other\nsensitive information. If this is not provided, Login operation will fail.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesScaleIOSecretRef";
        };
        "sslEnabled" = mkOption {
          description = "sslEnabled Flag enable/disable SSL communication with Gateway, default false";
          type = types.nullOr types.bool;
        };
        "storageMode" = mkOption {
          description = "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.\nDefault is ThinProvisioned.";
          type = types.nullOr types.str;
        };
        "storagePool" = mkOption {
          description = "storagePool is the ScaleIO Storage Pool associated with the protection domain.";
          type = types.nullOr types.str;
        };
        "system" = mkOption {
          description = "system is the name of the storage system as configured in ScaleIO.";
          type = types.str;
        };
        "volumeName" = mkOption {
          description = "volumeName is the name of a volume already created in the ScaleIO system\nthat is associated with this volume source.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "protectionDomain" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "sslEnabled" = mkOverride 1002 null;
        "storageMode" = mkOverride 1002 null;
        "storagePool" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesScaleIOSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesSecret" = {
      options = {
        "defaultMode" = mkOption {
          description = "defaultMode is Optional: mode bits used to set permissions on created files by default.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values\nfor mode bits. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "items" = mkOption {
          description = "items If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesSecretItems")
          );
        };
        "optional" = mkOption {
          description = "optional field specify whether the Secret or its keys must be defined";
          type = types.nullOr types.bool;
        };
        "secretName" = mkOption {
          description = "secretName is the name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret";
          type = types.nullOr types.str;
        };
      };

      config = {
        "defaultMode" = mkOverride 1002 null;
        "items" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
        "secretName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesSecretItems" = {
      options = {
        "key" = mkOption {
          description = "key is the key to project.";
          type = types.str;
        };
        "mode" = mkOption {
          description = "mode is Optional: mode bits used to set permissions on this file.\nMust be an octal value between 0000 and 0777 or a decimal value between 0 and 511.\nYAML accepts both octal and decimal values, JSON requires decimal values for mode bits.\nIf not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.";
          type = types.nullOr types.int;
        };
        "path" = mkOption {
          description = "path is the relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'.";
          type = types.str;
        };
      };

      config = {
        "mode" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesStorageos" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is the filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "readOnly" = mkOption {
          description = "readOnly defaults to false (read/write). ReadOnly here will force\nthe ReadOnly setting in VolumeMounts.";
          type = types.nullOr types.bool;
        };
        "secretRef" = mkOption {
          description = "secretRef specifies the secret to use for obtaining the StorageOS API\ncredentials.  If not specified, default values will be attempted.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesStorageosSecretRef"
          );
        };
        "volumeName" = mkOption {
          description = "volumeName is the human-readable name of the StorageOS volume.  Volume\nnames are only unique within a namespace.";
          type = types.nullOr types.str;
        };
        "volumeNamespace" = mkOption {
          description = "volumeNamespace specifies the scope of the volume within StorageOS.  If no\nnamespace is specified then the Pod's namespace will be used.  This allows the\nKubernetes name scoping to be mirrored within StorageOS for tighter integration.\nSet VolumeName to any name to override the default behaviour.\nSet to \"default\" if you are not using namespaces within StorageOS.\nNamespaces that do not pre-exist within StorageOS will be created.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "readOnly" = mkOverride 1002 null;
        "secretRef" = mkOverride 1002 null;
        "volumeName" = mkOverride 1002 null;
        "volumeNamespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesStorageosSecretRef" = {
      options = {
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecVolumesVsphereVolume" = {
      options = {
        "fsType" = mkOption {
          description = "fsType is filesystem type to mount.\nMust be a filesystem type supported by the host operating system.\nEx. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.";
          type = types.nullOr types.str;
        };
        "storagePolicyID" = mkOption {
          description = "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.";
          type = types.nullOr types.str;
        };
        "storagePolicyName" = mkOption {
          description = "storagePolicyName is the storage Policy Based Management (SPBM) profile name.";
          type = types.nullOr types.str;
        };
        "volumePath" = mkOption {
          description = "volumePath is the path that identifies vSphere volume vmdk";
          type = types.str;
        };
      };

      config = {
        "fsType" = mkOverride 1002 null;
        "storagePolicyID" = mkOverride 1002 null;
        "storagePolicyName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWeb" = {
      options = {
        "httpConfig" = mkOption {
          description = "Defines HTTP parameters for web server.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebHttpConfig");
        };
        "maxConnections" = mkOption {
          description = "Defines the maximum number of simultaneous connections\nA zero value means that Prometheus doesn't accept any incoming connection.";
          type = types.nullOr types.int;
        };
        "pageTitle" = mkOption {
          description = "The prometheus web page title.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "Defines the TLS parameters for HTTPS.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfig");
        };
      };

      config = {
        "httpConfig" = mkOverride 1002 null;
        "maxConnections" = mkOverride 1002 null;
        "pageTitle" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebHttpConfig" = {
      options = {
        "headers" = mkOption {
          description = "List of headers that can be added to HTTP responses.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebHttpConfigHeaders"
          );
        };
        "http2" = mkOption {
          description = "Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.\nWhen TLSConfig is not configured, HTTP/2 will be disabled.\nWhenever the value of the field changes, a rolling update will be triggered.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "headers" = mkOverride 1002 null;
        "http2" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebHttpConfigHeaders" = {
      options = {
        "contentSecurityPolicy" = mkOption {
          description = "Set the Content-Security-Policy header to HTTP responses.\nUnset if blank.";
          type = types.nullOr types.str;
        };
        "strictTransportSecurity" = mkOption {
          description = "Set the Strict-Transport-Security header to HTTP responses.\nUnset if blank.\nPlease make sure that you use this with care as this header might force\nbrowsers to load Prometheus and the other applications hosted on the same\ndomain and subdomains over HTTPS.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security";
          type = types.nullOr types.str;
        };
        "xContentTypeOptions" = mkOption {
          description = "Set the X-Content-Type-Options header to HTTP responses.\nUnset if blank. Accepted value is nosniff.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options";
          type = types.nullOr types.str;
        };
        "xFrameOptions" = mkOption {
          description = "Set the X-Frame-Options header to HTTP responses.\nUnset if blank. Accepted values are deny and sameorigin.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options";
          type = types.nullOr types.str;
        };
        "xXSSProtection" = mkOption {
          description = "Set the X-XSS-Protection header to all responses.\nUnset if blank.\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection";
          type = types.nullOr types.str;
        };
      };

      config = {
        "contentSecurityPolicy" = mkOverride 1002 null;
        "strictTransportSecurity" = mkOverride 1002 null;
        "xContentTypeOptions" = mkOverride 1002 null;
        "xFrameOptions" = mkOverride 1002 null;
        "xXSSProtection" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfig" = {
      options = {
        "cert" = mkOption {
          description = "Secret or ConfigMap containing the TLS certificate for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `certFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigCert"
          );
        };
        "certFile" = mkOption {
          description = "Path to the TLS certificate file in the container for the web server.\n\nEither `keySecret` or `keyFile` must be defined.\n\nIt is mutually exclusive with `cert`.";
          type = types.nullOr types.str;
        };
        "cipherSuites" = mkOption {
          description = "List of supported cipher suites for TLS versions up to TLS 1.2.\n\nIf not defined, the Go default cipher suites are used.\nAvailable cipher suites are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#pkg-constants";
          type = types.nullOr (types.listOf types.str);
        };
        "clientAuthType" = mkOption {
          description = "The server policy for client TLS authentication.\n\nFor more detail on clientAuth options:\nhttps://golang.org/pkg/crypto/tls/#ClientAuthType";
          type = types.nullOr types.str;
        };
        "clientCAFile" = mkOption {
          description = "Path to the CA certificate file for client certificate authentication to\nthe server.\n\nIt is mutually exclusive with `client_ca`.";
          type = types.nullOr types.str;
        };
        "client_ca" = mkOption {
          description = "Secret or ConfigMap containing the CA certificate for client certificate\nauthentication to the server.\n\nIt is mutually exclusive with `clientCAFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigClient_ca"
          );
        };
        "curvePreferences" = mkOption {
          description = "Elliptic curves that will be used in an ECDHE handshake, in preference\norder.\n\nAvailable curves are documented in the Go documentation:\nhttps://golang.org/pkg/crypto/tls/#CurveID";
          type = types.nullOr (types.listOf types.str);
        };
        "keyFile" = mkOption {
          description = "Path to the TLS private key file in the container for the web server.\n\nIf defined, either `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keySecret`.";
          type = types.nullOr types.str;
        };
        "keySecret" = mkOption {
          description = "Secret containing the TLS private key for the web server.\n\nEither `cert` or `certFile` must be defined.\n\nIt is mutually exclusive with `keyFile`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum TLS version that is acceptable.";
          type = types.nullOr types.str;
        };
        "preferServerCipherSuites" = mkOption {
          description = "Controls whether the server selects the client's most preferred cipher\nsuite, or the server's most preferred cipher suite.\n\nIf true then the server's preference, as expressed in\nthe order of elements in cipherSuites, is used.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "cert" = mkOverride 1002 null;
        "certFile" = mkOverride 1002 null;
        "cipherSuites" = mkOverride 1002 null;
        "clientAuthType" = mkOverride 1002 null;
        "clientCAFile" = mkOverride 1002 null;
        "client_ca" = mkOverride 1002 null;
        "curvePreferences" = mkOverride 1002 null;
        "keyFile" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "preferServerCipherSuites" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigClient_ca" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigClient_caConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigClient_caSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigClient_caConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigClient_caSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentSpecWebTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentStatus" = {
      options = {
        "availableReplicas" = mkOption {
          description = "Total number of available pods (ready for at least minReadySeconds)\ntargeted by this Prometheus deployment.";
          type = types.int;
        };
        "conditions" = mkOption {
          description = "The current state of the Prometheus deployment.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentStatusConditions")
          );
        };
        "paused" = mkOption {
          description = "Represents whether any actions on the underlying managed objects are\nbeing performed. Only delete actions will be performed.";
          type = types.bool;
        };
        "replicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this Prometheus deployment\n(their labels match the selector).";
          type = types.int;
        };
        "selector" = mkOption {
          description = "The selector used to match the pods targeted by this Prometheus resource.";
          type = types.nullOr types.str;
        };
        "shardStatuses" = mkOption {
          description = "The list has one entry per shard. Each entry provides a summary of the shard status.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.PrometheusAgentStatusShardStatuses")
          );
        };
        "shards" = mkOption {
          description = "Shards is the most recently observed number of shards.";
          type = types.nullOr types.int;
        };
        "unavailableReplicas" = mkOption {
          description = "Total number of unavailable pods targeted by this Prometheus deployment.";
          type = types.int;
        };
        "updatedReplicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this Prometheus deployment\nthat have the desired version spec.";
          type = types.int;
        };
      };

      config = {
        "conditions" = mkOverride 1002 null;
        "selector" = mkOverride 1002 null;
        "shardStatuses" = mkOverride 1002 null;
        "shards" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentStatusConditions" = {
      options = {
        "lastTransitionTime" = mkOption {
          description = "lastTransitionTime is the time of the last update to the current status property.";
          type = types.str;
        };
        "message" = mkOption {
          description = "Human-readable message indicating details for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "observedGeneration" = mkOption {
          description = "ObservedGeneration represents the .metadata.generation that the\ncondition was set based upon. For instance, if `.metadata.generation` is\ncurrently 12, but the `.status.conditions[].observedGeneration` is 9, the\ncondition is out of date with respect to the current state of the\ninstance.";
          type = types.nullOr types.int;
        };
        "reason" = mkOption {
          description = "Reason for the condition's last transition.";
          type = types.nullOr types.str;
        };
        "status" = mkOption {
          description = "Status of the condition.";
          type = types.str;
        };
        "type" = mkOption {
          description = "Type of the condition being reported.";
          type = types.str;
        };
      };

      config = {
        "message" = mkOverride 1002 null;
        "observedGeneration" = mkOverride 1002 null;
        "reason" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.PrometheusAgentStatusShardStatuses" = {
      options = {
        "availableReplicas" = mkOption {
          description = "Total number of available pods (ready for at least minReadySeconds)\ntargeted by this shard.";
          type = types.int;
        };
        "replicas" = mkOption {
          description = "Total number of pods targeted by this shard.";
          type = types.int;
        };
        "shardID" = mkOption {
          description = "Identifier of the shard.";
          type = types.str;
        };
        "unavailableReplicas" = mkOption {
          description = "Total number of unavailable pods targeted by this shard.";
          type = types.int;
        };
        "updatedReplicas" = mkOption {
          description = "Total number of non-terminated pods targeted by this shard\nthat have the desired spec.";
          type = types.int;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfig" = {
      options = {
        "apiVersion" = mkOption {
          description = "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources";
          type = types.nullOr types.str;
        };
        "kind" = mkOption {
          description = "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds";
          type = types.nullOr types.str;
        };
        "metadata" = mkOption {
          description = "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata";
          type = types.nullOr (globalSubmoduleOf "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta");
        };
        "spec" = mkOption {
          description = "ScrapeConfigSpec is a specification of the desired configuration for a scrape configuration.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpec";
        };
      };

      config = {
        "apiVersion" = mkOverride 1002 null;
        "kind" = mkOverride 1002 null;
        "metadata" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpec" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header to use on every scrape request.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAuthorization");
        };
        "azureSDConfigs" = mkOption {
          description = "AzureSDConfigs defines a list of Azure service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigs")
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to use on every scrape request.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecBasicAuth");
        };
        "consulSDConfigs" = mkOption {
          description = "ConsulSDConfigs defines a list of Consul service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigs")
          );
        };
        "convertClassicHistogramsToNHCB" = mkOption {
          description = "Whether to convert all scraped classic histograms into a native histogram with custom buckets.\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.bool;
        };
        "digitalOceanSDConfigs" = mkOption {
          description = "DigitalOceanSDConfigs defines a list of DigitalOcean service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigs")
          );
        };
        "dnsSDConfigs" = mkOption {
          description = "DNSSDConfigs defines a list of DNS service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDnsSDConfigs")
          );
        };
        "dockerSDConfigs" = mkOption {
          description = "DockerSDConfigs defines a list of Docker service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigs")
          );
        };
        "dockerSwarmSDConfigs" = mkOption {
          description = "DockerswarmSDConfigs defines a list of Dockerswarm service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigs")
          );
        };
        "ec2SDConfigs" = mkOption {
          description = "EC2SDConfigs defines a list of EC2 service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigs")
          );
        };
        "enableCompression" = mkOption {
          description = "When false, Prometheus will request uncompressed response from the scraped target.\n\nIt requires Prometheus >= v2.49.0.\n\nIf unset, Prometheus uses true by default.";
          type = types.nullOr types.bool;
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "eurekaSDConfigs" = mkOption {
          description = "EurekaSDConfigs defines a list of Eureka service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigs")
          );
        };
        "fallbackScrapeProtocol" = mkOption {
          description = "The protocol to use if a scrape returns blank, unparseable, or otherwise invalid Content-Type.\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
        "fileSDConfigs" = mkOption {
          description = "FileSDConfigs defines a list of file service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecFileSDConfigs")
          );
        };
        "gceSDConfigs" = mkOption {
          description = "GCESDConfigs defines a list of GCE service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecGceSDConfigs")
          );
        };
        "hetznerSDConfigs" = mkOption {
          description = "HetznerSDConfigs defines a list of Hetzner service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigs")
          );
        };
        "honorLabels" = mkOption {
          description = "HonorLabels chooses the metric's labels on collisions with target labels.";
          type = types.nullOr types.bool;
        };
        "honorTimestamps" = mkOption {
          description = "HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.";
          type = types.nullOr types.bool;
        };
        "httpSDConfigs" = mkOption {
          description = "HTTPSDConfigs defines a list of HTTP service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigs")
          );
        };
        "ionosSDConfigs" = mkOption {
          description = "IonosSDConfigs defines a list of IONOS service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigs")
          );
        };
        "jobName" = mkOption {
          description = "The value of the `job` label assigned to the scraped metrics by default.\n\nThe `job_name` field in the rendered scrape configuration is always controlled by the\noperator to prevent duplicate job names, which Prometheus does not allow. Instead the\n`job` label is set by means of relabeling configs.";
          type = types.nullOr types.str;
        };
        "keepDroppedTargets" = mkOption {
          description = "Per-scrape limit on the number of targets dropped by relabeling\nthat will be kept in memory. 0 means no limit.\n\nIt requires Prometheus >= v2.47.0.";
          type = types.nullOr types.int;
        };
        "kubernetesSDConfigs" = mkOption {
          description = "KubernetesSDConfigs defines a list of Kubernetes service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigs")
          );
        };
        "kumaSDConfigs" = mkOption {
          description = "KumaSDConfigs defines a list of Kuma service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigs")
          );
        };
        "labelLimit" = mkOption {
          description = "Per-scrape limit on number of labels that will be accepted for a sample.\nOnly valid in Prometheus versions 2.27.0 and newer.";
          type = types.nullOr types.int;
        };
        "labelNameLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels name that will be accepted for a sample.\nOnly valid in Prometheus versions 2.27.0 and newer.";
          type = types.nullOr types.int;
        };
        "labelValueLengthLimit" = mkOption {
          description = "Per-scrape limit on length of labels value that will be accepted for a sample.\nOnly valid in Prometheus versions 2.27.0 and newer.";
          type = types.nullOr types.int;
        };
        "lightSailSDConfigs" = mkOption {
          description = "LightsailSDConfigs defines a list of Lightsail service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigs")
          );
        };
        "linodeSDConfigs" = mkOption {
          description = "LinodeSDConfigs defines a list of Linode service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigs")
          );
        };
        "metricRelabelings" = mkOption {
          description = "MetricRelabelConfigs to apply to samples before ingestion.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecMetricRelabelings")
          );
        };
        "metricsPath" = mkOption {
          description = "MetricsPath HTTP path to scrape for metrics. If empty, Prometheus uses the default value (e.g. /metrics).";
          type = types.nullOr types.str;
        };
        "nameEscapingScheme" = mkOption {
          description = "Metric name escaping mode to request through content negotiation.\n\nIt requires Prometheus >= v3.4.0.";
          type = types.nullOr types.str;
        };
        "nameValidationScheme" = mkOption {
          description = "Specifies the validation scheme for metric and label names.\n\nIt requires Prometheus >= v3.0.0.";
          type = types.nullOr types.str;
        };
        "nativeHistogramBucketLimit" = mkOption {
          description = "If there are more than this many buckets in a native histogram,\nbuckets will be merged to stay within the limit.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.int;
        };
        "nativeHistogramMinBucketFactor" = mkOption {
          description = "If the growth factor of one bucket to the next is smaller than this,\nbuckets will be merged to increase the factor sufficiently.\nIt requires Prometheus >= v2.50.0.";
          type = types.nullOr (types.either types.int types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "nomadSDConfigs" = mkOption {
          description = "NomadSDConfigs defines a list of Nomad service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigs")
          );
        };
        "oauth2" = mkOption {
          description = "OAuth2 configuration to use on every scrape request.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2");
        };
        "openstackSDConfigs" = mkOption {
          description = "OpenStackSDConfigs defines a list of OpenStack service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigs")
          );
        };
        "ovhcloudSDConfigs" = mkOption {
          description = "OVHCloudSDConfigs defines a list of OVHcloud service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOvhcloudSDConfigs")
          );
        };
        "params" = mkOption {
          description = "Optional HTTP URL parameters";
          type = types.nullOr (types.loaOf types.str);
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "puppetDBSDConfigs" = mkOption {
          description = "PuppetDBSDConfigs defines a list of PuppetDB service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigs")
          );
        };
        "relabelings" = mkOption {
          description = "RelabelConfigs defines how to rewrite the target's labels before scraping.\nPrometheus Operator automatically adds relabelings for a few standard Kubernetes fields.\nThe original scrape job's name is available via the `__tmp_prometheus_job_name` label.\nMore info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecRelabelings")
          );
        };
        "sampleLimit" = mkOption {
          description = "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.";
          type = types.nullOr types.int;
        };
        "scalewaySDConfigs" = mkOption {
          description = "ScalewaySDConfigs defines a list of Scaleway instances and baremetal service discovery configurations.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigs")
          );
        };
        "scheme" = mkOption {
          description = "Configures the protocol scheme used for requests.\nIf empty, Prometheus uses HTTP by default.";
          type = types.nullOr types.str;
        };
        "scrapeClass" = mkOption {
          description = "The scrape class to apply.";
          type = types.nullOr types.str;
        };
        "scrapeClassicHistograms" = mkOption {
          description = "Whether to scrape a classic histogram that is also exposed as a native histogram.\nIt requires Prometheus >= v2.45.0.";
          type = types.nullOr types.bool;
        };
        "scrapeInterval" = mkOption {
          description = "ScrapeInterval is the interval between consecutive scrapes.";
          type = types.nullOr types.str;
        };
        "scrapeProtocols" = mkOption {
          description = "The protocols to negotiate during a scrape. It tells clients the\nprotocols supported by Prometheus in order of preference (from most to least preferred).\n\nIf unset, Prometheus uses its default value.\n\nIt requires Prometheus >= v2.49.0.";
          type = types.nullOr (types.listOf types.str);
        };
        "scrapeTimeout" = mkOption {
          description = "ScrapeTimeout is the number of seconds to wait until a scrape request times out.\nThe value cannot be greater than the scrape interval otherwise the operator will reject the resource.";
          type = types.nullOr types.str;
        };
        "staticConfigs" = mkOption {
          description = "StaticConfigs defines a list of static targets with a common label set.";
          type = types.nullOr (
            types.listOf (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecStaticConfigs")
          );
        };
        "targetLimit" = mkOption {
          description = "TargetLimit defines a limit on the number of scraped targets that will be accepted.";
          type = types.nullOr types.int;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use on every scrape request";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfig");
        };
        "trackTimestampsStaleness" = mkOption {
          description = "TrackTimestampsStaleness whether Prometheus tracks staleness of\nthe metrics that have an explicit timestamp present in scraped data.\nHas no effect if `honorTimestamps` is false.\nIt requires Prometheus >= v2.48.0.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "azureSDConfigs" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "consulSDConfigs" = mkOverride 1002 null;
        "convertClassicHistogramsToNHCB" = mkOverride 1002 null;
        "digitalOceanSDConfigs" = mkOverride 1002 null;
        "dnsSDConfigs" = mkOverride 1002 null;
        "dockerSDConfigs" = mkOverride 1002 null;
        "dockerSwarmSDConfigs" = mkOverride 1002 null;
        "ec2SDConfigs" = mkOverride 1002 null;
        "enableCompression" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "eurekaSDConfigs" = mkOverride 1002 null;
        "fallbackScrapeProtocol" = mkOverride 1002 null;
        "fileSDConfigs" = mkOverride 1002 null;
        "gceSDConfigs" = mkOverride 1002 null;
        "hetznerSDConfigs" = mkOverride 1002 null;
        "honorLabels" = mkOverride 1002 null;
        "honorTimestamps" = mkOverride 1002 null;
        "httpSDConfigs" = mkOverride 1002 null;
        "ionosSDConfigs" = mkOverride 1002 null;
        "jobName" = mkOverride 1002 null;
        "keepDroppedTargets" = mkOverride 1002 null;
        "kubernetesSDConfigs" = mkOverride 1002 null;
        "kumaSDConfigs" = mkOverride 1002 null;
        "labelLimit" = mkOverride 1002 null;
        "labelNameLengthLimit" = mkOverride 1002 null;
        "labelValueLengthLimit" = mkOverride 1002 null;
        "lightSailSDConfigs" = mkOverride 1002 null;
        "linodeSDConfigs" = mkOverride 1002 null;
        "metricRelabelings" = mkOverride 1002 null;
        "metricsPath" = mkOverride 1002 null;
        "nameEscapingScheme" = mkOverride 1002 null;
        "nameValidationScheme" = mkOverride 1002 null;
        "nativeHistogramBucketLimit" = mkOverride 1002 null;
        "nativeHistogramMinBucketFactor" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "nomadSDConfigs" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "openstackSDConfigs" = mkOverride 1002 null;
        "ovhcloudSDConfigs" = mkOverride 1002 null;
        "params" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "puppetDBSDConfigs" = mkOverride 1002 null;
        "relabelings" = mkOverride 1002 null;
        "sampleLimit" = mkOverride 1002 null;
        "scalewaySDConfigs" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
        "scrapeClass" = mkOverride 1002 null;
        "scrapeClassicHistograms" = mkOverride 1002 null;
        "scrapeInterval" = mkOverride 1002 null;
        "scrapeProtocols" = mkOverride 1002 null;
        "scrapeTimeout" = mkOverride 1002 null;
        "staticConfigs" = mkOverride 1002 null;
        "targetLimit" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "trackTimestampsStaleness" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigs" = {
      options = {
        "authenticationMethod" = mkOption {
          description = "# The authentication method, either `OAuth` or `ManagedIdentity` or `SDK`.\nSee https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview\nSDK authentication method uses environment variables by default.\nSee https://learn.microsoft.com/en-us/azure/developer/go/azure-sdk-authentication";
          type = types.nullOr types.str;
        };
        "authorization" = mkOption {
          description = "Authorization header configuration to authenticate against the target HTTP endpoint.\nCannot be set at the same time as `oAuth2`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to authenticate against the target HTTP endpoint.\nMore info: https://prometheus.io/docs/operating/configuration/#endpoints\nCannot be set at the same time as `authorization`, or `oAuth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsBasicAuth"
          );
        };
        "clientID" = mkOption {
          description = "Optional client ID. Only required with the OAuth authentication method.";
          type = types.nullOr types.str;
        };
        "clientSecret" = mkOption {
          description = "Optional client secret. Only required with the OAuth authentication method.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsClientSecret"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "environment" = mkOption {
          description = "The Azure environment.";
          type = types.nullOr types.str;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration to authenticate against the target HTTP endpoint.\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "The port to scrape metrics from. If using the public IP address, this must\ninstead be specified in the relabeling rule.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "RefreshInterval configures the refresh interval at which Prometheus will re-read the instance list.";
          type = types.nullOr types.str;
        };
        "resourceGroup" = mkOption {
          description = "Optional resource group name. Limits discovery to this resource group.\nRequires  Prometheus v2.35.0 and above";
          type = types.nullOr types.str;
        };
        "subscriptionID" = mkOption {
          description = "The subscription ID. Always required.";
          type = types.str;
        };
        "tenantID" = mkOption {
          description = "Optional tenant ID. Only required with the OAuth authentication method.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authenticationMethod" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "clientID" = mkOverride 1002 null;
        "clientSecret" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "environment" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "resourceGroup" = mkOverride 1002 null;
        "tenantID" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecAzureSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigs" = {
      options = {
        "allowStale" = mkOption {
          description = "Allow stale Consul results (see https://www.consul.io/api/features/consistency.html). Will reduce load on Consul.\nIf unset, Prometheus uses its default value.";
          type = types.nullOr types.bool;
        };
        "authorization" = mkOption {
          description = "Optional Authorization header configuration to authenticate against the Consul Server.\nCannot be set at the same time as `basicAuth`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "Optional BasicAuth information to authenticate against the Consul Server.\nMore info: https://prometheus.io/docs/operating/configuration/#endpoints\nCannot be set at the same time as `authorization`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsBasicAuth"
          );
        };
        "datacenter" = mkOption {
          description = "Consul Datacenter name, if not provided it will use the local Consul Agent Datacenter.";
          type = types.nullOr types.str;
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.\nIf unset, Prometheus uses its default value.";
          type = types.nullOr types.bool;
        };
        "filter" = mkOption {
          description = "Filter expression used to filter the catalog results.\nSee https://www.consul.io/api-docs/catalog#list-services\nIt requires Prometheus >= 3.0.0.";
          type = types.nullOr types.str;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.\nIf unset, Prometheus uses its default value.";
          type = types.nullOr types.bool;
        };
        "namespace" = mkOption {
          description = "Namespaces are only supported in Consul Enterprise.\n\nIt requires Prometheus >= 2.28.0.";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "nodeMeta" = mkOption {
          description = "Node metadata key/value pairs to filter nodes for a given service.\nStarting with Consul 1.14, it is recommended to use `filter` with the `NodeMeta` selector instead.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "oauth2" = mkOption {
          description = "Optional OAuth2.0 configuration.\nCannot be set at the same time as `basicAuth`, or `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2"
          );
        };
        "partition" = mkOption {
          description = "Admin Partitions are only supported in Consul Enterprise.";
          type = types.nullOr types.str;
        };
        "pathPrefix" = mkOption {
          description = "Prefix for URIs for when consul is behind an API gateway (reverse proxy).\n\nIt requires Prometheus >= 2.45.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "The time after which the provided names are refreshed.\nOn large setup it might be a good idea to increase this value because the catalog will change all the time.\nIf unset, Prometheus uses its default value.";
          type = types.nullOr types.str;
        };
        "scheme" = mkOption {
          description = "HTTP Scheme default \"http\"";
          type = types.nullOr types.str;
        };
        "server" = mkOption {
          description = "Consul server address. A valid string consisting of a hostname or IP followed by an optional port number.";
          type = types.str;
        };
        "services" = mkOption {
          description = "A list of services for which targets are retrieved. If omitted, all services are scraped.";
          type = types.nullOr (types.listOf types.str);
        };
        "tagSeparator" = mkOption {
          description = "The string by which Consul tags are joined into the tag label.\nIf unset, Prometheus uses its default value.";
          type = types.nullOr types.str;
        };
        "tags" = mkOption {
          description = "An optional list of tags used to filter nodes for a given service. Services must contain all tags in the list.\nStarting with Consul 1.14, it is recommended to use `filter` with the `ServiceTags` selector instead.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to connect to the Consul API.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfig"
          );
        };
        "tokenRef" = mkOption {
          description = "Consul ACL TokenRef, if not provided it will use the ACL from the local Consul Agent.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTokenRef"
          );
        };
      };

      config = {
        "allowStale" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "datacenter" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "filter" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "nodeMeta" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "partition" = mkOverride 1002 null;
        "pathPrefix" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "scheme" = mkOverride 1002 null;
        "services" = mkOverride 1002 null;
        "tagSeparator" = mkOverride 1002 null;
        "tags" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "tokenRef" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecConsulSDConfigsTokenRef" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header configuration to authenticate against the DigitalOcean API.\nCannot be set at the same time as `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsAuthorization"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be set at the same time as `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "The port to scrape metrics from.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the instance list.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCertConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDigitalOceanSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDnsSDConfigs" = {
      options = {
        "names" = mkOption {
          description = "A list of DNS domain names to be queried.";
          type = types.listOf types.str;
        };
        "port" = mkOption {
          description = "The port number used if the query type is not SRV\nIgnored for SRV records";
          type = types.nullOr types.int;
        };
        "refreshInterval" = mkOption {
          description = "RefreshInterval configures the time after which the provided names are refreshed.\nIf not set, Prometheus uses its default value.";
          type = types.nullOr types.str;
        };
        "type" = mkOption {
          description = "The type of DNS query to perform. One of SRV, A, AAAA, MX or NS.\nIf not set, Prometheus uses its default value.\n\nWhen set to NS, it requires Prometheus >= v2.49.0.\nWhen set to MX, it requires Prometheus >= v2.38.0";
          type = types.nullOr types.str;
        };
      };

      config = {
        "port" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header configuration to authenticate against the Docker API.\nCannot be set at the same time as `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "filters" = mkOption {
          description = "Optional filters to limit the discovery process to a subset of the available resources.";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsFilters"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "host" = mkOption {
          description = "Address of the docker daemon";
          type = types.str;
        };
        "hostNetworkingHost" = mkOption {
          description = "The host to use if the container is in host networking mode.";
          type = types.nullOr types.str;
        };
        "matchFirstNetwork" = mkOption {
          description = "Configure whether to match the first network if the container has multiple networks defined.\nIf unset, Prometheus uses true by default.\nIt requires Prometheus >= v2.54.1.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be set at the same time as `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "The port to scrape metrics from.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Time after which the container is refreshed.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "filters" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "hostNetworkingHost" = mkOverride 1002 null;
        "matchFirstNetwork" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsFilters" = {
      options = {
        "name" = mkOption {
          description = "Name of the Filter.";
          type = types.str;
        };
        "values" = mkOption {
          description = "Value to filter on.";
          type = types.listOf types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header configuration to authenticate against the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "Optional HTTP basic authentication information.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "filters" = mkOption {
          description = "Optional filters to limit the discovery process to a subset of available\nresources.\nThe available filters are listed in the upstream documentation:\nServices: https://docs.docker.com/engine/api/v1.40/#operation/ServiceList\nTasks: https://docs.docker.com/engine/api/v1.40/#operation/TaskList\nNodes: https://docs.docker.com/engine/api/v1.40/#operation/NodeList";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsFilters"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "host" = mkOption {
          description = "Address of the Docker daemon";
          type = types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "The port to scrape metrics from, when `role` is nodes, and for discovered\ntasks and services that don't have published ports.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "The time after which the service discovery data is refreshed.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role of the targets to retrieve. Must be `Services`, `Tasks`, or `Nodes`.";
          type = types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use on every scrape request";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "filters" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsFilters" = {
      options = {
        "name" = mkOption {
          description = "Name of the Filter.";
          type = types.str;
        };
        "values" = mkOption {
          description = "Value to filter on.";
          type = types.listOf types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCertConfigMap" =
      {
        options = {
          "key" = mkOption {
            description = "The key to select.";
            type = types.str;
          };
          "name" = mkOption {
            description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
            type = types.nullOr types.str;
          };
          "optional" = mkOption {
            description = "Specify whether the ConfigMap or its key must be defined";
            type = types.nullOr types.bool;
          };
        };

        config = {
          "name" = mkOverride 1002 null;
          "optional" = mkOverride 1002 null;
        };
      };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecDockerSwarmSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigs" = {
      options = {
        "accessKey" = mkOption {
          description = "AccessKey is the AWS API key.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsAccessKey"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.\nIt requires Prometheus >= v2.41.0";
          type = types.nullOr types.bool;
        };
        "filters" = mkOption {
          description = "Filters can be used optionally to filter the instance list by other criteria.\nAvailable filter criteria can be found here:\nhttps://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html\nFilter API documentation: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Filter.html\nIt requires Prometheus >= v2.3.0";
          type = types.nullOr (
            coerceAttrsOfSubmodulesToListByKey
              "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsFilters"
              "name"
              [ "name" ]
          );
          apply = attrsToList;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.\nIt requires Prometheus >= v2.41.0";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "The port to scrape metrics from. If using the public IP address, this must\ninstead be specified in the relabeling rule.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "RefreshInterval configures the refresh interval at which Prometheus will re-read the instance list.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "The AWS region.";
          type = types.nullOr types.str;
        };
        "roleARN" = mkOption {
          description = "AWS Role ARN, an alternative to using AWS API keys.";
          type = types.nullOr types.str;
        };
        "secretKey" = mkOption {
          description = "SecretKey is the AWS API secret.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsSecretKey"
          );
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to connect to the AWS EC2 API.\nIt requires Prometheus >= v2.41.0";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfig"
          );
        };
      };

      config = {
        "accessKey" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "filters" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "roleARN" = mkOverride 1002 null;
        "secretKey" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsAccessKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsFilters" = {
      options = {
        "name" = mkOption {
          description = "Name of the Filter.";
          type = types.str;
        };
        "values" = mkOption {
          description = "Value to filter on.";
          type = types.listOf types.str;
        };
      };

      config = { };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsSecretKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEc2SDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be set at the same time as `authorization` or `basic_auth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2"
          );
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the instance list.";
          type = types.nullOr types.str;
        };
        "server" = mkOption {
          description = "The URL to connect to the Eureka server.";
          type = types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecEurekaSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecFileSDConfigs" = {
      options = {
        "files" = mkOption {
          description = "List of files to be used for file discovery. Recommendation: use absolute paths. While relative paths work, the\nprometheus-operator project makes no guarantees about the working directory where the configuration file is\nstored.\nFiles must be mounted using Prometheus.ConfigMaps or Prometheus.Secrets.";
          type = types.listOf types.str;
        };
        "refreshInterval" = mkOption {
          description = "RefreshInterval configures the refresh interval at which Prometheus will reload the content of the files.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "refreshInterval" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecGceSDConfigs" = {
      options = {
        "filter" = mkOption {
          description = "Filter can be used optionally to filter the instance list by other criteria\nSyntax of this filter is described in the filter query parameter section:\nhttps://cloud.google.com/compute/docs/reference/latest/instances/list";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "The port to scrape metrics from. If using the public IP address, this must\ninstead be specified in the relabeling rule.";
          type = types.nullOr types.int;
        };
        "project" = mkOption {
          description = "The Google Cloud Project ID";
          type = types.str;
        };
        "refreshInterval" = mkOption {
          description = "RefreshInterval configures the refresh interval at which Prometheus will re-read the instance list.";
          type = types.nullOr types.str;
        };
        "tagSeparator" = mkOption {
          description = "The tag separator is used to separate the tags on concatenation";
          type = types.nullOr types.str;
        };
        "zone" = mkOption {
          description = "The zone of the scrape targets. If you need multiple zones use multiple GCESDConfigs.";
          type = types.str;
        };
      };

      config = {
        "filter" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tagSeparator" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header configuration, required when role is hcloud.\nRole robot does not support bearer token authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to use on every scrape request, required when role is robot.\nRole hcloud does not support basic auth.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be used at the same time as `basic_auth` or `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "The port to scrape metrics from.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "The time after which the servers are refreshed.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "The Hetzner role of entities that should be discovered.";
          type = types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHetznerSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header configuration to authenticate against the target HTTP endpoint.\nCannot be set at the same time as `oAuth2`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to authenticate against the target HTTP endpoint.\nMore info: https://prometheus.io/docs/operating/configuration/#endpoints\nCannot be set at the same time as `authorization`, or `oAuth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration to authenticate against the target HTTP endpoint.\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2"
          );
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "RefreshInterval configures the refresh interval at which Prometheus will re-query the\nendpoint to update the target list.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfig"
          );
        };
        "url" = mkOption {
          description = "URL from which the targets are fetched.";
          type = types.str;
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecHttpSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization` header configuration, required when using IONOS.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsAuthorization";
        };
        "datacenterID" = mkOption {
          description = "The unique ID of the IONOS data center.";
          type = types.str;
        };
        "enableHTTP2" = mkOption {
          description = "Configure whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether the HTTP requests should follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Configure whether to enable OAuth2.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "Port to scrape the metrics from.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the list of resources.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the IONOS API.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecIonosSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigs" = {
      options = {
        "apiServer" = mkOption {
          description = "The API server address consisting of a hostname or IP address followed\nby an optional port number.\nIf left empty, Prometheus is assumed to run inside\nof the cluster. It will discover API servers automatically and use the pod's\nCA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.";
          type = types.nullOr types.str;
        };
        "attachMetadata" = mkOption {
          description = "Optional metadata to attach to discovered targets.\nIt requires Prometheus >= v2.35.0 when using the `Pod` role and\nPrometheus >= v2.37.0 for `Endpoints` and `Endpointslice` roles.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsAttachMetadata"
          );
        };
        "authorization" = mkOption {
          description = "Authorization header to use on every scrape request.\nCannot be set at the same time as `basicAuth`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to use on every scrape request.\nCannot be set at the same time as `authorization`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "namespaces" = mkOption {
          description = "Optional namespace discovery. If omitted, Prometheus discovers targets across all namespaces.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsNamespaces"
          );
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2"
          );
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role of the Kubernetes entities that should be discovered.\nRole `Endpointslice` requires Prometheus >= v2.21.0";
          type = types.str;
        };
        "selectors" = mkOption {
          description = "Selector to select objects.\nIt requires Prometheus >= v2.17.0";
          type = types.nullOr (
            types.listOf (
              submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsSelectors"
            )
          );
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to connect to the Kubernetes API.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "apiServer" = mkOverride 1002 null;
        "attachMetadata" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "namespaces" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "selectors" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsAttachMetadata" = {
      options = {
        "node" = mkOption {
          description = "Attaches node metadata to discovered targets.\nWhen set to true, Prometheus must have the `get` permission on the\n`Nodes` objects.\nOnly valid for Pod, Endpoint and Endpointslice roles.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "node" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsNamespaces" = {
      options = {
        "names" = mkOption {
          description = "List of namespaces where to watch for resources.\nIf empty and `ownNamespace` isn't true, Prometheus watches for resources in all namespaces.";
          type = types.nullOr (types.listOf types.str);
        };
        "ownNamespace" = mkOption {
          description = "Includes the namespace in which the Prometheus pod runs to the list of watched namespaces.";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "names" = mkOverride 1002 null;
        "ownNamespace" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsSelectors" = {
      options = {
        "field" = mkOption {
          description = "An optional field selector to limit the service discovery to resources which have fields with specific values.\ne.g: `metadata.name=foobar`";
          type = types.nullOr types.str;
        };
        "label" = mkOption {
          description = "An optional label selector to limit the service discovery to resources with specific labels and label values.\ne.g: `node.kubernetes.io/instance-type=master`";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Role specifies the type of Kubernetes resource to limit the service discovery to.\nAccepted values are: Node, Pod, Endpoints, EndpointSlice, Service, Ingress.";
          type = types.str;
        };
      };

      config = {
        "field" = mkOverride 1002 null;
        "label" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKubernetesSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsBasicAuth"
          );
        };
        "clientID" = mkOption {
          description = "Client id is used by Kuma Control Plane to compute Monitoring Assignment for specific Prometheus backend.";
          type = types.nullOr types.str;
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "fetchTimeout" = mkOption {
          description = "The time after which the monitoring assignments are refreshed.";
          type = types.nullOr types.str;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be set at the same time as `authorization`, or `basicAuth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2"
          );
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "The time to wait between polling update requests.";
          type = types.nullOr types.str;
        };
        "server" = mkOption {
          description = "Address of the Kuma Control Plane's MADS xDS server.";
          type = types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use on every scrape request";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "clientID" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "fetchTimeout" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecKumaSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigs" = {
      options = {
        "accessKey" = mkOption {
          description = "AccessKey is the AWS API key.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsAccessKey"
          );
        };
        "authorization" = mkOption {
          description = "Optional `authorization` HTTP header configuration.\nCannot be set at the same time as `basicAuth`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "Optional HTTP basic authentication information.\nCannot be set at the same time as `authorization`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Configure whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "endpoint" = mkOption {
          description = "Custom endpoint to be used.";
          type = types.nullOr types.str;
        };
        "followRedirects" = mkOption {
          description = "Configure whether the HTTP requests should follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth2.0 configuration.\nCannot be set at the same time as `basicAuth`, or `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "Port to scrape the metrics from.\nIf using the public IP address, this must instead be specified in the relabeling rule.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the list of instances.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "The AWS region.";
          type = types.nullOr types.str;
        };
        "roleARN" = mkOption {
          description = "AWS Role ARN, an alternative to using AWS API keys.";
          type = types.nullOr types.str;
        };
        "secretKey" = mkOption {
          description = "SecretKey is the AWS API secret.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsSecretKey"
          );
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to connect to the Puppet DB.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "accessKey" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "endpoint" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "roleARN" = mkOverride 1002 null;
        "secretKey" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsAccessKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsSecretKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLightSailSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Authorization header configuration.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsAuthorization"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be used at the same time as `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "Default port to scrape metrics from.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Time after which the linode instances are refreshed.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "Optional region to filter on.";
          type = types.nullOr types.str;
        };
        "tagSeparator" = mkOption {
          description = "The string by which Linode Instance tags are joined into the tag label.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "tagSeparator" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecLinodeSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecMetricRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigs" = {
      options = {
        "allowStale" = mkOption {
          description = "The information to access the Nomad API. It is to be defined\nas the Nomad documentation requires.";
          type = types.nullOr types.bool;
        };
        "authorization" = mkOption {
          description = "Authorization header to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "BasicAuth information to use on every scrape request.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "namespace" = mkOption {
          description = "";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth 2.0 configuration.\nCannot be set at the same time as `authorization` or `basic_auth`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2"
          );
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Duration is a valid time duration that can be parsed by Prometheus model.ParseDuration() function.\nSupported units: y, w, d, h, m, s, ms\nExamples: `30s`, `1m`, `1h20m15s`, `15d`";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "";
          type = types.nullOr types.str;
        };
        "server" = mkOption {
          description = "";
          type = types.str;
        };
        "tagSeparator" = mkOption {
          description = "";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfig"
          );
        };
      };

      config = {
        "allowStale" = mkOverride 1002 null;
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "namespace" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "region" = mkOverride 1002 null;
        "tagSeparator" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecNomadSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfig");
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigs" = {
      options = {
        "allTenants" = mkOption {
          description = "Whether the service discovery should list all instances for all projects.\nIt is only relevant for the 'instance' role and usually requires admin permissions.";
          type = types.nullOr types.bool;
        };
        "applicationCredentialId" = mkOption {
          description = "ApplicationCredentialID";
          type = types.nullOr types.str;
        };
        "applicationCredentialName" = mkOption {
          description = "The ApplicationCredentialID or ApplicationCredentialName fields are\nrequired if using an application credential to authenticate. Some providers\nallow you to create an application credential to authenticate rather than a\npassword.";
          type = types.nullOr types.str;
        };
        "applicationCredentialSecret" = mkOption {
          description = "The applicationCredentialSecret field is required if using an application\ncredential to authenticate.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsApplicationCredentialSecret"
          );
        };
        "availability" = mkOption {
          description = "Availability of the endpoint to connect to.";
          type = types.nullOr types.str;
        };
        "domainID" = mkOption {
          description = "DomainID";
          type = types.nullOr types.str;
        };
        "domainName" = mkOption {
          description = "At most one of domainId and domainName must be provided if using username\nwith Identity V3. Otherwise, either are optional.";
          type = types.nullOr types.str;
        };
        "identityEndpoint" = mkOption {
          description = "IdentityEndpoint specifies the HTTP endpoint that is required to work with\nthe Identity API of the appropriate version.";
          type = types.nullOr types.str;
        };
        "password" = mkOption {
          description = "Password for the Identity V2 and V3 APIs. Consult with your provider's\ncontrol panel to discover your account's preferred method of authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsPassword"
          );
        };
        "port" = mkOption {
          description = "The port to scrape metrics from. If using the public IP address, this must\ninstead be specified in the relabeling rule.";
          type = types.nullOr types.int;
        };
        "projectID" = mkOption {
          description = " ProjectID";
          type = types.nullOr types.str;
        };
        "projectName" = mkOption {
          description = "The ProjectId and ProjectName fields are optional for the Identity V2 API.\nSome providers allow you to specify a ProjectName instead of the ProjectId.\nSome require both. Your provider's authentication policies will determine\nhow these fields influence authentication.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the instance list.";
          type = types.nullOr types.str;
        };
        "region" = mkOption {
          description = "The OpenStack Region.";
          type = types.str;
        };
        "role" = mkOption {
          description = "The OpenStack role of entities that should be discovered.\n\nNote: The `LoadBalancer` role requires Prometheus >= v3.2.0.";
          type = types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration applying to the target HTTP endpoint.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfig"
          );
        };
        "userid" = mkOption {
          description = "UserID";
          type = types.nullOr types.str;
        };
        "username" = mkOption {
          description = "Username is required if using Identity V2 API. Consult with your provider's\ncontrol panel to discover your account's username.\nIn Identity V3, either userid or a combination of username\nand domainId or domainName are needed";
          type = types.nullOr types.str;
        };
      };

      config = {
        "allTenants" = mkOverride 1002 null;
        "applicationCredentialId" = mkOverride 1002 null;
        "applicationCredentialName" = mkOverride 1002 null;
        "applicationCredentialSecret" = mkOverride 1002 null;
        "availability" = mkOverride 1002 null;
        "domainID" = mkOverride 1002 null;
        "domainName" = mkOverride 1002 null;
        "identityEndpoint" = mkOverride 1002 null;
        "password" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "projectID" = mkOverride 1002 null;
        "projectName" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "userid" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsApplicationCredentialSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOpenstackSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOvhcloudSDConfigs" = {
      options = {
        "applicationKey" = mkOption {
          description = "Access key to use. https://api.ovh.com.";
          type = types.str;
        };
        "applicationSecret" = mkOption {
          description = "SecretKeySelector selects a key of a Secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOvhcloudSDConfigsApplicationSecret";
        };
        "consumerKey" = mkOption {
          description = "SecretKeySelector selects a key of a Secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOvhcloudSDConfigsConsumerKey";
        };
        "endpoint" = mkOption {
          description = "Custom endpoint to be used.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the resources list.";
          type = types.nullOr types.str;
        };
        "service" = mkOption {
          description = "Service of the targets to retrieve. Must be `VPS` or `DedicatedServer`.";
          type = types.str;
        };
      };

      config = {
        "endpoint" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOvhcloudSDConfigsApplicationSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecOvhcloudSDConfigsConsumerKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigs" = {
      options = {
        "authorization" = mkOption {
          description = "Optional `authorization` HTTP header configuration.\nCannot be set at the same time as `basicAuth`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsAuthorization"
          );
        };
        "basicAuth" = mkOption {
          description = "Optional HTTP basic authentication information.\nCannot be set at the same time as `authorization`, or `oauth2`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsBasicAuth"
          );
        };
        "enableHTTP2" = mkOption {
          description = "Configure whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether the HTTP requests should follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "includeParameters" = mkOption {
          description = "Whether to include the parameters as meta labels.\nNote: Enabling this exposes parameters in the Prometheus UI and API. Make sure\nthat you don't have secrets exposed as parameters if you enable this.";
          type = types.nullOr types.bool;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "oauth2" = mkOption {
          description = "Optional OAuth2.0 configuration.\nCannot be set at the same time as `basicAuth`, or `authorization`.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2"
          );
        };
        "port" = mkOption {
          description = "Port to scrape the metrics from.";
          type = types.nullOr types.int;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "query" = mkOption {
          description = "Puppet Query Language (PQL) query. Only resources are supported.\nhttps://puppet.com/docs/puppetdb/latest/api/query/v4/pql.html";
          type = types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the list of resources.";
          type = types.nullOr types.str;
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to connect to the Puppet DB.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfig"
          );
        };
        "url" = mkOption {
          description = "The URL of the PuppetDB root query endpoint.";
          type = types.str;
        };
      };

      config = {
        "authorization" = mkOverride 1002 null;
        "basicAuth" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "includeParameters" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "oauth2" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsAuthorization" = {
      options = {
        "credentials" = mkOption {
          description = "Selects a key of a Secret in the namespace that contains the credentials for authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsAuthorizationCredentials"
          );
        };
        "type" = mkOption {
          description = "Defines the authentication type. The value is case-insensitive.\n\n\"Basic\" is not a supported value.\n\nDefault: \"Bearer\"";
          type = types.nullOr types.str;
        };
      };

      config = {
        "credentials" = mkOverride 1002 null;
        "type" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsAuthorizationCredentials" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsBasicAuth" = {
      options = {
        "password" = mkOption {
          description = "`password` specifies a key of a Secret containing the password for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsBasicAuthPassword"
          );
        };
        "username" = mkOption {
          description = "`username` specifies a key of a Secret containing the username for\nauthentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsBasicAuthUsername"
          );
        };
      };

      config = {
        "password" = mkOverride 1002 null;
        "username" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsBasicAuthPassword" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsBasicAuthUsername" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2" = {
      options = {
        "clientId" = mkOption {
          description = "`clientId` specifies a key of a Secret or ConfigMap containing the\nOAuth2 client's ID.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientId";
        };
        "clientSecret" = mkOption {
          description = "`clientSecret` specifies a key of a Secret containing the OAuth2\nclient's secret.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientSecret";
        };
        "endpointParams" = mkOption {
          description = "`endpointParams` configures the HTTP parameters to append to the token\nURL.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "scopes" = mkOption {
          description = "`scopes` defines the OAuth2 scopes used for the token request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use when connecting to the OAuth2 server.\nIt requires Prometheus >= v2.43.0.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfig"
          );
        };
        "tokenUrl" = mkOption {
          description = "`tokenURL` configures the URL to fetch the token from.";
          type = types.str;
        };
      };

      config = {
        "endpointParams" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "scopes" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientId" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientIdConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientIdSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientIdConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientIdSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2ClientSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsOauth2TlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecPuppetDBSDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecRelabelings" = {
      options = {
        "action" = mkOption {
          description = "Action to perform based on the regex matching.\n\n`Uppercase` and `Lowercase` actions require Prometheus >= v2.36.0.\n`DropEqual` and `KeepEqual` actions require Prometheus >= v2.41.0.\n\nDefault: \"Replace\"";
          type = types.nullOr types.str;
        };
        "modulus" = mkOption {
          description = "Modulus to take of the hash of the source label values.\n\nOnly applicable when the action is `HashMod`.";
          type = types.nullOr types.int;
        };
        "regex" = mkOption {
          description = "Regular expression against which the extracted value is matched.";
          type = types.nullOr types.str;
        };
        "replacement" = mkOption {
          description = "Replacement value against which a Replace action is performed if the\nregular expression matches.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
        "separator" = mkOption {
          description = "Separator is the string between concatenated SourceLabels.";
          type = types.nullOr types.str;
        };
        "sourceLabels" = mkOption {
          description = "The source labels select values from existing labels. Their content is\nconcatenated using the configured Separator and matched against the\nconfigured regular expression.";
          type = types.nullOr (types.listOf types.str);
        };
        "targetLabel" = mkOption {
          description = "Label to which the resulting string is written in a replacement.\n\nIt is mandatory for `Replace`, `HashMod`, `Lowercase`, `Uppercase`,\n`KeepEqual` and `DropEqual` actions.\n\nRegex capture groups are available.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "action" = mkOverride 1002 null;
        "modulus" = mkOverride 1002 null;
        "regex" = mkOverride 1002 null;
        "replacement" = mkOverride 1002 null;
        "separator" = mkOverride 1002 null;
        "sourceLabels" = mkOverride 1002 null;
        "targetLabel" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigs" = {
      options = {
        "accessKey" = mkOption {
          description = "Access key to use. https://console.scaleway.com/project/credentials";
          type = types.str;
        };
        "apiURL" = mkOption {
          description = "API URL to use when doing the server listing requests.";
          type = types.nullOr types.str;
        };
        "enableHTTP2" = mkOption {
          description = "Whether to enable HTTP2.";
          type = types.nullOr types.bool;
        };
        "followRedirects" = mkOption {
          description = "Configure whether HTTP requests follow HTTP 3xx redirects.";
          type = types.nullOr types.bool;
        };
        "nameFilter" = mkOption {
          description = "NameFilter specify a name filter (works as a LIKE) to apply on the server listing request.";
          type = types.nullOr types.str;
        };
        "noProxy" = mkOption {
          description = "`noProxy` is a comma-separated string that can contain IPs, CIDR notation, domain names\nthat should be excluded from proxying. IP and domain names can\ncontain port numbers.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.str;
        };
        "port" = mkOption {
          description = "The port to scrape metrics from.";
          type = types.nullOr types.int;
        };
        "projectID" = mkOption {
          description = "Project ID of the targets.";
          type = types.str;
        };
        "proxyConnectHeader" = mkOption {
          description = "ProxyConnectHeader optionally specifies headers to send to\nproxies during CONNECT requests.\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr (types.loaOf types.attrs);
        };
        "proxyFromEnvironment" = mkOption {
          description = "Whether to use the proxy configuration defined by environment variables (HTTP_PROXY, HTTPS_PROXY, and NO_PROXY).\n\nIt requires Prometheus >= v2.43.0, Alertmanager >= v0.25.0 or Thanos >= v0.32.0.";
          type = types.nullOr types.bool;
        };
        "proxyUrl" = mkOption {
          description = "`proxyURL` defines the HTTP proxy server to use.";
          type = types.nullOr types.str;
        };
        "refreshInterval" = mkOption {
          description = "Refresh interval to re-read the list of instances.";
          type = types.nullOr types.str;
        };
        "role" = mkOption {
          description = "Service of the targets to retrieve. Must be `Instance` or `Baremetal`.";
          type = types.str;
        };
        "secretKey" = mkOption {
          description = "Secret key to use when listing targets.";
          type = submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsSecretKey";
        };
        "tagsFilter" = mkOption {
          description = "TagsFilter specify a tag filter (a server needs to have all defined tags to be listed) to apply on the server listing request.";
          type = types.nullOr (types.listOf types.str);
        };
        "tlsConfig" = mkOption {
          description = "TLS configuration to use on every scrape request";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfig"
          );
        };
        "zone" = mkOption {
          description = "Zone is the availability zone of your targets (e.g. fr-par-1).";
          type = types.nullOr types.str;
        };
      };

      config = {
        "apiURL" = mkOverride 1002 null;
        "enableHTTP2" = mkOverride 1002 null;
        "followRedirects" = mkOverride 1002 null;
        "nameFilter" = mkOverride 1002 null;
        "noProxy" = mkOverride 1002 null;
        "port" = mkOverride 1002 null;
        "proxyConnectHeader" = mkOverride 1002 null;
        "proxyFromEnvironment" = mkOverride 1002 null;
        "proxyUrl" = mkOverride 1002 null;
        "refreshInterval" = mkOverride 1002 null;
        "tagsFilter" = mkOverride 1002 null;
        "tlsConfig" = mkOverride 1002 null;
        "zone" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsSecretKey" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCa"
          );
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCert"
          );
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecScalewaySDConfigsTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecStaticConfigs" = {
      options = {
        "labels" = mkOption {
          description = "Labels assigned to all metrics scraped from the targets.";
          type = types.nullOr (types.attrsOf types.str);
        };
        "targets" = mkOption {
          description = "List of targets for this static configuration.";
          type = types.listOf types.str;
        };
      };

      config = {
        "labels" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfig" = {
      options = {
        "ca" = mkOption {
          description = "Certificate authority used when verifying server certificates.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCa");
        };
        "cert" = mkOption {
          description = "Client certificate to present when doing client-authentication.";
          type = types.nullOr (submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCert");
        };
        "insecureSkipVerify" = mkOption {
          description = "Disable target certificate validation.";
          type = types.nullOr types.bool;
        };
        "keySecret" = mkOption {
          description = "Secret containing the client key file for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigKeySecret"
          );
        };
        "maxVersion" = mkOption {
          description = "Maximum acceptable TLS version.\n\nIt requires Prometheus >= v2.41.0 or Thanos >= v0.31.0.";
          type = types.nullOr types.str;
        };
        "minVersion" = mkOption {
          description = "Minimum acceptable TLS version.\n\nIt requires Prometheus >= v2.35.0 or Thanos >= v0.28.0.";
          type = types.nullOr types.str;
        };
        "serverName" = mkOption {
          description = "Used to verify the hostname for the targets.";
          type = types.nullOr types.str;
        };
      };

      config = {
        "ca" = mkOverride 1002 null;
        "cert" = mkOverride 1002 null;
        "insecureSkipVerify" = mkOverride 1002 null;
        "keySecret" = mkOverride 1002 null;
        "maxVersion" = mkOverride 1002 null;
        "minVersion" = mkOverride 1002 null;
        "serverName" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCa" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCaConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCaSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCaConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCaSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCert" = {
      options = {
        "configMap" = mkOption {
          description = "ConfigMap containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCertConfigMap"
          );
        };
        "secret" = mkOption {
          description = "Secret containing data to use for the targets.";
          type = types.nullOr (
            submoduleOf "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCertSecret"
          );
        };
      };

      config = {
        "configMap" = mkOverride 1002 null;
        "secret" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCertConfigMap" = {
      options = {
        "key" = mkOption {
          description = "The key to select.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the ConfigMap or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigCertSecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
    "monitoring.coreos.com.v1alpha1.ScrapeConfigSpecTlsConfigKeySecret" = {
      options = {
        "key" = mkOption {
          description = "The key of the secret to select from.  Must be a valid secret key.";
          type = types.str;
        };
        "name" = mkOption {
          description = "Name of the referent.\nThis field is effectively required, but due to backwards compatibility is\nallowed to be empty. Instances of this type with an empty value here are\nalmost certainly wrong.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names";
          type = types.nullOr types.str;
        };
        "optional" = mkOption {
          description = "Specify whether the Secret or its key must be defined";
          type = types.nullOr types.bool;
        };
      };

      config = {
        "name" = mkOverride 1002 null;
        "optional" = mkOverride 1002 null;
      };
    };
  };
in
{
  # all resource versions
  options = {
    resources = {
      "monitoring.coreos.com"."v1"."Alertmanager" = mkOption {
        description = "The `Alertmanager` custom resource definition (CRD) defines a desired [Alertmanager](https://prometheus.io/docs/alerting) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage and many more.\n\nFor each `Alertmanager` resource, the Operator deploys a `StatefulSet` in the same namespace. When there are two or more configured replicas, the Operator runs the Alertmanager instances in high-availability mode.\n\nThe resource defines via label and namespace selectors which `AlertmanagerConfig` objects should be associated to the deployed Alertmanager instances.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.Alertmanager" "alertmanagers" "Alertmanager"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1"."PodMonitor" = mkOption {
        description = "The `PodMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of pods.\nAmong other things, it allows to specify:\n* The pods to scrape via label selectors.\n* The container ports to scrape.\n* Authentication credentials to use.\n* Target and metric relabeling.\n\n`Prometheus` and `PrometheusAgent` objects select `PodMonitor` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.PodMonitor" "podmonitors" "PodMonitor"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1"."Probe" = mkOption {
        description = "The `Probe` custom resource definition (CRD) defines how to scrape metrics from prober exporters such as the [blackbox exporter](https://github.com/prometheus/blackbox_exporter).\n\nThe `Probe` resource needs 2 pieces of information:\n* The list of probed addresses which can be defined statically or by discovering Kubernetes Ingress objects.\n* The prober which exposes the availability of probed endpoints (over various protocols such HTTP, TCP, ICMP, ...) as Prometheus metrics.\n\n`Prometheus` and `PrometheusAgent` objects select `Probe` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.Probe" "probes" "Probe" "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1"."Prometheus" = mkOption {
        description = "The `Prometheus` custom resource definition (CRD) defines a desired [Prometheus](https://prometheus.io/docs/prometheus) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage, and Alertmanagers where firing alerts should be sent and many more.\n\nFor each `Prometheus` resource, the Operator deploys one or several `StatefulSet` objects in the same namespace. The number of StatefulSets is equal to the number of shards which is 1 by default.\n\nThe resource defines via label and namespace selectors which `ServiceMonitor`, `PodMonitor`, `Probe` and `PrometheusRule` objects should be associated to the deployed Prometheus instances.\n\nThe Operator continuously reconciles the scrape and rules configuration and a sidecar container running in the Prometheus pods triggers a reload of the configuration when needed.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.Prometheus" "prometheuses" "Prometheus"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1"."PrometheusRule" = mkOption {
        description = "The `PrometheusRule` custom resource definition (CRD) defines [alerting](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) and [recording](https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/) rules to be evaluated by `Prometheus` or `ThanosRuler` objects.\n\n`Prometheus` and `ThanosRuler` objects select `PrometheusRule` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.PrometheusRule" "prometheusrules" "PrometheusRule"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1"."ServiceMonitor" = mkOption {
        description = "The `ServiceMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of services.\nAmong other things, it allows to specify:\n* The services to scrape via label selectors.\n* The container ports to scrape.\n* Authentication credentials to use.\n* Target and metric relabeling.\n\n`Prometheus` and `PrometheusAgent` objects select `ServiceMonitor` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.ServiceMonitor" "servicemonitors" "ServiceMonitor"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1"."ThanosRuler" = mkOption {
        description = "The `ThanosRuler` custom resource definition (CRD) defines a desired [Thanos Ruler](https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md) setup to run in a Kubernetes cluster.\n\nA `ThanosRuler` instance requires at least one compatible Prometheus API endpoint (either Thanos Querier or Prometheus services).\n\nThe resource defines via label and namespace selectors which `PrometheusRule` objects should be associated to the deployed Thanos Ruler instances.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.ThanosRuler" "thanosrulers" "ThanosRuler"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1alpha1"."PrometheusAgent" = mkOption {
        description = "The `PrometheusAgent` custom resource definition (CRD) defines a desired [Prometheus Agent](https://prometheus.io/blog/2021/11/16/agent/) setup to run in a Kubernetes cluster.\n\nThe CRD is very similar to the `Prometheus` CRD except for features which aren't available in agent mode like rule evaluation, persistent storage and Thanos sidecar.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1alpha1.PrometheusAgent" "prometheusagents"
            "PrometheusAgent"
            "monitoring.coreos.com"
            "v1alpha1"
        );
        default = { };
      };
      "monitoring.coreos.com"."v1alpha1"."ScrapeConfig" = mkOption {
        description = "ScrapeConfig defines a namespaced Prometheus scrape_config to be aggregated across\nmultiple namespaces into the Prometheus configuration.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1alpha1.ScrapeConfig" "scrapeconfigs" "ScrapeConfig"
            "monitoring.coreos.com"
            "v1alpha1"
        );
        default = { };
      };
    }
    // {
      "alertmanagers" = mkOption {
        description = "The `Alertmanager` custom resource definition (CRD) defines a desired [Alertmanager](https://prometheus.io/docs/alerting) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage and many more.\n\nFor each `Alertmanager` resource, the Operator deploys a `StatefulSet` in the same namespace. When there are two or more configured replicas, the Operator runs the Alertmanager instances in high-availability mode.\n\nThe resource defines via label and namespace selectors which `AlertmanagerConfig` objects should be associated to the deployed Alertmanager instances.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.Alertmanager" "alertmanagers" "Alertmanager"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "podMonitors" = mkOption {
        description = "The `PodMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of pods.\nAmong other things, it allows to specify:\n* The pods to scrape via label selectors.\n* The container ports to scrape.\n* Authentication credentials to use.\n* Target and metric relabeling.\n\n`Prometheus` and `PrometheusAgent` objects select `PodMonitor` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.PodMonitor" "podmonitors" "PodMonitor"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "probes" = mkOption {
        description = "The `Probe` custom resource definition (CRD) defines how to scrape metrics from prober exporters such as the [blackbox exporter](https://github.com/prometheus/blackbox_exporter).\n\nThe `Probe` resource needs 2 pieces of information:\n* The list of probed addresses which can be defined statically or by discovering Kubernetes Ingress objects.\n* The prober which exposes the availability of probed endpoints (over various protocols such HTTP, TCP, ICMP, ...) as Prometheus metrics.\n\n`Prometheus` and `PrometheusAgent` objects select `Probe` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.Probe" "probes" "Probe" "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "prometheuses" = mkOption {
        description = "The `Prometheus` custom resource definition (CRD) defines a desired [Prometheus](https://prometheus.io/docs/prometheus) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage, and Alertmanagers where firing alerts should be sent and many more.\n\nFor each `Prometheus` resource, the Operator deploys one or several `StatefulSet` objects in the same namespace. The number of StatefulSets is equal to the number of shards which is 1 by default.\n\nThe resource defines via label and namespace selectors which `ServiceMonitor`, `PodMonitor`, `Probe` and `PrometheusRule` objects should be associated to the deployed Prometheus instances.\n\nThe Operator continuously reconciles the scrape and rules configuration and a sidecar container running in the Prometheus pods triggers a reload of the configuration when needed.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.Prometheus" "prometheuses" "Prometheus"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "prometheusAgents" = mkOption {
        description = "The `PrometheusAgent` custom resource definition (CRD) defines a desired [Prometheus Agent](https://prometheus.io/blog/2021/11/16/agent/) setup to run in a Kubernetes cluster.\n\nThe CRD is very similar to the `Prometheus` CRD except for features which aren't available in agent mode like rule evaluation, persistent storage and Thanos sidecar.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1alpha1.PrometheusAgent" "prometheusagents"
            "PrometheusAgent"
            "monitoring.coreos.com"
            "v1alpha1"
        );
        default = { };
      };
      "prometheusRules" = mkOption {
        description = "The `PrometheusRule` custom resource definition (CRD) defines [alerting](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) and [recording](https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/) rules to be evaluated by `Prometheus` or `ThanosRuler` objects.\n\n`Prometheus` and `ThanosRuler` objects select `PrometheusRule` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.PrometheusRule" "prometheusrules" "PrometheusRule"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "scrapeConfigs" = mkOption {
        description = "ScrapeConfig defines a namespaced Prometheus scrape_config to be aggregated across\nmultiple namespaces into the Prometheus configuration.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1alpha1.ScrapeConfig" "scrapeconfigs" "ScrapeConfig"
            "monitoring.coreos.com"
            "v1alpha1"
        );
        default = { };
      };
      "serviceMonitors" = mkOption {
        description = "The `ServiceMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of services.\nAmong other things, it allows to specify:\n* The services to scrape via label selectors.\n* The container ports to scrape.\n* Authentication credentials to use.\n* Target and metric relabeling.\n\n`Prometheus` and `PrometheusAgent` objects select `ServiceMonitor` objects using label and namespace selectors.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.ServiceMonitor" "servicemonitors" "ServiceMonitor"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
      "thanosRulers" = mkOption {
        description = "The `ThanosRuler` custom resource definition (CRD) defines a desired [Thanos Ruler](https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md) setup to run in a Kubernetes cluster.\n\nA `ThanosRuler` instance requires at least one compatible Prometheus API endpoint (either Thanos Querier or Prometheus services).\n\nThe resource defines via label and namespace selectors which `PrometheusRule` objects should be associated to the deployed Thanos Ruler instances.";
        type = types.attrsOf (
          submoduleForDefinition "monitoring.coreos.com.v1.ThanosRuler" "thanosrulers" "ThanosRuler"
            "monitoring.coreos.com"
            "v1"
        );
        default = { };
      };
    };
  };

  config = {
    # expose resource definitions
    inherit definitions;

    # register resource types
    types = [
      {
        name = "alertmanagers";
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "Alertmanager";
        attrName = "alertmanagers";
      }
      {
        name = "podmonitors";
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "PodMonitor";
        attrName = "podMonitors";
      }
      {
        name = "probes";
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "Probe";
        attrName = "probes";
      }
      {
        name = "prometheuses";
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "Prometheus";
        attrName = "prometheuses";
      }
      {
        name = "prometheusrules";
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "PrometheusRule";
        attrName = "prometheusRules";
      }
      {
        name = "servicemonitors";
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "ServiceMonitor";
        attrName = "serviceMonitors";
      }
      {
        name = "thanosrulers";
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "ThanosRuler";
        attrName = "thanosRulers";
      }
      {
        name = "prometheusagents";
        group = "monitoring.coreos.com";
        version = "v1alpha1";
        kind = "PrometheusAgent";
        attrName = "prometheusAgents";
      }
      {
        name = "scrapeconfigs";
        group = "monitoring.coreos.com";
        version = "v1alpha1";
        kind = "ScrapeConfig";
        attrName = "scrapeConfigs";
      }
    ];

    resources = {
      "monitoring.coreos.com"."v1"."Alertmanager" = mkAliasDefinitions options.resources."alertmanagers";
      "monitoring.coreos.com"."v1"."PodMonitor" = mkAliasDefinitions options.resources."podMonitors";
      "monitoring.coreos.com"."v1"."Probe" = mkAliasDefinitions options.resources."probes";
      "monitoring.coreos.com"."v1"."Prometheus" = mkAliasDefinitions options.resources."prometheuses";
      "monitoring.coreos.com"."v1alpha1"."PrometheusAgent" =
        mkAliasDefinitions
          options.resources."prometheusAgents";
      "monitoring.coreos.com"."v1"."PrometheusRule" =
        mkAliasDefinitions
          options.resources."prometheusRules";
      "monitoring.coreos.com"."v1alpha1"."ScrapeConfig" =
        mkAliasDefinitions
          options.resources."scrapeConfigs";
      "monitoring.coreos.com"."v1"."ServiceMonitor" =
        mkAliasDefinitions
          options.resources."serviceMonitors";
      "monitoring.coreos.com"."v1"."ThanosRuler" = mkAliasDefinitions options.resources."thanosRulers";
    };

    # make all namespaced resources default to the
    # application's namespace
    defaults = [
      {
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "Alertmanager";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "PodMonitor";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "Probe";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "Prometheus";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "PrometheusRule";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "ServiceMonitor";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1";
        kind = "ThanosRuler";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1alpha1";
        kind = "PrometheusAgent";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
      {
        group = "monitoring.coreos.com";
        version = "v1alpha1";
        kind = "ScrapeConfig";
        default.metadata.namespace = lib.mkDefault config.namespace;
      }
    ];
  };
}
