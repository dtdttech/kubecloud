{
  nixidy = {
    bootstrapManifest.enable = true;
    target = {
      repository = "https://github.com/dtdttech/kubecloud.git";
      branch = "master";
      rootPath = "./rendered";
    };
    extraFiles."README.md".text = ''
      # Rendered manifests

      The manifests in this directory are generated by [nixidy](https://github.com/arnarg/nixidy).
    '';
    };
    
    networking.domain = "cdbrdr.com";

    # Secrets configuration for production environment
    secrets = {
      defaultProvider = "external";  # Use external secrets for production
      commonLabels = {
        "environment" = "production";
        "managed-by" = "kubecloud";
      };
      security = {
        enforceEncryption = true;
        allowedNamespaces = ["demo" "monitoring" "kube-system"];
      };
      lifecycle = {
        enableRotation = true;
        rotationInterval = "90d";
      };
      providers = {
        internal.enable = false;  # Disable internal secrets in production
        external = {
          enable = true;
          namespace = "external-secrets-system";
          monitoring.enable = true;
          # Secret stores can be configured per deployment
          secretStores = {
            # Example vault configuration (to be customized per environment)
            vault-store = {
              provider = "vault";
              namespace = null;  # ClusterSecretStore
              config = {
                server = "https://vault.cdbrdr.com";
                path = "secret";
                version = "v2";
              };
              auth = {
                kubernetes = {
                  mountPath = "kubernetes";
                  role = "external-secrets";
                };
              };
            };
          };
        };
      };
    };

    applications.demo = {
    # All resources will be deployed into this namespace.
    namespace = "demo";

    # Automatically generate a namespace resource for the
    # above set namespace
    createNamespace = true;

    resources = let
      labels = {
        "app.kubernetes.io/name" = "nginx";
      };
    in {
      # Define a deployment for running an nginx server
      deployments.nginx.spec = {
        selector.matchLabels = labels;
        template = {
          metadata.labels = labels;
          spec = {
            securityContext.fsGroup = 1000;
            containers.nginx = {
              image = "nginx:1.25.1";
              imagePullPolicy = "IfNotPresent";
              volumeMounts = {
                "/etc/nginx".name = "config";
                "/var/lib/html".name = "static";
              };
            };
            volumes = {
              config.configMap.name = "nginx-config";
              static.configMap.name = "nginx-static";
            };
          };
        };
      };

      # Define config maps with config for nginx
      configMaps = {
        nginx-config.data."nginx.conf" = ''
          user nginx nginx;
          error_log /dev/stdout info;
          pid /dev/null;
          events {}
          http {
            access_log /dev/stdout;
            server {
              listen 80;
              index index.html;
              location / {
                root /var/lib/html;
              }
            }
          }
        '';

        nginx-static.data."index.html" = ''
          <html><body><h1>Hello from NGINX</h1></body></html>
        '';
      };

      # Define service for nginx
      services.nginx.spec = {
        selector = labels;
        ports.http.port = 80;
      };
    };
  };
}
