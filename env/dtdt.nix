{
  nixidy = {
    bootstrapManifest.enable = true;
    target = {
      repository = "https://github.com/dtdttech/kubecloud.git";
      branch = "master";
      rootPath = "./rendered/dtdt";
    };
    extraFiles."README.md".text = ''
      # Rendered manifests for DTDT Environment

      The manifests in this directory are generated by [nixidy](https://github.com/arnarg/nixidy)
      for the DTDT production environment hosting Bookstack and Zammad.
    '';
  };

  networking.domain = "vkm.dtdt.tech";

  # Storage configuration for DTDT environment with Longhorn
  storage = {
    defaultProvider = "longhorn"; # Use Longhorn storage for production
    storageClasses = {
      rwo = "longhorn";
      rwx = "longhorn";
      rox = "longhorn";
    };
    providers = {
      local.enable = false; # Disable local storage
      ceph.enable = false; # Disable Ceph
      cephfs.enable = false; # Disable CephFS
      longhorn = {
        enable = true;
        storageClass = {
          isDefault = true;
          numberOfReplicas = 3;
          reclaimPolicy = "Delete";
          allowVolumeExpansion = true;
        };
        settings = {
          defaultDataPath = "/var/lib/longhorn/";
          defaultReplicaCount = 3;
          replicaSoftAntiAffinity = false;
        };
      };
    };
  };

  # Secrets configuration for DTDT environment
  secrets = {
    defaultProvider = "external"; # Use external secrets for production
    defaultSecretStore = "onepassword-store";
  };

  # Certificate management for DTDT
  security.cert-manager = {
    enable = true;
    namespace = "cert-manager";

    clusterIssuers = {
      # Let's Encrypt production issuer
      letsencrypt-prod = {
        type = "acme";
        acme = {
          server = "https://acme-v02.api.letsencrypt.org/directory";
          email = "admin@vkm.dtdt.tech";
          solvers = [
            {
              http01 = {
                ingress = {
                  class = "nginx";
                };
              };
            }
          ];
        };
      };
    };

    values = {
      prometheus = {
        enabled = true;
        servicemonitor = {
          enabled = true;
        };
      };
    };
  };

  # Bookstack configuration for DTDT
  documentation.bookstack = {
    enable = true;
    domain = "wiki.vkm.dtdt.tech";
    timezone = "America/New_York";
    database = {
      name = "bookstack_vkm";
      user = "bookstack_vkm";
      password = "secure_password_here";
    };
    app = {
      key = "base64:H+eX8SaXwaCTY7jKDfXDfm2NvGV9RkSKzGHvwdHvz/w=";
    };
    storage = {
      provider = "longhorn"; # Use Longhorn storage
      database.size = "10Gi";
      config.size = "5Gi";
    };
    secrets = {
      provider = "external";
    };
  };

  # Zammad configuration for DTDT
  support.zammad = {
    enable = true;
    domain = "help.vkm.dtdt.tech";
    timezone = "America/New_York";
    database = {
      name = "zammad_vkm";
      user = "zammad_vkm";
      password = "secure_password_here";
    };
    elasticsearch = {
      enabled = true;
    };
  };

  # Longhorn backup configuration
  applications.longhorn-backup-secret = {
    namespace = "longhorn-system";
    resources.kubernetesSecrets.longhorn-backup-secret = {
      metadata.name = "longhorn-backup-secret";
      type = "opaque";
      stringData = {
        AWS_ACCESS_KEY_ID = "your-aws-access-key";
        AWS_SECRET_ACCESS_KEY = "your-aws-secret-key";
        AWS_ENDPOINTS = "https://s3.us-east-1.amazonaws.com";
      };
    };
  };

  # Cloudflare API token for DNS challenges
  applications.cloudflare-api-token = {
    namespace = "cert-manager";
    resources.kubernetesSecrets.cloudflare-api-token = {
      metadata.name = "cloudflare-api-token";
      type = "opaque";
      stringData = {
        "api-token" = "your-cloudflare-api-token";
      };
    };
  };

  # Monitoring configuration for DTDT services
  monitoring.prometheus = {
    enable = true;
    values = {
      prometheus.prometheusSpec = {
        retention = "15d";
        storageSpec = {
          volumeClaimTemplate = {
            spec = {
              storageClassName = "longhorn";
              accessModes = ["ReadWriteOnce"];
              resources = {
                requests = {
                  storage = "50Gi";
                };
              };
            };
          };
        };
      };
    };
  };

  # Cluster DNS configuration for kube.vkm.dtdt.tech zone
  applications.cluster-dns = {
    namespace = "kube-system";
    resources.kubernetesServices.dns-internal.spec = {
      type = "ClusterIP";
      selector.k8s-app = "kube-dns";
      ports.dns = {
        port = 53;
        targetPort = 53;
        protocol = "UDP";
      };
      ports.dns-tcp = {
        port = 53;
        targetPort = 53;
        protocol = "TCP";
      };
    };
  };
}
