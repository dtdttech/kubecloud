{
  nixidy = {
    bootstrapManifest.enable = true;
    target = {
      repository = "https://github.com/dtdttech/kubecloud.git";
      branch = "master";
      rootPath = "./rendered/dtdt";
    };
    extraFiles."README.md".text = ''
      # Rendered manifests for DTDT Environment

      The manifests in this directory are generated by [nixidy](https://github.com/arnarg/nixidy)
      for the DTDT production environment hosting Bookstack and Zammad.
    '';
  };

  networking.domain = "vkm.dtdt.tech";

  # Storage configuration for DTDT environment with Longhorn
  storage = {
    defaultProvider = "longhorn"; # Use Longhorn storage for production
    storageClasses = {
      rwo = "longhorn";
      rwx = "longhorn";
      rox = "longhorn";
    };
    providers = {
      local.enable = false; # Disable local storage
      ceph = {
        enable = false; # Disable Ceph
        cluster = {
          clusterID = "ceph-cluster";
          monitors = [ ];
        };
      };
      cephfs.enable = false; # Disable CephFS
      longhorn = {
        enable = true;
        isDefault = true; # Set as default storage class
        defaultClass = true;
        reclaimPolicy = "Delete";
        allowVolumeExpansion = true;
        defaultSettings = {
          replicaCount = 3;
          dataLocality = "strict-local";
          storageNetwork = "10.42.0.0/16";
          defaultDataPath = "/opt/longhorn/";
          backupTarget = "s3://vkm-backups@us-east-1/";
          backupTargetCredentialSecret = "longhorn-backup-secret";
        };
        persistence = {
          enabled = true;
          storageClass = "longhorn";
          size = "20Gi";
        };
      };
    };
  };

  # Secrets configuration for DTDT environment
  secrets = {
    defaultProvider = "external"; # Use external secrets for production
    commonLabels = {
      "environment" = "vkm-production";
      "managed-by" = "kubecloud";
    };
    security = {
      enforceEncryption = true;
      allowedNamespaces = [
        "bookstack"
        "zammad"
        "monitoring"
        "longhorn-system"
        "cert-manager"
        "external-secrets-system"
      ];
    };
    lifecycle = {
      enableRotation = true;
      rotationInterval = "90d";
    };
    providers = {
      internal.enable = false; # Disable internal secrets in production
      external = {
        enable = true;
        namespace = "external-secrets-system";
        monitoring.enable = true;
        secretStores = {
          # 1Password configuration for DTDT
          onepassword-store = {
            provider = "1password";
            namespace = null; # ClusterSecretStore
            config = {
              server = "https://vkm.1password.com";
            };
            auth = {
              kubernetes = {
                mountPath = "kubernetes";
                role = "external-secrets-vkm";
              };
            };
          };
        };
      };
    };
  };

  # Certificate management for DTDT
  security.cert-manager = {
    enable = true;
    namespace = "cert-manager";

    clusterIssuers = {
      # Let's Encrypt production issuer
      letsencrypt-prod = {
        type = "acme";
        acme = {
          server = "https://acme-v02.api.letsencrypt.org/directory";
          email = "admin@vkm.dtdt.tech";
          solvers = [
            {
              http01 = {
                ingress = {
                  class = "nginx";
                };
              };
            }
            # DNS-01 solver for wildcard certificates
            {
              dns01 = {
                cloudflare = {
                  email = "admin@dtdt.tech";
                  apiTokenSecretRef = {
                    name = "cloudflare-api-token";
                    key = "api-token";
                  };
                };
              };
              selector = {
                dnsZones = [ "vkm.dtdt.tech" ];
              };
            }
          ];
        };
      };

      # Self-signed CA for internal services
      internal-ca = {
        type = "ca";
        ca = {
          secretName = "internal-ca-key-pair";
        };
      };
    };

    defaultIssuer = "letsencrypt-prod";

    dns.providers = {
      cloudflare = {
        type = "cloudflare";
        secretName = "cloudflare-api-token";
        config = {
          email = "admin@vkm.dtdt.tech";
        };
      };
    };

    monitoring = {
      enabled = true;
      alerts = {
        certificateExpiry = true;
        certificateRenewalFailure = true;
      };
    };

    security = {
      networkPolicies.enabled = true;
    };
  };

  # Bookstack configuration for DTDT
  documentation.bookstack = {
    enable = true;
    domain = "wiki.vkm.dtdt.tech";
    timezone = "America/New_York";
    database = {
      name = "bookstack_vkm";
      user = "bookstack_vkm";
      password = "secure_password_here";
    };
    app = {
      key = "base64:H+eX8SaXwaCTY7jKDfXDfm2NvGV9RkSKzGHvwdHvz/w=";
    };
    storage = {
      provider = "longhorn"; # Use Longhorn storage
      database.size = "10Gi";
      config.size = "5Gi";
    };
    secrets = {
      provider = "external";
    };
  };

  # Zammad configuration for DTDT
  support.zammad = {
    enable = true;
    domain = "help.vkm.dtdt.tech";
    timezone = "America/New_York";
    database = {
      name = "zammad_vkm";
      user = "zammad_vkm";
      password = "secure_password_here";
    };
    elasticsearch = {
      enabled = true;
    };
  };

  # Longhorn backup configuration
  applications.longhorn-backup-secret = {
    namespace = "longhorn-system";
    resources.kubernetesSecrets.longhorn-backup-secret = {
      metadata.name = "longhorn-backup-secret";
      type = "opaque";
      stringData = {
        AWS_ACCESS_KEY_ID = "your-aws-access-key";
        AWS_SECRET_ACCESS_KEY = "your-aws-secret-key";
        AWS_ENDPOINTS = "https://s3.us-east-1.amazonaws.com";
      };
    };
  };

  # Cloudflare API token for DNS challenges
  applications.cloudflare-api-token = {
    namespace = "cert-manager";
    resources.kubernetesSecrets.cloudflare-api-token = {
      metadata.name = "cloudflare-api-token";
      type = "opaque";
      stringData = {
        "api-token" = "your-cloudflare-api-token";
      };
    };
  };

  # Monitoring configuration for DTDT services
  monitoring.prometheus = {
    enable = true;
    storage = {
      provider = "longhorn";
      size = "50Gi";
    };
    alerts = {
      enabled = true;
      rules = {
        BookstackDown = {
          expr = "up{job=\"bookstack\"} == 0";
          for = "5m";
          labels.severity = "critical";
          annotations.summary = "Bookstack is down";
          annotations.description = "Bookstack service has been down for more than 5 minutes";
        };
        ZammadDown = {
          expr = "up{job=\"zammad\"} == 0";
          for = "5m";
          labels.severity = "critical";
          annotations.summary = "Zammad is down";
          annotations.description = "Zammad service has been down for more than 5 minutes";
        };
      };
    };
  };

  monitoring.grafana = {
    enable = true;
    domain = "grafana.vkm.dtdt.tech";
    storage = {
      provider = "longhorn";
      size = "10Gi";
    };
    ingress = {
      enable = true;
      tls = true;
      annotations = {
        "cert-manager.io/cluster-issuer" = "letsencrypt-prod";
      };
    };
    dashboards = {
      bookstack = true;
      zammad = true;
      longhorn = true;
    };
  };

  # Cluster DNS configuration for kube.vkm.dtdt.tech zone
  applications.cluster-dns = {
    namespace = "kube-system";
    resources.kubernetesServices.dns-internal.spec = {
      type = "ClusterIP";
      selector.k8s-app = "kube-dns";
      ports.dns = {
        port = 53;
        targetPort = 53;
        protocol = "UDP";
      };
      ports.dns-tcp = {
        port = 53;
        targetPort = 53;
        protocol = "TCP";
      };
    };
  };
}
